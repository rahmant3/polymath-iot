
UART_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005298  08005298  00015298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005320  08005320  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08005320  08005320  00015320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005328  08005328  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005328  08005328  00015328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800532c  0800532c  0001532c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08005330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bbc  20000018  08005348  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bd4  08005348  00024bd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000174a1  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ed7  00000000  00000000  000374e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  0003a3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001080  00000000  00000000  0003b4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b6d  00000000  00000000  0003c578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d9b  00000000  00000000  000540e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090e9e  00000000  00000000  00066e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f7d1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004854  00000000  00000000  000f7d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000018 	.word	0x20000018
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005280 	.word	0x08005280

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000001c 	.word	0x2000001c
 80001dc:	08005280 	.word	0x08005280

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96e 	b.w	80004e4 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468c      	mov	ip, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	f040 8083 	bne.w	8000336 <__udivmoddi4+0x116>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d947      	bls.n	80002c6 <__udivmoddi4+0xa6>
 8000236:	fab2 f282 	clz	r2, r2
 800023a:	b142      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023c:	f1c2 0020 	rsb	r0, r2, #32
 8000240:	fa24 f000 	lsr.w	r0, r4, r0
 8000244:	4091      	lsls	r1, r2
 8000246:	4097      	lsls	r7, r2
 8000248:	ea40 0c01 	orr.w	ip, r0, r1
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbbc f6f8 	udiv	r6, ip, r8
 8000258:	fa1f fe87 	uxth.w	lr, r7
 800025c:	fb08 c116 	mls	r1, r8, r6, ip
 8000260:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000264:	fb06 f10e 	mul.w	r1, r6, lr
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18fb      	adds	r3, r7, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 8119 	bcs.w	80004a8 <__udivmoddi4+0x288>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8116 	bls.w	80004a8 <__udivmoddi4+0x288>
 800027c:	3e02      	subs	r6, #2
 800027e:	443b      	add	r3, r7
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fe0e 	mul.w	lr, r0, lr
 8000294:	45a6      	cmp	lr, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	193c      	adds	r4, r7, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8105 	bcs.w	80004ac <__udivmoddi4+0x28c>
 80002a2:	45a6      	cmp	lr, r4
 80002a4:	f240 8102 	bls.w	80004ac <__udivmoddi4+0x28c>
 80002a8:	3802      	subs	r0, #2
 80002aa:	443c      	add	r4, r7
 80002ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b0:	eba4 040e 	sub.w	r4, r4, lr
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	b902      	cbnz	r2, 80002ca <__udivmoddi4+0xaa>
 80002c8:	deff      	udf	#255	; 0xff
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	2a00      	cmp	r2, #0
 80002d0:	d150      	bne.n	8000374 <__udivmoddi4+0x154>
 80002d2:	1bcb      	subs	r3, r1, r7
 80002d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d8:	fa1f f887 	uxth.w	r8, r7
 80002dc:	2601      	movs	r6, #1
 80002de:	fbb3 fcfe 	udiv	ip, r3, lr
 80002e2:	0c21      	lsrs	r1, r4, #16
 80002e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002ec:	fb08 f30c 	mul.w	r3, r8, ip
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0xe4>
 80002f4:	1879      	adds	r1, r7, r1
 80002f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0xe2>
 80002fc:	428b      	cmp	r3, r1
 80002fe:	f200 80e9 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 8000302:	4684      	mov	ip, r0
 8000304:	1ac9      	subs	r1, r1, r3
 8000306:	b2a3      	uxth	r3, r4
 8000308:	fbb1 f0fe 	udiv	r0, r1, lr
 800030c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000310:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000314:	fb08 f800 	mul.w	r8, r8, r0
 8000318:	45a0      	cmp	r8, r4
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x10c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x10a>
 8000324:	45a0      	cmp	r8, r4
 8000326:	f200 80d9 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 800032a:	4618      	mov	r0, r3
 800032c:	eba4 0408 	sub.w	r4, r4, r8
 8000330:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000334:	e7bf      	b.n	80002b6 <__udivmoddi4+0x96>
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x12e>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80b1 	beq.w	80004a2 <__udivmoddi4+0x282>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x1cc>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0x140>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80b8 	bhi.w	80004d0 <__udivmoddi4+0x2b0>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0103 	sbc.w	r1, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	468c      	mov	ip, r1
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0a8      	beq.n	80002c0 <__udivmoddi4+0xa0>
 800036e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000372:	e7a5      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000374:	f1c2 0320 	rsb	r3, r2, #32
 8000378:	fa20 f603 	lsr.w	r6, r0, r3
 800037c:	4097      	lsls	r7, r2
 800037e:	fa01 f002 	lsl.w	r0, r1, r2
 8000382:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000386:	40d9      	lsrs	r1, r3
 8000388:	4330      	orrs	r0, r6
 800038a:	0c03      	lsrs	r3, r0, #16
 800038c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000390:	fa1f f887 	uxth.w	r8, r7
 8000394:	fb0e 1116 	mls	r1, lr, r6, r1
 8000398:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800039c:	fb06 f108 	mul.w	r1, r6, r8
 80003a0:	4299      	cmp	r1, r3
 80003a2:	fa04 f402 	lsl.w	r4, r4, r2
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x19c>
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ae:	f080 808d 	bcs.w	80004cc <__udivmoddi4+0x2ac>
 80003b2:	4299      	cmp	r1, r3
 80003b4:	f240 808a 	bls.w	80004cc <__udivmoddi4+0x2ac>
 80003b8:	3e02      	subs	r6, #2
 80003ba:	443b      	add	r3, r7
 80003bc:	1a5b      	subs	r3, r3, r1
 80003be:	b281      	uxth	r1, r0
 80003c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb00 f308 	mul.w	r3, r0, r8
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x1c4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003da:	d273      	bcs.n	80004c4 <__udivmoddi4+0x2a4>
 80003dc:	428b      	cmp	r3, r1
 80003de:	d971      	bls.n	80004c4 <__udivmoddi4+0x2a4>
 80003e0:	3802      	subs	r0, #2
 80003e2:	4439      	add	r1, r7
 80003e4:	1acb      	subs	r3, r1, r3
 80003e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ea:	e778      	b.n	80002de <__udivmoddi4+0xbe>
 80003ec:	f1c6 0c20 	rsb	ip, r6, #32
 80003f0:	fa03 f406 	lsl.w	r4, r3, r6
 80003f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f8:	431c      	orrs	r4, r3
 80003fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000406:	fa21 f10c 	lsr.w	r1, r1, ip
 800040a:	431f      	orrs	r7, r3
 800040c:	0c3b      	lsrs	r3, r7, #16
 800040e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000412:	fa1f f884 	uxth.w	r8, r4
 8000416:	fb0e 1119 	mls	r1, lr, r9, r1
 800041a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041e:	fb09 fa08 	mul.w	sl, r9, r8
 8000422:	458a      	cmp	sl, r1
 8000424:	fa02 f206 	lsl.w	r2, r2, r6
 8000428:	fa00 f306 	lsl.w	r3, r0, r6
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x220>
 800042e:	1861      	adds	r1, r4, r1
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295
 8000434:	d248      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 8000436:	458a      	cmp	sl, r1
 8000438:	d946      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800043a:	f1a9 0902 	sub.w	r9, r9, #2
 800043e:	4421      	add	r1, r4
 8000440:	eba1 010a 	sub.w	r1, r1, sl
 8000444:	b2bf      	uxth	r7, r7
 8000446:	fbb1 f0fe 	udiv	r0, r1, lr
 800044a:	fb0e 1110 	mls	r1, lr, r0, r1
 800044e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000452:	fb00 f808 	mul.w	r8, r0, r8
 8000456:	45b8      	cmp	r8, r7
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x24a>
 800045a:	19e7      	adds	r7, r4, r7
 800045c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000460:	d22e      	bcs.n	80004c0 <__udivmoddi4+0x2a0>
 8000462:	45b8      	cmp	r8, r7
 8000464:	d92c      	bls.n	80004c0 <__udivmoddi4+0x2a0>
 8000466:	3802      	subs	r0, #2
 8000468:	4427      	add	r7, r4
 800046a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046e:	eba7 0708 	sub.w	r7, r7, r8
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454f      	cmp	r7, r9
 8000478:	46c6      	mov	lr, r8
 800047a:	4649      	mov	r1, r9
 800047c:	d31a      	bcc.n	80004b4 <__udivmoddi4+0x294>
 800047e:	d017      	beq.n	80004b0 <__udivmoddi4+0x290>
 8000480:	b15d      	cbz	r5, 800049a <__udivmoddi4+0x27a>
 8000482:	ebb3 020e 	subs.w	r2, r3, lr
 8000486:	eb67 0701 	sbc.w	r7, r7, r1
 800048a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048e:	40f2      	lsrs	r2, r6
 8000490:	ea4c 0202 	orr.w	r2, ip, r2
 8000494:	40f7      	lsrs	r7, r6
 8000496:	e9c5 2700 	strd	r2, r7, [r5]
 800049a:	2600      	movs	r6, #0
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e70b      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e9      	b.n	8000280 <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fd      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b0:	4543      	cmp	r3, r8
 80004b2:	d2e5      	bcs.n	8000480 <__udivmoddi4+0x260>
 80004b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b8:	eb69 0104 	sbc.w	r1, r9, r4
 80004bc:	3801      	subs	r0, #1
 80004be:	e7df      	b.n	8000480 <__udivmoddi4+0x260>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e7d2      	b.n	800046a <__udivmoddi4+0x24a>
 80004c4:	4660      	mov	r0, ip
 80004c6:	e78d      	b.n	80003e4 <__udivmoddi4+0x1c4>
 80004c8:	4681      	mov	r9, r0
 80004ca:	e7b9      	b.n	8000440 <__udivmoddi4+0x220>
 80004cc:	4666      	mov	r6, ip
 80004ce:	e775      	b.n	80003bc <__udivmoddi4+0x19c>
 80004d0:	4630      	mov	r0, r6
 80004d2:	e74a      	b.n	800036a <__udivmoddi4+0x14a>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	4439      	add	r1, r7
 80004da:	e713      	b.n	8000304 <__udivmoddi4+0xe4>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	e724      	b.n	800032c <__udivmoddi4+0x10c>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <HAL_Init+0x40>)
 80004f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f8:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <HAL_Init+0x40>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0a      	ldr	r2, [pc, #40]	; (8000528 <HAL_Init+0x40>)
 80004fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000502:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <HAL_Init+0x40>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a07      	ldr	r2, [pc, #28]	; (8000528 <HAL_Init+0x40>)
 800050a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800050e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000510:	2003      	movs	r0, #3
 8000512:	f000 f90d 	bl	8000730 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000516:	200f      	movs	r0, #15
 8000518:	f000 f808 	bl	800052c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800051c:	f004 fcc8 	bl	8004eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40023c00 	.word	0x40023c00

0800052c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_InitTick+0x54>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_InitTick+0x58>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4619      	mov	r1, r3
 800053e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000542:	fbb3 f3f1 	udiv	r3, r3, r1
 8000546:	fbb2 f3f3 	udiv	r3, r2, r3
 800054a:	4618      	mov	r0, r3
 800054c:	f000 f917 	bl	800077e <HAL_SYSTICK_Config>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	e00e      	b.n	8000578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2b0f      	cmp	r3, #15
 800055e:	d80a      	bhi.n	8000576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000560:	2200      	movs	r2, #0
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	f04f 30ff 	mov.w	r0, #4294967295
 8000568:	f000 f8ed 	bl	8000746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800056c:	4a06      	ldr	r2, [pc, #24]	; (8000588 <HAL_InitTick+0x5c>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000572:	2300      	movs	r3, #0
 8000574:	e000      	b.n	8000578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000576:	2301      	movs	r3, #1
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000014 	.word	0x20000014
 8000584:	20000004 	.word	0x20000004
 8000588:	20000000 	.word	0x20000000

0800058c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <HAL_IncTick+0x20>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_IncTick+0x24>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4413      	add	r3, r2
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <HAL_IncTick+0x24>)
 800059e:	6013      	str	r3, [r2, #0]
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000004 	.word	0x20000004
 80005b0:	200049d8 	.word	0x200049d8

080005b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  return uwTick;
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <HAL_GetTick+0x14>)
 80005ba:	681b      	ldr	r3, [r3, #0]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	200049d8 	.word	0x200049d8

080005cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f003 0307 	and.w	r3, r3, #7
 80005da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <__NVIC_SetPriorityGrouping+0x44>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e2:	68ba      	ldr	r2, [r7, #8]
 80005e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e8:	4013      	ands	r3, r2
 80005ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fe:	4a04      	ldr	r2, [pc, #16]	; (8000610 <__NVIC_SetPriorityGrouping+0x44>)
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	60d3      	str	r3, [r2, #12]
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <__NVIC_GetPriorityGrouping+0x18>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	0a1b      	lsrs	r3, r3, #8
 800061e:	f003 0307 	and.w	r3, r3, #7
}
 8000622:	4618      	mov	r0, r3
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	6039      	str	r1, [r7, #0]
 800063a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800063c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000640:	2b00      	cmp	r3, #0
 8000642:	db0a      	blt.n	800065a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	b2da      	uxtb	r2, r3
 8000648:	490c      	ldr	r1, [pc, #48]	; (800067c <__NVIC_SetPriority+0x4c>)
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	0112      	lsls	r2, r2, #4
 8000650:	b2d2      	uxtb	r2, r2
 8000652:	440b      	add	r3, r1
 8000654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000658:	e00a      	b.n	8000670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4908      	ldr	r1, [pc, #32]	; (8000680 <__NVIC_SetPriority+0x50>)
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	f003 030f 	and.w	r3, r3, #15
 8000666:	3b04      	subs	r3, #4
 8000668:	0112      	lsls	r2, r2, #4
 800066a:	b2d2      	uxtb	r2, r2
 800066c:	440b      	add	r3, r1
 800066e:	761a      	strb	r2, [r3, #24]
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000e100 	.word	0xe000e100
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000684:	b480      	push	{r7}
 8000686:	b089      	sub	sp, #36	; 0x24
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	f003 0307 	and.w	r3, r3, #7
 8000696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	f1c3 0307 	rsb	r3, r3, #7
 800069e:	2b04      	cmp	r3, #4
 80006a0:	bf28      	it	cs
 80006a2:	2304      	movcs	r3, #4
 80006a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	3304      	adds	r3, #4
 80006aa:	2b06      	cmp	r3, #6
 80006ac:	d902      	bls.n	80006b4 <NVIC_EncodePriority+0x30>
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	3b03      	subs	r3, #3
 80006b2:	e000      	b.n	80006b6 <NVIC_EncodePriority+0x32>
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b8:	f04f 32ff 	mov.w	r2, #4294967295
 80006bc:	69bb      	ldr	r3, [r7, #24]
 80006be:	fa02 f303 	lsl.w	r3, r2, r3
 80006c2:	43da      	mvns	r2, r3
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	401a      	ands	r2, r3
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006cc:	f04f 31ff 	mov.w	r1, #4294967295
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	fa01 f303 	lsl.w	r3, r1, r3
 80006d6:	43d9      	mvns	r1, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006dc:	4313      	orrs	r3, r2
         );
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3724      	adds	r7, #36	; 0x24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
	...

080006ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	3b01      	subs	r3, #1
 80006f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006fc:	d301      	bcc.n	8000702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006fe:	2301      	movs	r3, #1
 8000700:	e00f      	b.n	8000722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <SysTick_Config+0x40>)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3b01      	subs	r3, #1
 8000708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800070a:	210f      	movs	r1, #15
 800070c:	f04f 30ff 	mov.w	r0, #4294967295
 8000710:	f7ff ff8e 	bl	8000630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <SysTick_Config+0x40>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071a:	4b04      	ldr	r3, [pc, #16]	; (800072c <SysTick_Config+0x40>)
 800071c:	2207      	movs	r2, #7
 800071e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000720:	2300      	movs	r3, #0
}
 8000722:	4618      	mov	r0, r3
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	e000e010 	.word	0xe000e010

08000730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff ff47 	bl	80005cc <__NVIC_SetPriorityGrouping>
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000746:	b580      	push	{r7, lr}
 8000748:	b086      	sub	sp, #24
 800074a:	af00      	add	r7, sp, #0
 800074c:	4603      	mov	r3, r0
 800074e:	60b9      	str	r1, [r7, #8]
 8000750:	607a      	str	r2, [r7, #4]
 8000752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000758:	f7ff ff5c 	bl	8000614 <__NVIC_GetPriorityGrouping>
 800075c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800075e:	687a      	ldr	r2, [r7, #4]
 8000760:	68b9      	ldr	r1, [r7, #8]
 8000762:	6978      	ldr	r0, [r7, #20]
 8000764:	f7ff ff8e 	bl	8000684 <NVIC_EncodePriority>
 8000768:	4602      	mov	r2, r0
 800076a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800076e:	4611      	mov	r1, r2
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ff5d 	bl	8000630 <__NVIC_SetPriority>
}
 8000776:	bf00      	nop
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff ffb0 	bl	80006ec <SysTick_Config>
 800078c:	4603      	mov	r3, r0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000798:	b480      	push	{r7}
 800079a:	b089      	sub	sp, #36	; 0x24
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
 80007b2:	e159      	b.n	8000a68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007b4:	2201      	movs	r2, #1
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	fa02 f303 	lsl.w	r3, r2, r3
 80007bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	697a      	ldr	r2, [r7, #20]
 80007c4:	4013      	ands	r3, r2
 80007c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007c8:	693a      	ldr	r2, [r7, #16]
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	f040 8148 	bne.w	8000a62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	f003 0303 	and.w	r3, r3, #3
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d005      	beq.n	80007ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	d130      	bne.n	800084c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007f0:	69fb      	ldr	r3, [r7, #28]
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	2203      	movs	r2, #3
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	43db      	mvns	r3, r3
 80007fc:	69ba      	ldr	r2, [r7, #24]
 80007fe:	4013      	ands	r3, r2
 8000800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	68da      	ldr	r2, [r3, #12]
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	69ba      	ldr	r2, [r7, #24]
 8000810:	4313      	orrs	r3, r2
 8000812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	69ba      	ldr	r2, [r7, #24]
 8000818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000820:	2201      	movs	r2, #1
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	43db      	mvns	r3, r3
 800082a:	69ba      	ldr	r2, [r7, #24]
 800082c:	4013      	ands	r3, r2
 800082e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	091b      	lsrs	r3, r3, #4
 8000836:	f003 0201 	and.w	r2, r3, #1
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	69ba      	ldr	r2, [r7, #24]
 8000842:	4313      	orrs	r3, r2
 8000844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	69ba      	ldr	r2, [r7, #24]
 800084a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	f003 0303 	and.w	r3, r3, #3
 8000854:	2b03      	cmp	r3, #3
 8000856:	d017      	beq.n	8000888 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	2203      	movs	r2, #3
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	43db      	mvns	r3, r3
 800086a:	69ba      	ldr	r2, [r7, #24]
 800086c:	4013      	ands	r3, r2
 800086e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	689a      	ldr	r2, [r3, #8]
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	69ba      	ldr	r2, [r7, #24]
 800087e:	4313      	orrs	r3, r2
 8000880:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	f003 0303 	and.w	r3, r3, #3
 8000890:	2b02      	cmp	r3, #2
 8000892:	d123      	bne.n	80008dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	08da      	lsrs	r2, r3, #3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3208      	adds	r2, #8
 800089c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	f003 0307 	and.w	r3, r3, #7
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	220f      	movs	r2, #15
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	43db      	mvns	r3, r3
 80008b2:	69ba      	ldr	r2, [r7, #24]
 80008b4:	4013      	ands	r3, r2
 80008b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	691a      	ldr	r2, [r3, #16]
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	08da      	lsrs	r2, r3, #3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3208      	adds	r2, #8
 80008d6:	69b9      	ldr	r1, [r7, #24]
 80008d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	2203      	movs	r2, #3
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	43db      	mvns	r3, r3
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	4013      	ands	r3, r2
 80008f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	f003 0203 	and.w	r2, r3, #3
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	69ba      	ldr	r2, [r7, #24]
 8000906:	4313      	orrs	r3, r2
 8000908:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000918:	2b00      	cmp	r3, #0
 800091a:	f000 80a2 	beq.w	8000a62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	4b57      	ldr	r3, [pc, #348]	; (8000a80 <HAL_GPIO_Init+0x2e8>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	4a56      	ldr	r2, [pc, #344]	; (8000a80 <HAL_GPIO_Init+0x2e8>)
 8000928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092c:	6453      	str	r3, [r2, #68]	; 0x44
 800092e:	4b54      	ldr	r3, [pc, #336]	; (8000a80 <HAL_GPIO_Init+0x2e8>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800093a:	4a52      	ldr	r2, [pc, #328]	; (8000a84 <HAL_GPIO_Init+0x2ec>)
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	089b      	lsrs	r3, r3, #2
 8000940:	3302      	adds	r3, #2
 8000942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	f003 0303 	and.w	r3, r3, #3
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	220f      	movs	r2, #15
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	43db      	mvns	r3, r3
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	4013      	ands	r3, r2
 800095c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a49      	ldr	r2, [pc, #292]	; (8000a88 <HAL_GPIO_Init+0x2f0>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d019      	beq.n	800099a <HAL_GPIO_Init+0x202>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a48      	ldr	r2, [pc, #288]	; (8000a8c <HAL_GPIO_Init+0x2f4>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d013      	beq.n	8000996 <HAL_GPIO_Init+0x1fe>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a47      	ldr	r2, [pc, #284]	; (8000a90 <HAL_GPIO_Init+0x2f8>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d00d      	beq.n	8000992 <HAL_GPIO_Init+0x1fa>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a46      	ldr	r2, [pc, #280]	; (8000a94 <HAL_GPIO_Init+0x2fc>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d007      	beq.n	800098e <HAL_GPIO_Init+0x1f6>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a45      	ldr	r2, [pc, #276]	; (8000a98 <HAL_GPIO_Init+0x300>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d101      	bne.n	800098a <HAL_GPIO_Init+0x1f2>
 8000986:	2304      	movs	r3, #4
 8000988:	e008      	b.n	800099c <HAL_GPIO_Init+0x204>
 800098a:	2307      	movs	r3, #7
 800098c:	e006      	b.n	800099c <HAL_GPIO_Init+0x204>
 800098e:	2303      	movs	r3, #3
 8000990:	e004      	b.n	800099c <HAL_GPIO_Init+0x204>
 8000992:	2302      	movs	r3, #2
 8000994:	e002      	b.n	800099c <HAL_GPIO_Init+0x204>
 8000996:	2301      	movs	r3, #1
 8000998:	e000      	b.n	800099c <HAL_GPIO_Init+0x204>
 800099a:	2300      	movs	r3, #0
 800099c:	69fa      	ldr	r2, [r7, #28]
 800099e:	f002 0203 	and.w	r2, r2, #3
 80009a2:	0092      	lsls	r2, r2, #2
 80009a4:	4093      	lsls	r3, r2
 80009a6:	69ba      	ldr	r2, [r7, #24]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009ac:	4935      	ldr	r1, [pc, #212]	; (8000a84 <HAL_GPIO_Init+0x2ec>)
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	089b      	lsrs	r3, r3, #2
 80009b2:	3302      	adds	r3, #2
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009ba:	4b38      	ldr	r3, [pc, #224]	; (8000a9c <HAL_GPIO_Init+0x304>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	43db      	mvns	r3, r3
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	4013      	ands	r3, r2
 80009c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d003      	beq.n	80009de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	4313      	orrs	r3, r2
 80009dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009de:	4a2f      	ldr	r2, [pc, #188]	; (8000a9c <HAL_GPIO_Init+0x304>)
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009e4:	4b2d      	ldr	r3, [pc, #180]	; (8000a9c <HAL_GPIO_Init+0x304>)
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	43db      	mvns	r3, r3
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	4013      	ands	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d003      	beq.n	8000a08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a08:	4a24      	ldr	r2, [pc, #144]	; (8000a9c <HAL_GPIO_Init+0x304>)
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a0e:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <HAL_GPIO_Init+0x304>)
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	43db      	mvns	r3, r3
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d003      	beq.n	8000a32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a32:	4a1a      	ldr	r2, [pc, #104]	; (8000a9c <HAL_GPIO_Init+0x304>)
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <HAL_GPIO_Init+0x304>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	43db      	mvns	r3, r3
 8000a42:	69ba      	ldr	r2, [r7, #24]
 8000a44:	4013      	ands	r3, r2
 8000a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d003      	beq.n	8000a5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a5c:	4a0f      	ldr	r2, [pc, #60]	; (8000a9c <HAL_GPIO_Init+0x304>)
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3301      	adds	r3, #1
 8000a66:	61fb      	str	r3, [r7, #28]
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	2b0f      	cmp	r3, #15
 8000a6c:	f67f aea2 	bls.w	80007b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a70:	bf00      	nop
 8000a72:	bf00      	nop
 8000a74:	3724      	adds	r7, #36	; 0x24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40013800 	.word	0x40013800
 8000a88:	40020000 	.word	0x40020000
 8000a8c:	40020400 	.word	0x40020400
 8000a90:	40020800 	.word	0x40020800
 8000a94:	40020c00 	.word	0x40020c00
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40013c00 	.word	0x40013c00

08000aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	807b      	strh	r3, [r7, #2]
 8000aac:	4613      	mov	r3, r2
 8000aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ab0:	787b      	ldrb	r3, [r7, #1]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d003      	beq.n	8000abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ab6:	887a      	ldrh	r2, [r7, #2]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000abc:	e003      	b.n	8000ac6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000abe:	887b      	ldrh	r3, [r7, #2]
 8000ac0:	041a      	lsls	r2, r3, #16
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	619a      	str	r2, [r3, #24]
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d101      	bne.n	8000ae6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e12b      	b.n	8000d3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d106      	bne.n	8000b00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2200      	movs	r2, #0
 8000af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f004 fa04 	bl	8004f08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2224      	movs	r2, #36	; 0x24
 8000b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f022 0201 	bic.w	r2, r2, #1
 8000b16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000b38:	f000 fd5c 	bl	80015f4 <HAL_RCC_GetPCLK1Freq>
 8000b3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	4a81      	ldr	r2, [pc, #516]	; (8000d48 <HAL_I2C_Init+0x274>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d807      	bhi.n	8000b58 <HAL_I2C_Init+0x84>
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4a80      	ldr	r2, [pc, #512]	; (8000d4c <HAL_I2C_Init+0x278>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	bf94      	ite	ls
 8000b50:	2301      	movls	r3, #1
 8000b52:	2300      	movhi	r3, #0
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	e006      	b.n	8000b66 <HAL_I2C_Init+0x92>
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4a7d      	ldr	r2, [pc, #500]	; (8000d50 <HAL_I2C_Init+0x27c>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	bf94      	ite	ls
 8000b60:	2301      	movls	r3, #1
 8000b62:	2300      	movhi	r3, #0
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e0e7      	b.n	8000d3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	4a78      	ldr	r2, [pc, #480]	; (8000d54 <HAL_I2C_Init+0x280>)
 8000b72:	fba2 2303 	umull	r2, r3, r2, r3
 8000b76:	0c9b      	lsrs	r3, r3, #18
 8000b78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	68ba      	ldr	r2, [r7, #8]
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	6a1b      	ldr	r3, [r3, #32]
 8000b94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	4a6a      	ldr	r2, [pc, #424]	; (8000d48 <HAL_I2C_Init+0x274>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d802      	bhi.n	8000ba8 <HAL_I2C_Init+0xd4>
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	e009      	b.n	8000bbc <HAL_I2C_Init+0xe8>
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000bae:	fb02 f303 	mul.w	r3, r2, r3
 8000bb2:	4a69      	ldr	r2, [pc, #420]	; (8000d58 <HAL_I2C_Init+0x284>)
 8000bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb8:	099b      	lsrs	r3, r3, #6
 8000bba:	3301      	adds	r3, #1
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	6812      	ldr	r2, [r2, #0]
 8000bc0:	430b      	orrs	r3, r1
 8000bc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000bce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	495c      	ldr	r1, [pc, #368]	; (8000d48 <HAL_I2C_Init+0x274>)
 8000bd8:	428b      	cmp	r3, r1
 8000bda:	d819      	bhi.n	8000c10 <HAL_I2C_Init+0x13c>
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	1e59      	subs	r1, r3, #1
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bea:	1c59      	adds	r1, r3, #1
 8000bec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000bf0:	400b      	ands	r3, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d00a      	beq.n	8000c0c <HAL_I2C_Init+0x138>
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	1e59      	subs	r1, r3, #1
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c04:	3301      	adds	r3, #1
 8000c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c0a:	e051      	b.n	8000cb0 <HAL_I2C_Init+0x1dc>
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	e04f      	b.n	8000cb0 <HAL_I2C_Init+0x1dc>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d111      	bne.n	8000c3c <HAL_I2C_Init+0x168>
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	1e58      	subs	r0, r3, #1
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6859      	ldr	r1, [r3, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	440b      	add	r3, r1
 8000c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	bf0c      	ite	eq
 8000c34:	2301      	moveq	r3, #1
 8000c36:	2300      	movne	r3, #0
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	e012      	b.n	8000c62 <HAL_I2C_Init+0x18e>
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	1e58      	subs	r0, r3, #1
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6859      	ldr	r1, [r3, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	440b      	add	r3, r1
 8000c4a:	0099      	lsls	r1, r3, #2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c52:	3301      	adds	r3, #1
 8000c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	bf0c      	ite	eq
 8000c5c:	2301      	moveq	r3, #1
 8000c5e:	2300      	movne	r3, #0
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_I2C_Init+0x196>
 8000c66:	2301      	movs	r3, #1
 8000c68:	e022      	b.n	8000cb0 <HAL_I2C_Init+0x1dc>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d10e      	bne.n	8000c90 <HAL_I2C_Init+0x1bc>
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	1e58      	subs	r0, r3, #1
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6859      	ldr	r1, [r3, #4]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	440b      	add	r3, r1
 8000c80:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c84:	3301      	adds	r3, #1
 8000c86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c8e:	e00f      	b.n	8000cb0 <HAL_I2C_Init+0x1dc>
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	1e58      	subs	r0, r3, #1
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6859      	ldr	r1, [r3, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	440b      	add	r3, r1
 8000c9e:	0099      	lsls	r1, r3, #2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cb0:	6879      	ldr	r1, [r7, #4]
 8000cb2:	6809      	ldr	r1, [r1, #0]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	69da      	ldr	r2, [r3, #28]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a1b      	ldr	r3, [r3, #32]
 8000cca:	431a      	orrs	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000cde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	6911      	ldr	r1, [r2, #16]
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	68d2      	ldr	r2, [r2, #12]
 8000cea:	4311      	orrs	r1, r2
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	6812      	ldr	r2, [r2, #0]
 8000cf0:	430b      	orrs	r3, r1
 8000cf2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	695a      	ldr	r2, [r3, #20]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	431a      	orrs	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f042 0201 	orr.w	r2, r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2220      	movs	r2, #32
 8000d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2200      	movs	r2, #0
 8000d32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	000186a0 	.word	0x000186a0
 8000d4c:	001e847f 	.word	0x001e847f
 8000d50:	003d08ff 	.word	0x003d08ff
 8000d54:	431bde83 	.word	0x431bde83
 8000d58:	10624dd3 	.word	0x10624dd3

08000d5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d101      	bne.n	8000d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e264      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d075      	beq.n	8000e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d7a:	4ba3      	ldr	r3, [pc, #652]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	f003 030c 	and.w	r3, r3, #12
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	d00c      	beq.n	8000da0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d86:	4ba0      	ldr	r3, [pc, #640]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d8e:	2b08      	cmp	r3, #8
 8000d90:	d112      	bne.n	8000db8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d92:	4b9d      	ldr	r3, [pc, #628]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000d9e:	d10b      	bne.n	8000db8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da0:	4b99      	ldr	r3, [pc, #612]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d05b      	beq.n	8000e64 <HAL_RCC_OscConfig+0x108>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d157      	bne.n	8000e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e23f      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dc0:	d106      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x74>
 8000dc2:	4b91      	ldr	r3, [pc, #580]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a90      	ldr	r2, [pc, #576]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	e01d      	b.n	8000e0c <HAL_RCC_OscConfig+0xb0>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dd8:	d10c      	bne.n	8000df4 <HAL_RCC_OscConfig+0x98>
 8000dda:	4b8b      	ldr	r3, [pc, #556]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a8a      	ldr	r2, [pc, #552]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	4b88      	ldr	r3, [pc, #544]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a87      	ldr	r2, [pc, #540]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	e00b      	b.n	8000e0c <HAL_RCC_OscConfig+0xb0>
 8000df4:	4b84      	ldr	r3, [pc, #528]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a83      	ldr	r2, [pc, #524]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	4b81      	ldr	r3, [pc, #516]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a80      	ldr	r2, [pc, #512]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d013      	beq.n	8000e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e14:	f7ff fbce 	bl	80005b4 <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e1c:	f7ff fbca 	bl	80005b4 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b64      	cmp	r3, #100	; 0x64
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e204      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e2e:	4b76      	ldr	r3, [pc, #472]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f0      	beq.n	8000e1c <HAL_RCC_OscConfig+0xc0>
 8000e3a:	e014      	b.n	8000e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e3c:	f7ff fbba 	bl	80005b4 <HAL_GetTick>
 8000e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e42:	e008      	b.n	8000e56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e44:	f7ff fbb6 	bl	80005b4 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b64      	cmp	r3, #100	; 0x64
 8000e50:	d901      	bls.n	8000e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e1f0      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e56:	4b6c      	ldr	r3, [pc, #432]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f0      	bne.n	8000e44 <HAL_RCC_OscConfig+0xe8>
 8000e62:	e000      	b.n	8000e66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d063      	beq.n	8000f3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e72:	4b65      	ldr	r3, [pc, #404]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f003 030c 	and.w	r3, r3, #12
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00b      	beq.n	8000e96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e7e:	4b62      	ldr	r3, [pc, #392]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e86:	2b08      	cmp	r3, #8
 8000e88:	d11c      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e8a:	4b5f      	ldr	r3, [pc, #380]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d116      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e96:	4b5c      	ldr	r3, [pc, #368]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d005      	beq.n	8000eae <HAL_RCC_OscConfig+0x152>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d001      	beq.n	8000eae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e1c4      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eae:	4b56      	ldr	r3, [pc, #344]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	4952      	ldr	r1, [pc, #328]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ec2:	e03a      	b.n	8000f3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d020      	beq.n	8000f0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ecc:	4b4f      	ldr	r3, [pc, #316]	; (800100c <HAL_RCC_OscConfig+0x2b0>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ed2:	f7ff fb6f 	bl	80005b4 <HAL_GetTick>
 8000ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed8:	e008      	b.n	8000eec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eda:	f7ff fb6b 	bl	80005b4 <HAL_GetTick>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e1a5      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eec:	4b46      	ldr	r3, [pc, #280]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0f0      	beq.n	8000eda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef8:	4b43      	ldr	r3, [pc, #268]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	691b      	ldr	r3, [r3, #16]
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	4940      	ldr	r1, [pc, #256]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	600b      	str	r3, [r1, #0]
 8000f0c:	e015      	b.n	8000f3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f0e:	4b3f      	ldr	r3, [pc, #252]	; (800100c <HAL_RCC_OscConfig+0x2b0>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f14:	f7ff fb4e 	bl	80005b4 <HAL_GetTick>
 8000f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f1c:	f7ff fb4a 	bl	80005b4 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e184      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f2e:	4b36      	ldr	r3, [pc, #216]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1f0      	bne.n	8000f1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0308 	and.w	r3, r3, #8
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d030      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d016      	beq.n	8000f7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f4e:	4b30      	ldr	r3, [pc, #192]	; (8001010 <HAL_RCC_OscConfig+0x2b4>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f54:	f7ff fb2e 	bl	80005b4 <HAL_GetTick>
 8000f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f5a:	e008      	b.n	8000f6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f5c:	f7ff fb2a 	bl	80005b4 <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e164      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f6e:	4b26      	ldr	r3, [pc, #152]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0f0      	beq.n	8000f5c <HAL_RCC_OscConfig+0x200>
 8000f7a:	e015      	b.n	8000fa8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f7c:	4b24      	ldr	r3, [pc, #144]	; (8001010 <HAL_RCC_OscConfig+0x2b4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f82:	f7ff fb17 	bl	80005b4 <HAL_GetTick>
 8000f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f88:	e008      	b.n	8000f9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f8a:	f7ff fb13 	bl	80005b4 <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e14d      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1f0      	bne.n	8000f8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f000 80a0 	beq.w	80010f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d10f      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <HAL_RCC_OscConfig+0x2b8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d121      	bne.n	8001036 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <HAL_RCC_OscConfig+0x2b8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a07      	ldr	r2, [pc, #28]	; (8001014 <HAL_RCC_OscConfig+0x2b8>)
 8000ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ffe:	f7ff fad9 	bl	80005b4 <HAL_GetTick>
 8001002:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001004:	e011      	b.n	800102a <HAL_RCC_OscConfig+0x2ce>
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	42470000 	.word	0x42470000
 8001010:	42470e80 	.word	0x42470e80
 8001014:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001018:	f7ff facc 	bl	80005b4 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e106      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800102a:	4b85      	ldr	r3, [pc, #532]	; (8001240 <HAL_RCC_OscConfig+0x4e4>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001032:	2b00      	cmp	r3, #0
 8001034:	d0f0      	beq.n	8001018 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d106      	bne.n	800104c <HAL_RCC_OscConfig+0x2f0>
 800103e:	4b81      	ldr	r3, [pc, #516]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001042:	4a80      	ldr	r2, [pc, #512]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6713      	str	r3, [r2, #112]	; 0x70
 800104a:	e01c      	b.n	8001086 <HAL_RCC_OscConfig+0x32a>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	2b05      	cmp	r3, #5
 8001052:	d10c      	bne.n	800106e <HAL_RCC_OscConfig+0x312>
 8001054:	4b7b      	ldr	r3, [pc, #492]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001058:	4a7a      	ldr	r2, [pc, #488]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 800105a:	f043 0304 	orr.w	r3, r3, #4
 800105e:	6713      	str	r3, [r2, #112]	; 0x70
 8001060:	4b78      	ldr	r3, [pc, #480]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001064:	4a77      	ldr	r2, [pc, #476]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6713      	str	r3, [r2, #112]	; 0x70
 800106c:	e00b      	b.n	8001086 <HAL_RCC_OscConfig+0x32a>
 800106e:	4b75      	ldr	r3, [pc, #468]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001072:	4a74      	ldr	r2, [pc, #464]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001074:	f023 0301 	bic.w	r3, r3, #1
 8001078:	6713      	str	r3, [r2, #112]	; 0x70
 800107a:	4b72      	ldr	r3, [pc, #456]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 800107c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800107e:	4a71      	ldr	r2, [pc, #452]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001080:	f023 0304 	bic.w	r3, r3, #4
 8001084:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d015      	beq.n	80010ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800108e:	f7ff fa91 	bl	80005b4 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001094:	e00a      	b.n	80010ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001096:	f7ff fa8d 	bl	80005b4 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e0c5      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ac:	4b65      	ldr	r3, [pc, #404]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 80010ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0ee      	beq.n	8001096 <HAL_RCC_OscConfig+0x33a>
 80010b8:	e014      	b.n	80010e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ba:	f7ff fa7b 	bl	80005b4 <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010c0:	e00a      	b.n	80010d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010c2:	f7ff fa77 	bl	80005b4 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e0af      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010d8:	4b5a      	ldr	r3, [pc, #360]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 80010da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1ee      	bne.n	80010c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d105      	bne.n	80010f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ea:	4b56      	ldr	r3, [pc, #344]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	4a55      	ldr	r2, [pc, #340]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 80010f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f000 809b 	beq.w	8001236 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001100:	4b50      	ldr	r3, [pc, #320]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 030c 	and.w	r3, r3, #12
 8001108:	2b08      	cmp	r3, #8
 800110a:	d05c      	beq.n	80011c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d141      	bne.n	8001198 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001114:	4b4c      	ldr	r3, [pc, #304]	; (8001248 <HAL_RCC_OscConfig+0x4ec>)
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111a:	f7ff fa4b 	bl	80005b4 <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001122:	f7ff fa47 	bl	80005b4 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e081      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001134:	4b43      	ldr	r3, [pc, #268]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f0      	bne.n	8001122 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	69da      	ldr	r2, [r3, #28]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	431a      	orrs	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	019b      	lsls	r3, r3, #6
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001156:	085b      	lsrs	r3, r3, #1
 8001158:	3b01      	subs	r3, #1
 800115a:	041b      	lsls	r3, r3, #16
 800115c:	431a      	orrs	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001162:	061b      	lsls	r3, r3, #24
 8001164:	4937      	ldr	r1, [pc, #220]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001166:	4313      	orrs	r3, r2
 8001168:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800116a:	4b37      	ldr	r3, [pc, #220]	; (8001248 <HAL_RCC_OscConfig+0x4ec>)
 800116c:	2201      	movs	r2, #1
 800116e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001170:	f7ff fa20 	bl	80005b4 <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001178:	f7ff fa1c 	bl	80005b4 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e056      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800118a:	4b2e      	ldr	r3, [pc, #184]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d0f0      	beq.n	8001178 <HAL_RCC_OscConfig+0x41c>
 8001196:	e04e      	b.n	8001236 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <HAL_RCC_OscConfig+0x4ec>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119e:	f7ff fa09 	bl	80005b4 <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011a6:	f7ff fa05 	bl	80005b4 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e03f      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011b8:	4b22      	ldr	r3, [pc, #136]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1f0      	bne.n	80011a6 <HAL_RCC_OscConfig+0x44a>
 80011c4:	e037      	b.n	8001236 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d101      	bne.n	80011d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e032      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80011d2:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d028      	beq.n	8001232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d121      	bne.n	8001232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d11a      	bne.n	8001232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001202:	4013      	ands	r3, r2
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001208:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800120a:	4293      	cmp	r3, r2
 800120c:	d111      	bne.n	8001232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001218:	085b      	lsrs	r3, r3, #1
 800121a:	3b01      	subs	r3, #1
 800121c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800121e:	429a      	cmp	r2, r3
 8001220:	d107      	bne.n	8001232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800122e:	429a      	cmp	r2, r3
 8001230:	d001      	beq.n	8001236 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40007000 	.word	0x40007000
 8001244:	40023800 	.word	0x40023800
 8001248:	42470060 	.word	0x42470060

0800124c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e0cc      	b.n	80013fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001260:	4b68      	ldr	r3, [pc, #416]	; (8001404 <HAL_RCC_ClockConfig+0x1b8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	429a      	cmp	r2, r3
 800126c:	d90c      	bls.n	8001288 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126e:	4b65      	ldr	r3, [pc, #404]	; (8001404 <HAL_RCC_ClockConfig+0x1b8>)
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001276:	4b63      	ldr	r3, [pc, #396]	; (8001404 <HAL_RCC_ClockConfig+0x1b8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	429a      	cmp	r2, r3
 8001282:	d001      	beq.n	8001288 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e0b8      	b.n	80013fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d020      	beq.n	80012d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	2b00      	cmp	r3, #0
 800129e:	d005      	beq.n	80012ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012a0:	4b59      	ldr	r3, [pc, #356]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	4a58      	ldr	r2, [pc, #352]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80012a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0308 	and.w	r3, r3, #8
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012b8:	4b53      	ldr	r3, [pc, #332]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	4a52      	ldr	r2, [pc, #328]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80012be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012c4:	4b50      	ldr	r3, [pc, #320]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	494d      	ldr	r1, [pc, #308]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d044      	beq.n	800136c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d107      	bne.n	80012fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ea:	4b47      	ldr	r3, [pc, #284]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d119      	bne.n	800132a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e07f      	b.n	80013fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d003      	beq.n	800130a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001306:	2b03      	cmp	r3, #3
 8001308:	d107      	bne.n	800131a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130a:	4b3f      	ldr	r3, [pc, #252]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d109      	bne.n	800132a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e06f      	b.n	80013fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131a:	4b3b      	ldr	r3, [pc, #236]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e067      	b.n	80013fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800132a:	4b37      	ldr	r3, [pc, #220]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f023 0203 	bic.w	r2, r3, #3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	4934      	ldr	r1, [pc, #208]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 8001338:	4313      	orrs	r3, r2
 800133a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800133c:	f7ff f93a 	bl	80005b4 <HAL_GetTick>
 8001340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001342:	e00a      	b.n	800135a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001344:	f7ff f936 	bl	80005b4 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001352:	4293      	cmp	r3, r2
 8001354:	d901      	bls.n	800135a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e04f      	b.n	80013fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135a:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 020c 	and.w	r2, r3, #12
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	429a      	cmp	r2, r3
 800136a:	d1eb      	bne.n	8001344 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800136c:	4b25      	ldr	r3, [pc, #148]	; (8001404 <HAL_RCC_ClockConfig+0x1b8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	d20c      	bcs.n	8001394 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137a:	4b22      	ldr	r3, [pc, #136]	; (8001404 <HAL_RCC_ClockConfig+0x1b8>)
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001382:	4b20      	ldr	r3, [pc, #128]	; (8001404 <HAL_RCC_ClockConfig+0x1b8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	429a      	cmp	r2, r3
 800138e:	d001      	beq.n	8001394 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e032      	b.n	80013fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	2b00      	cmp	r3, #0
 800139e:	d008      	beq.n	80013b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013a0:	4b19      	ldr	r3, [pc, #100]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	4916      	ldr	r1, [pc, #88]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d009      	beq.n	80013d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	490e      	ldr	r1, [pc, #56]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013d2:	f000 f821 	bl	8001418 <HAL_RCC_GetSysClockFreq>
 80013d6:	4602      	mov	r2, r0
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	091b      	lsrs	r3, r3, #4
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	490a      	ldr	r1, [pc, #40]	; (800140c <HAL_RCC_ClockConfig+0x1c0>)
 80013e4:	5ccb      	ldrb	r3, [r1, r3]
 80013e6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ea:	4a09      	ldr	r2, [pc, #36]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80013ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_RCC_ClockConfig+0x1c8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f89a 	bl	800052c <HAL_InitTick>

  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023c00 	.word	0x40023c00
 8001408:	40023800 	.word	0x40023800
 800140c:	08005308 	.word	0x08005308
 8001410:	20000014 	.word	0x20000014
 8001414:	20000000 	.word	0x20000000

08001418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001418:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800141c:	b084      	sub	sp, #16
 800141e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	2300      	movs	r3, #0
 800142a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001430:	4b67      	ldr	r3, [pc, #412]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 030c 	and.w	r3, r3, #12
 8001438:	2b08      	cmp	r3, #8
 800143a:	d00d      	beq.n	8001458 <HAL_RCC_GetSysClockFreq+0x40>
 800143c:	2b08      	cmp	r3, #8
 800143e:	f200 80bd 	bhi.w	80015bc <HAL_RCC_GetSysClockFreq+0x1a4>
 8001442:	2b00      	cmp	r3, #0
 8001444:	d002      	beq.n	800144c <HAL_RCC_GetSysClockFreq+0x34>
 8001446:	2b04      	cmp	r3, #4
 8001448:	d003      	beq.n	8001452 <HAL_RCC_GetSysClockFreq+0x3a>
 800144a:	e0b7      	b.n	80015bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800144c:	4b61      	ldr	r3, [pc, #388]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800144e:	60bb      	str	r3, [r7, #8]
       break;
 8001450:	e0b7      	b.n	80015c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001452:	4b61      	ldr	r3, [pc, #388]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001454:	60bb      	str	r3, [r7, #8]
      break;
 8001456:	e0b4      	b.n	80015c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001458:	4b5d      	ldr	r3, [pc, #372]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001460:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001462:	4b5b      	ldr	r3, [pc, #364]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d04d      	beq.n	800150a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800146e:	4b58      	ldr	r3, [pc, #352]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	099b      	lsrs	r3, r3, #6
 8001474:	461a      	mov	r2, r3
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800147e:	f04f 0100 	mov.w	r1, #0
 8001482:	ea02 0800 	and.w	r8, r2, r0
 8001486:	ea03 0901 	and.w	r9, r3, r1
 800148a:	4640      	mov	r0, r8
 800148c:	4649      	mov	r1, r9
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	014b      	lsls	r3, r1, #5
 8001498:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800149c:	0142      	lsls	r2, r0, #5
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	ebb0 0008 	subs.w	r0, r0, r8
 80014a6:	eb61 0109 	sbc.w	r1, r1, r9
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	018b      	lsls	r3, r1, #6
 80014b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80014b8:	0182      	lsls	r2, r0, #6
 80014ba:	1a12      	subs	r2, r2, r0
 80014bc:	eb63 0301 	sbc.w	r3, r3, r1
 80014c0:	f04f 0000 	mov.w	r0, #0
 80014c4:	f04f 0100 	mov.w	r1, #0
 80014c8:	00d9      	lsls	r1, r3, #3
 80014ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80014ce:	00d0      	lsls	r0, r2, #3
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	eb12 0208 	adds.w	r2, r2, r8
 80014d8:	eb43 0309 	adc.w	r3, r3, r9
 80014dc:	f04f 0000 	mov.w	r0, #0
 80014e0:	f04f 0100 	mov.w	r1, #0
 80014e4:	0259      	lsls	r1, r3, #9
 80014e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80014ea:	0250      	lsls	r0, r2, #9
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	461a      	mov	r2, r3
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	f7fe fe78 	bl	80001f0 <__aeabi_uldivmod>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4613      	mov	r3, r2
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	e04a      	b.n	80015a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800150a:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	099b      	lsrs	r3, r3, #6
 8001510:	461a      	mov	r2, r3
 8001512:	f04f 0300 	mov.w	r3, #0
 8001516:	f240 10ff 	movw	r0, #511	; 0x1ff
 800151a:	f04f 0100 	mov.w	r1, #0
 800151e:	ea02 0400 	and.w	r4, r2, r0
 8001522:	ea03 0501 	and.w	r5, r3, r1
 8001526:	4620      	mov	r0, r4
 8001528:	4629      	mov	r1, r5
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	014b      	lsls	r3, r1, #5
 8001534:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001538:	0142      	lsls	r2, r0, #5
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	1b00      	subs	r0, r0, r4
 8001540:	eb61 0105 	sbc.w	r1, r1, r5
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	f04f 0300 	mov.w	r3, #0
 800154c:	018b      	lsls	r3, r1, #6
 800154e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001552:	0182      	lsls	r2, r0, #6
 8001554:	1a12      	subs	r2, r2, r0
 8001556:	eb63 0301 	sbc.w	r3, r3, r1
 800155a:	f04f 0000 	mov.w	r0, #0
 800155e:	f04f 0100 	mov.w	r1, #0
 8001562:	00d9      	lsls	r1, r3, #3
 8001564:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001568:	00d0      	lsls	r0, r2, #3
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	1912      	adds	r2, r2, r4
 8001570:	eb45 0303 	adc.w	r3, r5, r3
 8001574:	f04f 0000 	mov.w	r0, #0
 8001578:	f04f 0100 	mov.w	r1, #0
 800157c:	0299      	lsls	r1, r3, #10
 800157e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001582:	0290      	lsls	r0, r2, #10
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4610      	mov	r0, r2
 800158a:	4619      	mov	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	461a      	mov	r2, r3
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	f7fe fe2c 	bl	80001f0 <__aeabi_uldivmod>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4613      	mov	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	0c1b      	lsrs	r3, r3, #16
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	3301      	adds	r3, #1
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b8:	60bb      	str	r3, [r7, #8]
      break;
 80015ba:	e002      	b.n	80015c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80015be:	60bb      	str	r3, [r7, #8]
      break;
 80015c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015c2:	68bb      	ldr	r3, [r7, #8]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	00f42400 	.word	0x00f42400
 80015d8:	007a1200 	.word	0x007a1200

080015dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	20000014 	.word	0x20000014

080015f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015f8:	f7ff fff0 	bl	80015dc <HAL_RCC_GetHCLKFreq>
 80015fc:	4602      	mov	r2, r0
 80015fe:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	0a9b      	lsrs	r3, r3, #10
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	4903      	ldr	r1, [pc, #12]	; (8001618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800160a:	5ccb      	ldrb	r3, [r1, r3]
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001610:	4618      	mov	r0, r3
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40023800 	.word	0x40023800
 8001618:	08005318 	.word	0x08005318

0800161c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001620:	f7ff ffdc 	bl	80015dc <HAL_RCC_GetHCLKFreq>
 8001624:	4602      	mov	r2, r0
 8001626:	4b05      	ldr	r3, [pc, #20]	; (800163c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	0b5b      	lsrs	r3, r3, #13
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	4903      	ldr	r1, [pc, #12]	; (8001640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001632:	5ccb      	ldrb	r3, [r1, r3]
 8001634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001638:	4618      	mov	r0, r3
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40023800 	.word	0x40023800
 8001640:	08005318 	.word	0x08005318

08001644 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e03f      	b.n	80016d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d106      	bne.n	8001670 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f003 fc94 	bl	8004f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2224      	movs	r2, #36	; 0x24
 8001674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001686:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f9a7 	bl	80019dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	691a      	ldr	r2, [r3, #16]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800169c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	695a      	ldr	r2, [r3, #20]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80016ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2220      	movs	r2, #32
 80016c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2220      	movs	r2, #32
 80016d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b08a      	sub	sp, #40	; 0x28
 80016e2:	af02      	add	r7, sp, #8
 80016e4:	60f8      	str	r0, [r7, #12]
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	4613      	mov	r3, r2
 80016ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b20      	cmp	r3, #32
 80016fc:	d17c      	bne.n	80017f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d002      	beq.n	800170a <HAL_UART_Transmit+0x2c>
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e075      	b.n	80017fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <HAL_UART_Transmit+0x3e>
 8001718:	2302      	movs	r3, #2
 800171a:	e06e      	b.n	80017fa <HAL_UART_Transmit+0x11c>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2200      	movs	r2, #0
 8001728:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2221      	movs	r2, #33	; 0x21
 800172e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001732:	f7fe ff3f 	bl	80005b4 <HAL_GetTick>
 8001736:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	88fa      	ldrh	r2, [r7, #6]
 800173c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	88fa      	ldrh	r2, [r7, #6]
 8001742:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800174c:	d108      	bne.n	8001760 <HAL_UART_Transmit+0x82>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d104      	bne.n	8001760 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	61bb      	str	r3, [r7, #24]
 800175e:	e003      	b.n	8001768 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001770:	e02a      	b.n	80017c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2200      	movs	r2, #0
 800177a:	2180      	movs	r1, #128	; 0x80
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f000 f8e2 	bl	8001946 <UART_WaitOnFlagUntilTimeout>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e036      	b.n	80017fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10b      	bne.n	80017aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	3302      	adds	r3, #2
 80017a6:	61bb      	str	r3, [r7, #24]
 80017a8:	e007      	b.n	80017ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	781a      	ldrb	r2, [r3, #0]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	3301      	adds	r3, #1
 80017b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80017be:	b29b      	uxth	r3, r3
 80017c0:	3b01      	subs	r3, #1
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1cf      	bne.n	8001772 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2200      	movs	r2, #0
 80017da:	2140      	movs	r1, #64	; 0x40
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 f8b2 	bl	8001946 <UART_WaitOnFlagUntilTimeout>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e006      	b.n	80017fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2220      	movs	r2, #32
 80017f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	e000      	b.n	80017fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80017f8:	2302      	movs	r3, #2
  }
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3720      	adds	r7, #32
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b08a      	sub	sp, #40	; 0x28
 8001806:	af02      	add	r7, sp, #8
 8001808:	60f8      	str	r0, [r7, #12]
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	603b      	str	r3, [r7, #0]
 800180e:	4613      	mov	r3, r2
 8001810:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b20      	cmp	r3, #32
 8001820:	f040 808c 	bne.w	800193c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <HAL_UART_Receive+0x2e>
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e084      	b.n	800193e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800183a:	2b01      	cmp	r3, #1
 800183c:	d101      	bne.n	8001842 <HAL_UART_Receive+0x40>
 800183e:	2302      	movs	r3, #2
 8001840:	e07d      	b.n	800193e <HAL_UART_Receive+0x13c>
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2222      	movs	r2, #34	; 0x22
 8001854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800185e:	f7fe fea9 	bl	80005b4 <HAL_GetTick>
 8001862:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	88fa      	ldrh	r2, [r7, #6]
 8001868:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	88fa      	ldrh	r2, [r7, #6]
 800186e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001878:	d108      	bne.n	800188c <HAL_UART_Receive+0x8a>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d104      	bne.n	800188c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	e003      	b.n	8001894 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800189c:	e043      	b.n	8001926 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2200      	movs	r2, #0
 80018a6:	2120      	movs	r1, #32
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f000 f84c 	bl	8001946 <UART_WaitOnFlagUntilTimeout>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e042      	b.n	800193e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10c      	bne.n	80018d8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	3302      	adds	r3, #2
 80018d4:	61bb      	str	r3, [r7, #24]
 80018d6:	e01f      	b.n	8001918 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018e0:	d007      	beq.n	80018f2 <HAL_UART_Receive+0xf0>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10a      	bne.n	8001900 <HAL_UART_Receive+0xfe>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d106      	bne.n	8001900 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	e008      	b.n	8001912 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800190c:	b2da      	uxtb	r2, r3
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3301      	adds	r3, #1
 8001916:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800191c:	b29b      	uxth	r3, r3
 800191e:	3b01      	subs	r3, #1
 8001920:	b29a      	uxth	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800192a:	b29b      	uxth	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1b6      	bne.n	800189e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2220      	movs	r2, #32
 8001934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	e000      	b.n	800193e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800193c:	2302      	movs	r3, #2
  }
}
 800193e:	4618      	mov	r0, r3
 8001940:	3720      	adds	r7, #32
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	603b      	str	r3, [r7, #0]
 8001952:	4613      	mov	r3, r2
 8001954:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001956:	e02c      	b.n	80019b2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195e:	d028      	beq.n	80019b2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d007      	beq.n	8001976 <UART_WaitOnFlagUntilTimeout+0x30>
 8001966:	f7fe fe25 	bl	80005b4 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	429a      	cmp	r2, r3
 8001974:	d21d      	bcs.n	80019b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001984:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	695a      	ldr	r2, [r3, #20]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 0201 	bic.w	r2, r2, #1
 8001994:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2220      	movs	r2, #32
 800199a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2220      	movs	r2, #32
 80019a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e00f      	b.n	80019d2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	4013      	ands	r3, r2
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	429a      	cmp	r2, r3
 80019c0:	bf0c      	ite	eq
 80019c2:	2301      	moveq	r3, #1
 80019c4:	2300      	movne	r3, #0
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	461a      	mov	r2, r3
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d0c3      	beq.n	8001958 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019e0:	b09f      	sub	sp, #124	; 0x7c
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80019f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019f2:	68d9      	ldr	r1, [r3, #12]
 80019f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	ea40 0301 	orr.w	r3, r0, r1
 80019fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	431a      	orrs	r2, r3
 8001a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001a20:	f021 010c 	bic.w	r1, r1, #12
 8001a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a2a:	430b      	orrs	r3, r1
 8001a2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a3a:	6999      	ldr	r1, [r3, #24]
 8001a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	ea40 0301 	orr.w	r3, r0, r1
 8001a44:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	4bc5      	ldr	r3, [pc, #788]	; (8001d60 <UART_SetConfig+0x384>)
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d004      	beq.n	8001a5a <UART_SetConfig+0x7e>
 8001a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4bc3      	ldr	r3, [pc, #780]	; (8001d64 <UART_SetConfig+0x388>)
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d103      	bne.n	8001a62 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001a5a:	f7ff fddf 	bl	800161c <HAL_RCC_GetPCLK2Freq>
 8001a5e:	6778      	str	r0, [r7, #116]	; 0x74
 8001a60:	e002      	b.n	8001a68 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001a62:	f7ff fdc7 	bl	80015f4 <HAL_RCC_GetPCLK1Freq>
 8001a66:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a70:	f040 80b6 	bne.w	8001be0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001a74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a76:	461c      	mov	r4, r3
 8001a78:	f04f 0500 	mov.w	r5, #0
 8001a7c:	4622      	mov	r2, r4
 8001a7e:	462b      	mov	r3, r5
 8001a80:	1891      	adds	r1, r2, r2
 8001a82:	6439      	str	r1, [r7, #64]	; 0x40
 8001a84:	415b      	adcs	r3, r3
 8001a86:	647b      	str	r3, [r7, #68]	; 0x44
 8001a88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001a8c:	1912      	adds	r2, r2, r4
 8001a8e:	eb45 0303 	adc.w	r3, r5, r3
 8001a92:	f04f 0000 	mov.w	r0, #0
 8001a96:	f04f 0100 	mov.w	r1, #0
 8001a9a:	00d9      	lsls	r1, r3, #3
 8001a9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001aa0:	00d0      	lsls	r0, r2, #3
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	1911      	adds	r1, r2, r4
 8001aa8:	6639      	str	r1, [r7, #96]	; 0x60
 8001aaa:	416b      	adcs	r3, r5
 8001aac:	667b      	str	r3, [r7, #100]	; 0x64
 8001aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	1891      	adds	r1, r2, r2
 8001aba:	63b9      	str	r1, [r7, #56]	; 0x38
 8001abc:	415b      	adcs	r3, r3
 8001abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ac0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001ac4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001ac8:	f7fe fb92 	bl	80001f0 <__aeabi_uldivmod>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4ba5      	ldr	r3, [pc, #660]	; (8001d68 <UART_SetConfig+0x38c>)
 8001ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8001ad6:	095b      	lsrs	r3, r3, #5
 8001ad8:	011e      	lsls	r6, r3, #4
 8001ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001adc:	461c      	mov	r4, r3
 8001ade:	f04f 0500 	mov.w	r5, #0
 8001ae2:	4622      	mov	r2, r4
 8001ae4:	462b      	mov	r3, r5
 8001ae6:	1891      	adds	r1, r2, r2
 8001ae8:	6339      	str	r1, [r7, #48]	; 0x30
 8001aea:	415b      	adcs	r3, r3
 8001aec:	637b      	str	r3, [r7, #52]	; 0x34
 8001aee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001af2:	1912      	adds	r2, r2, r4
 8001af4:	eb45 0303 	adc.w	r3, r5, r3
 8001af8:	f04f 0000 	mov.w	r0, #0
 8001afc:	f04f 0100 	mov.w	r1, #0
 8001b00:	00d9      	lsls	r1, r3, #3
 8001b02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b06:	00d0      	lsls	r0, r2, #3
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	1911      	adds	r1, r2, r4
 8001b0e:	65b9      	str	r1, [r7, #88]	; 0x58
 8001b10:	416b      	adcs	r3, r5
 8001b12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	1891      	adds	r1, r2, r2
 8001b20:	62b9      	str	r1, [r7, #40]	; 0x28
 8001b22:	415b      	adcs	r3, r3
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b2a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001b2e:	f7fe fb5f 	bl	80001f0 <__aeabi_uldivmod>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4b8c      	ldr	r3, [pc, #560]	; (8001d68 <UART_SetConfig+0x38c>)
 8001b38:	fba3 1302 	umull	r1, r3, r3, r2
 8001b3c:	095b      	lsrs	r3, r3, #5
 8001b3e:	2164      	movs	r1, #100	; 0x64
 8001b40:	fb01 f303 	mul.w	r3, r1, r3
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	3332      	adds	r3, #50	; 0x32
 8001b4a:	4a87      	ldr	r2, [pc, #540]	; (8001d68 <UART_SetConfig+0x38c>)
 8001b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b50:	095b      	lsrs	r3, r3, #5
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001b58:	441e      	add	r6, r3
 8001b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f04f 0100 	mov.w	r1, #0
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	1894      	adds	r4, r2, r2
 8001b68:	623c      	str	r4, [r7, #32]
 8001b6a:	415b      	adcs	r3, r3
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b72:	1812      	adds	r2, r2, r0
 8001b74:	eb41 0303 	adc.w	r3, r1, r3
 8001b78:	f04f 0400 	mov.w	r4, #0
 8001b7c:	f04f 0500 	mov.w	r5, #0
 8001b80:	00dd      	lsls	r5, r3, #3
 8001b82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001b86:	00d4      	lsls	r4, r2, #3
 8001b88:	4622      	mov	r2, r4
 8001b8a:	462b      	mov	r3, r5
 8001b8c:	1814      	adds	r4, r2, r0
 8001b8e:	653c      	str	r4, [r7, #80]	; 0x50
 8001b90:	414b      	adcs	r3, r1
 8001b92:	657b      	str	r3, [r7, #84]	; 0x54
 8001b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	1891      	adds	r1, r2, r2
 8001ba0:	61b9      	str	r1, [r7, #24]
 8001ba2:	415b      	adcs	r3, r3
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001baa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001bae:	f7fe fb1f 	bl	80001f0 <__aeabi_uldivmod>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4b6c      	ldr	r3, [pc, #432]	; (8001d68 <UART_SetConfig+0x38c>)
 8001bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8001bbc:	095b      	lsrs	r3, r3, #5
 8001bbe:	2164      	movs	r1, #100	; 0x64
 8001bc0:	fb01 f303 	mul.w	r3, r1, r3
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	3332      	adds	r3, #50	; 0x32
 8001bca:	4a67      	ldr	r2, [pc, #412]	; (8001d68 <UART_SetConfig+0x38c>)
 8001bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd0:	095b      	lsrs	r3, r3, #5
 8001bd2:	f003 0207 	and.w	r2, r3, #7
 8001bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4432      	add	r2, r6
 8001bdc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001bde:	e0b9      	b.n	8001d54 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001be0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001be2:	461c      	mov	r4, r3
 8001be4:	f04f 0500 	mov.w	r5, #0
 8001be8:	4622      	mov	r2, r4
 8001bea:	462b      	mov	r3, r5
 8001bec:	1891      	adds	r1, r2, r2
 8001bee:	6139      	str	r1, [r7, #16]
 8001bf0:	415b      	adcs	r3, r3
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bf8:	1912      	adds	r2, r2, r4
 8001bfa:	eb45 0303 	adc.w	r3, r5, r3
 8001bfe:	f04f 0000 	mov.w	r0, #0
 8001c02:	f04f 0100 	mov.w	r1, #0
 8001c06:	00d9      	lsls	r1, r3, #3
 8001c08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c0c:	00d0      	lsls	r0, r2, #3
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	eb12 0804 	adds.w	r8, r2, r4
 8001c16:	eb43 0905 	adc.w	r9, r3, r5
 8001c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f04f 0100 	mov.w	r1, #0
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	008b      	lsls	r3, r1, #2
 8001c2e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001c32:	0082      	lsls	r2, r0, #2
 8001c34:	4640      	mov	r0, r8
 8001c36:	4649      	mov	r1, r9
 8001c38:	f7fe fada 	bl	80001f0 <__aeabi_uldivmod>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4b49      	ldr	r3, [pc, #292]	; (8001d68 <UART_SetConfig+0x38c>)
 8001c42:	fba3 2302 	umull	r2, r3, r3, r2
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	011e      	lsls	r6, r3, #4
 8001c4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f04f 0100 	mov.w	r1, #0
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	1894      	adds	r4, r2, r2
 8001c58:	60bc      	str	r4, [r7, #8]
 8001c5a:	415b      	adcs	r3, r3
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c62:	1812      	adds	r2, r2, r0
 8001c64:	eb41 0303 	adc.w	r3, r1, r3
 8001c68:	f04f 0400 	mov.w	r4, #0
 8001c6c:	f04f 0500 	mov.w	r5, #0
 8001c70:	00dd      	lsls	r5, r3, #3
 8001c72:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001c76:	00d4      	lsls	r4, r2, #3
 8001c78:	4622      	mov	r2, r4
 8001c7a:	462b      	mov	r3, r5
 8001c7c:	1814      	adds	r4, r2, r0
 8001c7e:	64bc      	str	r4, [r7, #72]	; 0x48
 8001c80:	414b      	adcs	r3, r1
 8001c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f04f 0100 	mov.w	r1, #0
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	008b      	lsls	r3, r1, #2
 8001c98:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001c9c:	0082      	lsls	r2, r0, #2
 8001c9e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001ca2:	f7fe faa5 	bl	80001f0 <__aeabi_uldivmod>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4b2f      	ldr	r3, [pc, #188]	; (8001d68 <UART_SetConfig+0x38c>)
 8001cac:	fba3 1302 	umull	r1, r3, r3, r2
 8001cb0:	095b      	lsrs	r3, r3, #5
 8001cb2:	2164      	movs	r1, #100	; 0x64
 8001cb4:	fb01 f303 	mul.w	r3, r1, r3
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	011b      	lsls	r3, r3, #4
 8001cbc:	3332      	adds	r3, #50	; 0x32
 8001cbe:	4a2a      	ldr	r2, [pc, #168]	; (8001d68 <UART_SetConfig+0x38c>)
 8001cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc4:	095b      	lsrs	r3, r3, #5
 8001cc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cca:	441e      	add	r6, r3
 8001ccc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f04f 0100 	mov.w	r1, #0
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	1894      	adds	r4, r2, r2
 8001cda:	603c      	str	r4, [r7, #0]
 8001cdc:	415b      	adcs	r3, r3
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ce4:	1812      	adds	r2, r2, r0
 8001ce6:	eb41 0303 	adc.w	r3, r1, r3
 8001cea:	f04f 0400 	mov.w	r4, #0
 8001cee:	f04f 0500 	mov.w	r5, #0
 8001cf2:	00dd      	lsls	r5, r3, #3
 8001cf4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001cf8:	00d4      	lsls	r4, r2, #3
 8001cfa:	4622      	mov	r2, r4
 8001cfc:	462b      	mov	r3, r5
 8001cfe:	eb12 0a00 	adds.w	sl, r2, r0
 8001d02:	eb43 0b01 	adc.w	fp, r3, r1
 8001d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f04f 0100 	mov.w	r1, #0
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	008b      	lsls	r3, r1, #2
 8001d1a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001d1e:	0082      	lsls	r2, r0, #2
 8001d20:	4650      	mov	r0, sl
 8001d22:	4659      	mov	r1, fp
 8001d24:	f7fe fa64 	bl	80001f0 <__aeabi_uldivmod>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <UART_SetConfig+0x38c>)
 8001d2e:	fba3 1302 	umull	r1, r3, r3, r2
 8001d32:	095b      	lsrs	r3, r3, #5
 8001d34:	2164      	movs	r1, #100	; 0x64
 8001d36:	fb01 f303 	mul.w	r3, r1, r3
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	3332      	adds	r3, #50	; 0x32
 8001d40:	4a09      	ldr	r2, [pc, #36]	; (8001d68 <UART_SetConfig+0x38c>)
 8001d42:	fba2 2303 	umull	r2, r3, r2, r3
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	f003 020f 	and.w	r2, r3, #15
 8001d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4432      	add	r2, r6
 8001d52:	609a      	str	r2, [r3, #8]
}
 8001d54:	bf00      	nop
 8001d56:	377c      	adds	r7, #124	; 0x7c
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d5e:	bf00      	nop
 8001d60:	40011000 	.word	0x40011000
 8001d64:	40011400 	.word	0x40011400
 8001d68:	51eb851f 	.word	0x51eb851f

08001d6c <__NVIC_SetPriority>:
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	6039      	str	r1, [r7, #0]
 8001d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	db0a      	blt.n	8001d96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	490c      	ldr	r1, [pc, #48]	; (8001db8 <__NVIC_SetPriority+0x4c>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	0112      	lsls	r2, r2, #4
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	440b      	add	r3, r1
 8001d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d94:	e00a      	b.n	8001dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4908      	ldr	r1, [pc, #32]	; (8001dbc <__NVIC_SetPriority+0x50>)
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	3b04      	subs	r3, #4
 8001da4:	0112      	lsls	r2, r2, #4
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	440b      	add	r3, r1
 8001daa:	761a      	strb	r2, [r3, #24]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	e000e100 	.word	0xe000e100
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	f06f 0004 	mvn.w	r0, #4
 8001dca:	f7ff ffcf 	bl	8001d6c <__NVIC_SetPriority>
#endif
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001dda:	f3ef 8305 	mrs	r3, IPSR
 8001dde:	603b      	str	r3, [r7, #0]
  return(result);
 8001de0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001de6:	f06f 0305 	mvn.w	r3, #5
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	e00c      	b.n	8001e08 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <osKernelInitialize+0x44>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d105      	bne.n	8001e02 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <osKernelInitialize+0x44>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	e002      	b.n	8001e08 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
 8001e06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001e08:	687b      	ldr	r3, [r7, #4]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000034 	.word	0x20000034

08001e1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e22:	f3ef 8305 	mrs	r3, IPSR
 8001e26:	603b      	str	r3, [r7, #0]
  return(result);
 8001e28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001e2e:	f06f 0305 	mvn.w	r3, #5
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	e010      	b.n	8001e58 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001e36:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <osKernelStart+0x48>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d109      	bne.n	8001e52 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001e3e:	f7ff ffbf 	bl	8001dc0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001e42:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <osKernelStart+0x48>)
 8001e44:	2202      	movs	r2, #2
 8001e46:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001e48:	f001 f816 	bl	8002e78 <vTaskStartScheduler>
      stat = osOK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	e002      	b.n	8001e58 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295
 8001e56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001e58:	687b      	ldr	r3, [r7, #4]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000034 	.word	0x20000034

08001e68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08e      	sub	sp, #56	; 0x38
 8001e6c:	af04      	add	r7, sp, #16
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e78:	f3ef 8305 	mrs	r3, IPSR
 8001e7c:	617b      	str	r3, [r7, #20]
  return(result);
 8001e7e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d17e      	bne.n	8001f82 <osThreadNew+0x11a>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d07b      	beq.n	8001f82 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001e8e:	2318      	movs	r3, #24
 8001e90:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d045      	beq.n	8001f2e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <osThreadNew+0x48>
        name = attr->name;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d008      	beq.n	8001ed6 <osThreadNew+0x6e>
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	2b38      	cmp	r3, #56	; 0x38
 8001ec8:	d805      	bhi.n	8001ed6 <osThreadNew+0x6e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <osThreadNew+0x72>
        return (NULL);
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e054      	b.n	8001f84 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	089b      	lsrs	r3, r3, #2
 8001ee8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00e      	beq.n	8001f10 <osThreadNew+0xa8>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	2b5b      	cmp	r3, #91	; 0x5b
 8001ef8:	d90a      	bls.n	8001f10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d006      	beq.n	8001f10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d002      	beq.n	8001f10 <osThreadNew+0xa8>
        mem = 1;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	61bb      	str	r3, [r7, #24]
 8001f0e:	e010      	b.n	8001f32 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10c      	bne.n	8001f32 <osThreadNew+0xca>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d108      	bne.n	8001f32 <osThreadNew+0xca>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d104      	bne.n	8001f32 <osThreadNew+0xca>
          mem = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61bb      	str	r3, [r7, #24]
 8001f2c:	e001      	b.n	8001f32 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d110      	bne.n	8001f5a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f40:	9202      	str	r2, [sp, #8]
 8001f42:	9301      	str	r3, [sp, #4]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	6a3a      	ldr	r2, [r7, #32]
 8001f4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 fdf0 	bl	8002b34 <xTaskCreateStatic>
 8001f54:	4603      	mov	r3, r0
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	e013      	b.n	8001f82 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d110      	bne.n	8001f82 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	9301      	str	r3, [sp, #4]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 fe3b 	bl	8002bee <xTaskCreate>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d001      	beq.n	8001f82 <osThreadNew+0x11a>
            hTask = NULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001f82:	693b      	ldr	r3, [r7, #16]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3728      	adds	r7, #40	; 0x28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8001f9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	4a06      	ldr	r2, [pc, #24]	; (8001fbc <vApplicationGetIdleTaskMemory+0x30>)
 8001fa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2280      	movs	r2, #128	; 0x80
 8001fa8:	601a      	str	r2, [r3, #0]
}
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20000038 	.word	0x20000038
 8001fbc:	20000094 	.word	0x20000094

08001fc0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4a07      	ldr	r2, [pc, #28]	; (8001fec <vApplicationGetTimerTaskMemory+0x2c>)
 8001fd0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	4a06      	ldr	r2, [pc, #24]	; (8001ff0 <vApplicationGetTimerTaskMemory+0x30>)
 8001fd6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fde:	601a      	str	r2, [r3, #0]
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	20000294 	.word	0x20000294
 8001ff0:	200002f0 	.word	0x200002f0

08001ff4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f103 0208 	add.w	r2, r3, #8
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f04f 32ff 	mov.w	r2, #4294967295
 800200c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f103 0208 	add.w	r2, r3, #8
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f103 0208 	add.w	r2, r3, #8
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800204e:	b480      	push	{r7}
 8002050:	b085      	sub	sp, #20
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	601a      	str	r2, [r3, #0]
}
 800208a:	bf00      	nop
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002096:	b480      	push	{r7}
 8002098:	b085      	sub	sp, #20
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ac:	d103      	bne.n	80020b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	e00c      	b.n	80020d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3308      	adds	r3, #8
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	e002      	b.n	80020c4 <vListInsert+0x2e>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d2f6      	bcs.n	80020be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	601a      	str	r2, [r3, #0]
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6892      	ldr	r2, [r2, #8]
 800211e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6852      	ldr	r2, [r2, #4]
 8002128:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	429a      	cmp	r2, r3
 8002132:	d103      	bne.n	800213c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	1e5a      	subs	r2, r3, #1
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10a      	bne.n	8002186 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002174:	f383 8811 	msr	BASEPRI, r3
 8002178:	f3bf 8f6f 	isb	sy
 800217c:	f3bf 8f4f 	dsb	sy
 8002180:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002182:	bf00      	nop
 8002184:	e7fe      	b.n	8002184 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002186:	f002 f81d 	bl	80041c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002192:	68f9      	ldr	r1, [r7, #12]
 8002194:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	441a      	add	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b6:	3b01      	subs	r3, #1
 80021b8:	68f9      	ldr	r1, [r7, #12]
 80021ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021bc:	fb01 f303 	mul.w	r3, r1, r3
 80021c0:	441a      	add	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	22ff      	movs	r2, #255	; 0xff
 80021ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	22ff      	movs	r2, #255	; 0xff
 80021d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d114      	bne.n	8002206 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d01a      	beq.n	800221a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3310      	adds	r3, #16
 80021e8:	4618      	mov	r0, r3
 80021ea:	f001 f8cf 	bl	800338c <xTaskRemoveFromEventList>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d012      	beq.n	800221a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <xQueueGenericReset+0xcc>)
 80021f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	f3bf 8f4f 	dsb	sy
 8002200:	f3bf 8f6f 	isb	sy
 8002204:	e009      	b.n	800221a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	3310      	adds	r3, #16
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fef2 	bl	8001ff4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	3324      	adds	r3, #36	; 0x24
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff feed 	bl	8001ff4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800221a:	f002 f803 	bl	8004224 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800221e:	2301      	movs	r3, #1
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	e000ed04 	.word	0xe000ed04

0800222c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08e      	sub	sp, #56	; 0x38
 8002230:	af02      	add	r7, sp, #8
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10a      	bne.n	8002256 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002244:	f383 8811 	msr	BASEPRI, r3
 8002248:	f3bf 8f6f 	isb	sy
 800224c:	f3bf 8f4f 	dsb	sy
 8002250:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002252:	bf00      	nop
 8002254:	e7fe      	b.n	8002254 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10a      	bne.n	8002272 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800225c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002260:	f383 8811 	msr	BASEPRI, r3
 8002264:	f3bf 8f6f 	isb	sy
 8002268:	f3bf 8f4f 	dsb	sy
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800226e:	bf00      	nop
 8002270:	e7fe      	b.n	8002270 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <xQueueGenericCreateStatic+0x52>
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <xQueueGenericCreateStatic+0x56>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <xQueueGenericCreateStatic+0x58>
 8002282:	2300      	movs	r3, #0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10a      	bne.n	800229e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800228c:	f383 8811 	msr	BASEPRI, r3
 8002290:	f3bf 8f6f 	isb	sy
 8002294:	f3bf 8f4f 	dsb	sy
 8002298:	623b      	str	r3, [r7, #32]
}
 800229a:	bf00      	nop
 800229c:	e7fe      	b.n	800229c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <xQueueGenericCreateStatic+0x7e>
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <xQueueGenericCreateStatic+0x82>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <xQueueGenericCreateStatic+0x84>
 80022ae:	2300      	movs	r3, #0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10a      	bne.n	80022ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80022b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b8:	f383 8811 	msr	BASEPRI, r3
 80022bc:	f3bf 8f6f 	isb	sy
 80022c0:	f3bf 8f4f 	dsb	sy
 80022c4:	61fb      	str	r3, [r7, #28]
}
 80022c6:	bf00      	nop
 80022c8:	e7fe      	b.n	80022c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80022ca:	2350      	movs	r3, #80	; 0x50
 80022cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	2b50      	cmp	r3, #80	; 0x50
 80022d2:	d00a      	beq.n	80022ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80022d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d8:	f383 8811 	msr	BASEPRI, r3
 80022dc:	f3bf 8f6f 	isb	sy
 80022e0:	f3bf 8f4f 	dsb	sy
 80022e4:	61bb      	str	r3, [r7, #24]
}
 80022e6:	bf00      	nop
 80022e8:	e7fe      	b.n	80022e8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80022ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80022f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00d      	beq.n	8002312 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80022f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80022fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	4613      	mov	r3, r2
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68b9      	ldr	r1, [r7, #8]
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 f805 	bl	800231c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002314:	4618      	mov	r0, r3
 8002316:	3730      	adds	r7, #48	; 0x30
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
 8002328:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d103      	bne.n	8002338 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	e002      	b.n	800233e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800234a:	2101      	movs	r1, #1
 800234c:	69b8      	ldr	r0, [r7, #24]
 800234e:	f7ff ff05 	bl	800215c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08e      	sub	sp, #56	; 0x38
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002372:	2300      	movs	r3, #0
 8002374:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800237a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10a      	bne.n	8002396 <xQueueGenericSend+0x32>
	__asm volatile
 8002380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002384:	f383 8811 	msr	BASEPRI, r3
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	f3bf 8f4f 	dsb	sy
 8002390:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002392:	bf00      	nop
 8002394:	e7fe      	b.n	8002394 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d103      	bne.n	80023a4 <xQueueGenericSend+0x40>
 800239c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <xQueueGenericSend+0x44>
 80023a4:	2301      	movs	r3, #1
 80023a6:	e000      	b.n	80023aa <xQueueGenericSend+0x46>
 80023a8:	2300      	movs	r3, #0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10a      	bne.n	80023c4 <xQueueGenericSend+0x60>
	__asm volatile
 80023ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b2:	f383 8811 	msr	BASEPRI, r3
 80023b6:	f3bf 8f6f 	isb	sy
 80023ba:	f3bf 8f4f 	dsb	sy
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80023c0:	bf00      	nop
 80023c2:	e7fe      	b.n	80023c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d103      	bne.n	80023d2 <xQueueGenericSend+0x6e>
 80023ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <xQueueGenericSend+0x72>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <xQueueGenericSend+0x74>
 80023d6:	2300      	movs	r3, #0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10a      	bne.n	80023f2 <xQueueGenericSend+0x8e>
	__asm volatile
 80023dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e0:	f383 8811 	msr	BASEPRI, r3
 80023e4:	f3bf 8f6f 	isb	sy
 80023e8:	f3bf 8f4f 	dsb	sy
 80023ec:	623b      	str	r3, [r7, #32]
}
 80023ee:	bf00      	nop
 80023f0:	e7fe      	b.n	80023f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023f2:	f001 f989 	bl	8003708 <xTaskGetSchedulerState>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d102      	bne.n	8002402 <xQueueGenericSend+0x9e>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <xQueueGenericSend+0xa2>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <xQueueGenericSend+0xa4>
 8002406:	2300      	movs	r3, #0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10a      	bne.n	8002422 <xQueueGenericSend+0xbe>
	__asm volatile
 800240c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002410:	f383 8811 	msr	BASEPRI, r3
 8002414:	f3bf 8f6f 	isb	sy
 8002418:	f3bf 8f4f 	dsb	sy
 800241c:	61fb      	str	r3, [r7, #28]
}
 800241e:	bf00      	nop
 8002420:	e7fe      	b.n	8002420 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002422:	f001 fecf 	bl	80041c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800242a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242e:	429a      	cmp	r2, r3
 8002430:	d302      	bcc.n	8002438 <xQueueGenericSend+0xd4>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d129      	bne.n	800248c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	68b9      	ldr	r1, [r7, #8]
 800243c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800243e:	f000 fa0b 	bl	8002858 <prvCopyDataToQueue>
 8002442:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	2b00      	cmp	r3, #0
 800244a:	d010      	beq.n	800246e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800244c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244e:	3324      	adds	r3, #36	; 0x24
 8002450:	4618      	mov	r0, r3
 8002452:	f000 ff9b 	bl	800338c <xTaskRemoveFromEventList>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d013      	beq.n	8002484 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800245c:	4b3f      	ldr	r3, [pc, #252]	; (800255c <xQueueGenericSend+0x1f8>)
 800245e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	f3bf 8f4f 	dsb	sy
 8002468:	f3bf 8f6f 	isb	sy
 800246c:	e00a      	b.n	8002484 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800246e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002470:	2b00      	cmp	r3, #0
 8002472:	d007      	beq.n	8002484 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002474:	4b39      	ldr	r3, [pc, #228]	; (800255c <xQueueGenericSend+0x1f8>)
 8002476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	f3bf 8f4f 	dsb	sy
 8002480:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002484:	f001 fece 	bl	8004224 <vPortExitCritical>
				return pdPASS;
 8002488:	2301      	movs	r3, #1
 800248a:	e063      	b.n	8002554 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d103      	bne.n	800249a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002492:	f001 fec7 	bl	8004224 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002496:	2300      	movs	r3, #0
 8002498:	e05c      	b.n	8002554 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800249a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800249c:	2b00      	cmp	r3, #0
 800249e:	d106      	bne.n	80024ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024a0:	f107 0314 	add.w	r3, r7, #20
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 ffd5 	bl	8003454 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024aa:	2301      	movs	r3, #1
 80024ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80024ae:	f001 feb9 	bl	8004224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80024b2:	f000 fd47 	bl	8002f44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024b6:	f001 fe85 	bl	80041c4 <vPortEnterCritical>
 80024ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024c0:	b25b      	sxtb	r3, r3
 80024c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c6:	d103      	bne.n	80024d0 <xQueueGenericSend+0x16c>
 80024c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024d6:	b25b      	sxtb	r3, r3
 80024d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024dc:	d103      	bne.n	80024e6 <xQueueGenericSend+0x182>
 80024de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024e6:	f001 fe9d 	bl	8004224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80024ea:	1d3a      	adds	r2, r7, #4
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	4611      	mov	r1, r2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 ffc4 	bl	8003480 <xTaskCheckForTimeOut>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d124      	bne.n	8002548 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80024fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002500:	f000 faa2 	bl	8002a48 <prvIsQueueFull>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d018      	beq.n	800253c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250c:	3310      	adds	r3, #16
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	4611      	mov	r1, r2
 8002512:	4618      	mov	r0, r3
 8002514:	f000 feea 	bl	80032ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800251a:	f000 fa2d 	bl	8002978 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800251e:	f000 fd1f 	bl	8002f60 <xTaskResumeAll>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	f47f af7c 	bne.w	8002422 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <xQueueGenericSend+0x1f8>)
 800252c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	f3bf 8f4f 	dsb	sy
 8002536:	f3bf 8f6f 	isb	sy
 800253a:	e772      	b.n	8002422 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800253c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800253e:	f000 fa1b 	bl	8002978 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002542:	f000 fd0d 	bl	8002f60 <xTaskResumeAll>
 8002546:	e76c      	b.n	8002422 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800254a:	f000 fa15 	bl	8002978 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800254e:	f000 fd07 	bl	8002f60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002552:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002554:	4618      	mov	r0, r3
 8002556:	3738      	adds	r7, #56	; 0x38
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	e000ed04 	.word	0xe000ed04

08002560 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b090      	sub	sp, #64	; 0x40
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
 800256c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257c:	f383 8811 	msr	BASEPRI, r3
 8002580:	f3bf 8f6f 	isb	sy
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800258a:	bf00      	nop
 800258c:	e7fe      	b.n	800258c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d103      	bne.n	800259c <xQueueGenericSendFromISR+0x3c>
 8002594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <xQueueGenericSendFromISR+0x40>
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <xQueueGenericSendFromISR+0x42>
 80025a0:	2300      	movs	r3, #0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10a      	bne.n	80025bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80025a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025aa:	f383 8811 	msr	BASEPRI, r3
 80025ae:	f3bf 8f6f 	isb	sy
 80025b2:	f3bf 8f4f 	dsb	sy
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80025b8:	bf00      	nop
 80025ba:	e7fe      	b.n	80025ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d103      	bne.n	80025ca <xQueueGenericSendFromISR+0x6a>
 80025c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <xQueueGenericSendFromISR+0x6e>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <xQueueGenericSendFromISR+0x70>
 80025ce:	2300      	movs	r3, #0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10a      	bne.n	80025ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80025d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d8:	f383 8811 	msr	BASEPRI, r3
 80025dc:	f3bf 8f6f 	isb	sy
 80025e0:	f3bf 8f4f 	dsb	sy
 80025e4:	623b      	str	r3, [r7, #32]
}
 80025e6:	bf00      	nop
 80025e8:	e7fe      	b.n	80025e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80025ea:	f001 fecd 	bl	8004388 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80025ee:	f3ef 8211 	mrs	r2, BASEPRI
 80025f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f6:	f383 8811 	msr	BASEPRI, r3
 80025fa:	f3bf 8f6f 	isb	sy
 80025fe:	f3bf 8f4f 	dsb	sy
 8002602:	61fa      	str	r2, [r7, #28]
 8002604:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002606:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002608:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800260a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800260e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002612:	429a      	cmp	r2, r3
 8002614:	d302      	bcc.n	800261c <xQueueGenericSendFromISR+0xbc>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d12f      	bne.n	800267c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800261c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	68b9      	ldr	r1, [r7, #8]
 8002630:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002632:	f000 f911 	bl	8002858 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002636:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800263a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263e:	d112      	bne.n	8002666 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	2b00      	cmp	r3, #0
 8002646:	d016      	beq.n	8002676 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264a:	3324      	adds	r3, #36	; 0x24
 800264c:	4618      	mov	r0, r3
 800264e:	f000 fe9d 	bl	800338c <xTaskRemoveFromEventList>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00e      	beq.n	8002676 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	e007      	b.n	8002676 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002666:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800266a:	3301      	adds	r3, #1
 800266c:	b2db      	uxtb	r3, r3
 800266e:	b25a      	sxtb	r2, r3
 8002670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002676:	2301      	movs	r3, #1
 8002678:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800267a:	e001      	b.n	8002680 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800267c:	2300      	movs	r3, #0
 800267e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002682:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800268a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800268c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800268e:	4618      	mov	r0, r3
 8002690:	3740      	adds	r7, #64	; 0x40
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08c      	sub	sp, #48	; 0x30
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80026ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10a      	bne.n	80026c8 <xQueueReceive+0x30>
	__asm volatile
 80026b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b6:	f383 8811 	msr	BASEPRI, r3
 80026ba:	f3bf 8f6f 	isb	sy
 80026be:	f3bf 8f4f 	dsb	sy
 80026c2:	623b      	str	r3, [r7, #32]
}
 80026c4:	bf00      	nop
 80026c6:	e7fe      	b.n	80026c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d103      	bne.n	80026d6 <xQueueReceive+0x3e>
 80026ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <xQueueReceive+0x42>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <xQueueReceive+0x44>
 80026da:	2300      	movs	r3, #0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10a      	bne.n	80026f6 <xQueueReceive+0x5e>
	__asm volatile
 80026e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	61fb      	str	r3, [r7, #28]
}
 80026f2:	bf00      	nop
 80026f4:	e7fe      	b.n	80026f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026f6:	f001 f807 	bl	8003708 <xTaskGetSchedulerState>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d102      	bne.n	8002706 <xQueueReceive+0x6e>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <xQueueReceive+0x72>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <xQueueReceive+0x74>
 800270a:	2300      	movs	r3, #0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10a      	bne.n	8002726 <xQueueReceive+0x8e>
	__asm volatile
 8002710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002714:	f383 8811 	msr	BASEPRI, r3
 8002718:	f3bf 8f6f 	isb	sy
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	61bb      	str	r3, [r7, #24]
}
 8002722:	bf00      	nop
 8002724:	e7fe      	b.n	8002724 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002726:	f001 fd4d 	bl	80041c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	2b00      	cmp	r3, #0
 8002734:	d01f      	beq.n	8002776 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002736:	68b9      	ldr	r1, [r7, #8]
 8002738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800273a:	f000 f8f7 	bl	800292c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	1e5a      	subs	r2, r3, #1
 8002742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002744:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00f      	beq.n	800276e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002750:	3310      	adds	r3, #16
 8002752:	4618      	mov	r0, r3
 8002754:	f000 fe1a 	bl	800338c <xTaskRemoveFromEventList>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800275e:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <xQueueReceive+0x1bc>)
 8002760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	f3bf 8f4f 	dsb	sy
 800276a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800276e:	f001 fd59 	bl	8004224 <vPortExitCritical>
				return pdPASS;
 8002772:	2301      	movs	r3, #1
 8002774:	e069      	b.n	800284a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d103      	bne.n	8002784 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800277c:	f001 fd52 	bl	8004224 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002780:	2300      	movs	r3, #0
 8002782:	e062      	b.n	800284a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800278a:	f107 0310 	add.w	r3, r7, #16
 800278e:	4618      	mov	r0, r3
 8002790:	f000 fe60 	bl	8003454 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002794:	2301      	movs	r3, #1
 8002796:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002798:	f001 fd44 	bl	8004224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800279c:	f000 fbd2 	bl	8002f44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027a0:	f001 fd10 	bl	80041c4 <vPortEnterCritical>
 80027a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027aa:	b25b      	sxtb	r3, r3
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b0:	d103      	bne.n	80027ba <xQueueReceive+0x122>
 80027b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027c0:	b25b      	sxtb	r3, r3
 80027c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c6:	d103      	bne.n	80027d0 <xQueueReceive+0x138>
 80027c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027d0:	f001 fd28 	bl	8004224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027d4:	1d3a      	adds	r2, r7, #4
 80027d6:	f107 0310 	add.w	r3, r7, #16
 80027da:	4611      	mov	r1, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 fe4f 	bl	8003480 <xTaskCheckForTimeOut>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d123      	bne.n	8002830 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027ea:	f000 f917 	bl	8002a1c <prvIsQueueEmpty>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d017      	beq.n	8002824 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f6:	3324      	adds	r3, #36	; 0x24
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	4611      	mov	r1, r2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 fd75 	bl	80032ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002802:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002804:	f000 f8b8 	bl	8002978 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002808:	f000 fbaa 	bl	8002f60 <xTaskResumeAll>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d189      	bne.n	8002726 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <xQueueReceive+0x1bc>)
 8002814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	f3bf 8f4f 	dsb	sy
 800281e:	f3bf 8f6f 	isb	sy
 8002822:	e780      	b.n	8002726 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002826:	f000 f8a7 	bl	8002978 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800282a:	f000 fb99 	bl	8002f60 <xTaskResumeAll>
 800282e:	e77a      	b.n	8002726 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002832:	f000 f8a1 	bl	8002978 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002836:	f000 fb93 	bl	8002f60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800283a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800283c:	f000 f8ee 	bl	8002a1c <prvIsQueueEmpty>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	f43f af6f 	beq.w	8002726 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002848:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800284a:	4618      	mov	r0, r3
 800284c:	3730      	adds	r7, #48	; 0x30
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	e000ed04 	.word	0xe000ed04

08002858 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10d      	bne.n	8002892 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d14d      	bne.n	800291a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	4618      	mov	r0, r3
 8002884:	f000 ff5e 	bl	8003744 <xTaskPriorityDisinherit>
 8002888:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	e043      	b.n	800291a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d119      	bne.n	80028cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6858      	ldr	r0, [r3, #4]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	461a      	mov	r2, r3
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	f002 fcd6 	bl	8005254 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	441a      	add	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d32b      	bcc.n	800291a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	e026      	b.n	800291a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	68d8      	ldr	r0, [r3, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	461a      	mov	r2, r3
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	f002 fcbc 	bl	8005254 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	425b      	negs	r3, r3
 80028e6:	441a      	add	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d207      	bcs.n	8002908 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	425b      	negs	r3, r3
 8002902:	441a      	add	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d105      	bne.n	800291a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d002      	beq.n	800291a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	3b01      	subs	r3, #1
 8002918:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002922:	697b      	ldr	r3, [r7, #20]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	d018      	beq.n	8002970 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	441a      	add	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	429a      	cmp	r2, r3
 8002956:	d303      	bcc.n	8002960 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68d9      	ldr	r1, [r3, #12]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	461a      	mov	r2, r3
 800296a:	6838      	ldr	r0, [r7, #0]
 800296c:	f002 fc72 	bl	8005254 <memcpy>
	}
}
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002980:	f001 fc20 	bl	80041c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800298a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800298c:	e011      	b.n	80029b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	2b00      	cmp	r3, #0
 8002994:	d012      	beq.n	80029bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3324      	adds	r3, #36	; 0x24
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fcf6 	bl	800338c <xTaskRemoveFromEventList>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80029a6:	f000 fdcd 	bl	8003544 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	dce9      	bgt.n	800298e <prvUnlockQueue+0x16>
 80029ba:	e000      	b.n	80029be <prvUnlockQueue+0x46>
					break;
 80029bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	22ff      	movs	r2, #255	; 0xff
 80029c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80029c6:	f001 fc2d 	bl	8004224 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80029ca:	f001 fbfb 	bl	80041c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80029d6:	e011      	b.n	80029fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d012      	beq.n	8002a06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3310      	adds	r3, #16
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 fcd1 	bl	800338c <xTaskRemoveFromEventList>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80029f0:	f000 fda8 	bl	8003544 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80029f4:	7bbb      	ldrb	r3, [r7, #14]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80029fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	dce9      	bgt.n	80029d8 <prvUnlockQueue+0x60>
 8002a04:	e000      	b.n	8002a08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002a06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	22ff      	movs	r2, #255	; 0xff
 8002a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002a10:	f001 fc08 	bl	8004224 <vPortExitCritical>
}
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a24:	f001 fbce 	bl	80041c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d102      	bne.n	8002a36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002a30:	2301      	movs	r3, #1
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	e001      	b.n	8002a3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a3a:	f001 fbf3 	bl	8004224 <vPortExitCritical>

	return xReturn;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a50:	f001 fbb8 	bl	80041c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d102      	bne.n	8002a66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002a60:	2301      	movs	r3, #1
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	e001      	b.n	8002a6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a6a:	f001 fbdb 	bl	8004224 <vPortExitCritical>

	return xReturn;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	e014      	b.n	8002ab2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002a88:	4a0f      	ldr	r2, [pc, #60]	; (8002ac8 <vQueueAddToRegistry+0x50>)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10b      	bne.n	8002aac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002a94:	490c      	ldr	r1, [pc, #48]	; (8002ac8 <vQueueAddToRegistry+0x50>)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <vQueueAddToRegistry+0x50>)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002aaa:	e006      	b.n	8002aba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b07      	cmp	r3, #7
 8002ab6:	d9e7      	bls.n	8002a88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002ab8:	bf00      	nop
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	200049dc 	.word	0x200049dc

08002acc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002adc:	f001 fb72 	bl	80041c4 <vPortEnterCritical>
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ae6:	b25b      	sxtb	r3, r3
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aec:	d103      	bne.n	8002af6 <vQueueWaitForMessageRestricted+0x2a>
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002afc:	b25b      	sxtb	r3, r3
 8002afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b02:	d103      	bne.n	8002b0c <vQueueWaitForMessageRestricted+0x40>
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b0c:	f001 fb8a 	bl	8004224 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d106      	bne.n	8002b26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	3324      	adds	r3, #36	; 0x24
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 fc07 	bl	8003334 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002b26:	6978      	ldr	r0, [r7, #20]
 8002b28:	f7ff ff26 	bl	8002978 <prvUnlockQueue>
	}
 8002b2c:	bf00      	nop
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08e      	sub	sp, #56	; 0x38
 8002b38:	af04      	add	r7, sp, #16
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10a      	bne.n	8002b5e <xTaskCreateStatic+0x2a>
	__asm volatile
 8002b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4c:	f383 8811 	msr	BASEPRI, r3
 8002b50:	f3bf 8f6f 	isb	sy
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	623b      	str	r3, [r7, #32]
}
 8002b5a:	bf00      	nop
 8002b5c:	e7fe      	b.n	8002b5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10a      	bne.n	8002b7a <xTaskCreateStatic+0x46>
	__asm volatile
 8002b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b68:	f383 8811 	msr	BASEPRI, r3
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	f3bf 8f4f 	dsb	sy
 8002b74:	61fb      	str	r3, [r7, #28]
}
 8002b76:	bf00      	nop
 8002b78:	e7fe      	b.n	8002b78 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002b7a:	235c      	movs	r3, #92	; 0x5c
 8002b7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	2b5c      	cmp	r3, #92	; 0x5c
 8002b82:	d00a      	beq.n	8002b9a <xTaskCreateStatic+0x66>
	__asm volatile
 8002b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b88:	f383 8811 	msr	BASEPRI, r3
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	61bb      	str	r3, [r7, #24]
}
 8002b96:	bf00      	nop
 8002b98:	e7fe      	b.n	8002b98 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002b9a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d01e      	beq.n	8002be0 <xTaskCreateStatic+0xac>
 8002ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d01b      	beq.n	8002be0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bb0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002bba:	2300      	movs	r3, #0
 8002bbc:	9303      	str	r3, [sp, #12]
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	9302      	str	r3, [sp, #8]
 8002bc2:	f107 0314 	add.w	r3, r7, #20
 8002bc6:	9301      	str	r3, [sp, #4]
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	68b9      	ldr	r1, [r7, #8]
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 f850 	bl	8002c78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002bd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bda:	f000 f8dd 	bl	8002d98 <prvAddNewTaskToReadyList>
 8002bde:	e001      	b.n	8002be4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002be4:	697b      	ldr	r3, [r7, #20]
	}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3728      	adds	r7, #40	; 0x28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b08c      	sub	sp, #48	; 0x30
 8002bf2:	af04      	add	r7, sp, #16
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	603b      	str	r3, [r7, #0]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002bfe:	88fb      	ldrh	r3, [r7, #6]
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4618      	mov	r0, r3
 8002c04:	f001 fc00 	bl	8004408 <pvPortMalloc>
 8002c08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00e      	beq.n	8002c2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c10:	205c      	movs	r0, #92	; 0x5c
 8002c12:	f001 fbf9 	bl	8004408 <pvPortMalloc>
 8002c16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
 8002c24:	e005      	b.n	8002c32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c26:	6978      	ldr	r0, [r7, #20]
 8002c28:	f001 fcba 	bl	80045a0 <vPortFree>
 8002c2c:	e001      	b.n	8002c32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d017      	beq.n	8002c68 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c40:	88fa      	ldrh	r2, [r7, #6]
 8002c42:	2300      	movs	r3, #0
 8002c44:	9303      	str	r3, [sp, #12]
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	9302      	str	r3, [sp, #8]
 8002c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4c:	9301      	str	r3, [sp, #4]
 8002c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f80e 	bl	8002c78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c5c:	69f8      	ldr	r0, [r7, #28]
 8002c5e:	f000 f89b 	bl	8002d98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c62:	2301      	movs	r3, #1
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	e002      	b.n	8002c6e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c68:	f04f 33ff 	mov.w	r3, #4294967295
 8002c6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002c6e:	69bb      	ldr	r3, [r7, #24]
	}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3720      	adds	r7, #32
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
 8002c84:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	461a      	mov	r2, r3
 8002c90:	21a5      	movs	r1, #165	; 0xa5
 8002c92:	f002 faed 	bl	8005270 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	f023 0307 	bic.w	r3, r3, #7
 8002cae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbe:	f383 8811 	msr	BASEPRI, r3
 8002cc2:	f3bf 8f6f 	isb	sy
 8002cc6:	f3bf 8f4f 	dsb	sy
 8002cca:	617b      	str	r3, [r7, #20]
}
 8002ccc:	bf00      	nop
 8002cce:	e7fe      	b.n	8002cce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d01f      	beq.n	8002d16 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
 8002cda:	e012      	b.n	8002d02 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	7819      	ldrb	r1, [r3, #0]
 8002ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	4413      	add	r3, r2
 8002cea:	3334      	adds	r3, #52	; 0x34
 8002cec:	460a      	mov	r2, r1
 8002cee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d006      	beq.n	8002d0a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	61fb      	str	r3, [r7, #28]
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	2b0f      	cmp	r3, #15
 8002d06:	d9e9      	bls.n	8002cdc <prvInitialiseNewTask+0x64>
 8002d08:	e000      	b.n	8002d0c <prvInitialiseNewTask+0x94>
			{
				break;
 8002d0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d14:	e003      	b.n	8002d1e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d20:	2b37      	cmp	r3, #55	; 0x37
 8002d22:	d901      	bls.n	8002d28 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d24:	2337      	movs	r3, #55	; 0x37
 8002d26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d32:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	2200      	movs	r2, #0
 8002d38:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff f978 	bl	8002034 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	3318      	adds	r3, #24
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff f973 	bl	8002034 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d66:	2200      	movs	r2, #0
 8002d68:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	68f9      	ldr	r1, [r7, #12]
 8002d76:	69b8      	ldr	r0, [r7, #24]
 8002d78:	f001 f8f4 	bl	8003f64 <pxPortInitialiseStack>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d002      	beq.n	8002d8e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d8e:	bf00      	nop
 8002d90:	3720      	adds	r7, #32
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002da0:	f001 fa10 	bl	80041c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002da4:	4b2d      	ldr	r3, [pc, #180]	; (8002e5c <prvAddNewTaskToReadyList+0xc4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	3301      	adds	r3, #1
 8002daa:	4a2c      	ldr	r2, [pc, #176]	; (8002e5c <prvAddNewTaskToReadyList+0xc4>)
 8002dac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002dae:	4b2c      	ldr	r3, [pc, #176]	; (8002e60 <prvAddNewTaskToReadyList+0xc8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d109      	bne.n	8002dca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002db6:	4a2a      	ldr	r2, [pc, #168]	; (8002e60 <prvAddNewTaskToReadyList+0xc8>)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002dbc:	4b27      	ldr	r3, [pc, #156]	; (8002e5c <prvAddNewTaskToReadyList+0xc4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d110      	bne.n	8002de6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002dc4:	f000 fbe2 	bl	800358c <prvInitialiseTaskLists>
 8002dc8:	e00d      	b.n	8002de6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002dca:	4b26      	ldr	r3, [pc, #152]	; (8002e64 <prvAddNewTaskToReadyList+0xcc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002dd2:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <prvAddNewTaskToReadyList+0xc8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d802      	bhi.n	8002de6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002de0:	4a1f      	ldr	r2, [pc, #124]	; (8002e60 <prvAddNewTaskToReadyList+0xc8>)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002de6:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <prvAddNewTaskToReadyList+0xd0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	3301      	adds	r3, #1
 8002dec:	4a1e      	ldr	r2, [pc, #120]	; (8002e68 <prvAddNewTaskToReadyList+0xd0>)
 8002dee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002df0:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <prvAddNewTaskToReadyList+0xd0>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <prvAddNewTaskToReadyList+0xd4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d903      	bls.n	8002e0c <prvAddNewTaskToReadyList+0x74>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	4a18      	ldr	r2, [pc, #96]	; (8002e6c <prvAddNewTaskToReadyList+0xd4>)
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4a15      	ldr	r2, [pc, #84]	; (8002e70 <prvAddNewTaskToReadyList+0xd8>)
 8002e1a:	441a      	add	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3304      	adds	r3, #4
 8002e20:	4619      	mov	r1, r3
 8002e22:	4610      	mov	r0, r2
 8002e24:	f7ff f913 	bl	800204e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e28:	f001 f9fc 	bl	8004224 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e2c:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <prvAddNewTaskToReadyList+0xcc>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00e      	beq.n	8002e52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e34:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <prvAddNewTaskToReadyList+0xc8>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d207      	bcs.n	8002e52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002e42:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <prvAddNewTaskToReadyList+0xdc>)
 8002e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	f3bf 8f4f 	dsb	sy
 8002e4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000bc4 	.word	0x20000bc4
 8002e60:	200006f0 	.word	0x200006f0
 8002e64:	20000bd0 	.word	0x20000bd0
 8002e68:	20000be0 	.word	0x20000be0
 8002e6c:	20000bcc 	.word	0x20000bcc
 8002e70:	200006f4 	.word	0x200006f4
 8002e74:	e000ed04 	.word	0xe000ed04

08002e78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08a      	sub	sp, #40	; 0x28
 8002e7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002e86:	463a      	mov	r2, r7
 8002e88:	1d39      	adds	r1, r7, #4
 8002e8a:	f107 0308 	add.w	r3, r7, #8
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff f87c 	bl	8001f8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002e94:	6839      	ldr	r1, [r7, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	9202      	str	r2, [sp, #8]
 8002e9c:	9301      	str	r3, [sp, #4]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	460a      	mov	r2, r1
 8002ea6:	4921      	ldr	r1, [pc, #132]	; (8002f2c <vTaskStartScheduler+0xb4>)
 8002ea8:	4821      	ldr	r0, [pc, #132]	; (8002f30 <vTaskStartScheduler+0xb8>)
 8002eaa:	f7ff fe43 	bl	8002b34 <xTaskCreateStatic>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	4a20      	ldr	r2, [pc, #128]	; (8002f34 <vTaskStartScheduler+0xbc>)
 8002eb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002eb4:	4b1f      	ldr	r3, [pc, #124]	; (8002f34 <vTaskStartScheduler+0xbc>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	e001      	b.n	8002ec6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d102      	bne.n	8002ed2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002ecc:	f000 fcfc 	bl	80038c8 <xTimerCreateTimerTask>
 8002ed0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d116      	bne.n	8002f06 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002edc:	f383 8811 	msr	BASEPRI, r3
 8002ee0:	f3bf 8f6f 	isb	sy
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	613b      	str	r3, [r7, #16]
}
 8002eea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002eec:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <vTaskStartScheduler+0xc0>)
 8002eee:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002ef4:	4b11      	ldr	r3, [pc, #68]	; (8002f3c <vTaskStartScheduler+0xc4>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002efa:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <vTaskStartScheduler+0xc8>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002f00:	f001 f8be 	bl	8004080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002f04:	e00e      	b.n	8002f24 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0c:	d10a      	bne.n	8002f24 <vTaskStartScheduler+0xac>
	__asm volatile
 8002f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f12:	f383 8811 	msr	BASEPRI, r3
 8002f16:	f3bf 8f6f 	isb	sy
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	60fb      	str	r3, [r7, #12]
}
 8002f20:	bf00      	nop
 8002f22:	e7fe      	b.n	8002f22 <vTaskStartScheduler+0xaa>
}
 8002f24:	bf00      	nop
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	08005298 	.word	0x08005298
 8002f30:	0800355d 	.word	0x0800355d
 8002f34:	20000be8 	.word	0x20000be8
 8002f38:	20000be4 	.word	0x20000be4
 8002f3c:	20000bd0 	.word	0x20000bd0
 8002f40:	20000bc8 	.word	0x20000bc8

08002f44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002f48:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <vTaskSuspendAll+0x18>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	4a03      	ldr	r2, [pc, #12]	; (8002f5c <vTaskSuspendAll+0x18>)
 8002f50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002f52:	bf00      	nop
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	20000bec 	.word	0x20000bec

08002f60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002f6e:	4b42      	ldr	r3, [pc, #264]	; (8003078 <xTaskResumeAll+0x118>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10a      	bne.n	8002f8c <xTaskResumeAll+0x2c>
	__asm volatile
 8002f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7a:	f383 8811 	msr	BASEPRI, r3
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	603b      	str	r3, [r7, #0]
}
 8002f88:	bf00      	nop
 8002f8a:	e7fe      	b.n	8002f8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002f8c:	f001 f91a 	bl	80041c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002f90:	4b39      	ldr	r3, [pc, #228]	; (8003078 <xTaskResumeAll+0x118>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3b01      	subs	r3, #1
 8002f96:	4a38      	ldr	r2, [pc, #224]	; (8003078 <xTaskResumeAll+0x118>)
 8002f98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f9a:	4b37      	ldr	r3, [pc, #220]	; (8003078 <xTaskResumeAll+0x118>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d162      	bne.n	8003068 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002fa2:	4b36      	ldr	r3, [pc, #216]	; (800307c <xTaskResumeAll+0x11c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d05e      	beq.n	8003068 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002faa:	e02f      	b.n	800300c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fac:	4b34      	ldr	r3, [pc, #208]	; (8003080 <xTaskResumeAll+0x120>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	3318      	adds	r3, #24
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff f8a5 	bl	8002108 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff f8a0 	bl	8002108 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fcc:	4b2d      	ldr	r3, [pc, #180]	; (8003084 <xTaskResumeAll+0x124>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d903      	bls.n	8002fdc <xTaskResumeAll+0x7c>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	4a2a      	ldr	r2, [pc, #168]	; (8003084 <xTaskResumeAll+0x124>)
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4a27      	ldr	r2, [pc, #156]	; (8003088 <xTaskResumeAll+0x128>)
 8002fea:	441a      	add	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	f7ff f82b 	bl	800204e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffc:	4b23      	ldr	r3, [pc, #140]	; (800308c <xTaskResumeAll+0x12c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	429a      	cmp	r2, r3
 8003004:	d302      	bcc.n	800300c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003006:	4b22      	ldr	r3, [pc, #136]	; (8003090 <xTaskResumeAll+0x130>)
 8003008:	2201      	movs	r2, #1
 800300a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800300c:	4b1c      	ldr	r3, [pc, #112]	; (8003080 <xTaskResumeAll+0x120>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1cb      	bne.n	8002fac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800301a:	f000 fb55 	bl	80036c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800301e:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <xTaskResumeAll+0x134>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d010      	beq.n	800304c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800302a:	f000 f847 	bl	80030bc <xTaskIncrementTick>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d002      	beq.n	800303a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003034:	4b16      	ldr	r3, [pc, #88]	; (8003090 <xTaskResumeAll+0x130>)
 8003036:	2201      	movs	r2, #1
 8003038:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3b01      	subs	r3, #1
 800303e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f1      	bne.n	800302a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003046:	4b13      	ldr	r3, [pc, #76]	; (8003094 <xTaskResumeAll+0x134>)
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800304c:	4b10      	ldr	r3, [pc, #64]	; (8003090 <xTaskResumeAll+0x130>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d009      	beq.n	8003068 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003054:	2301      	movs	r3, #1
 8003056:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003058:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <xTaskResumeAll+0x138>)
 800305a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003068:	f001 f8dc 	bl	8004224 <vPortExitCritical>

	return xAlreadyYielded;
 800306c:	68bb      	ldr	r3, [r7, #8]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20000bec 	.word	0x20000bec
 800307c:	20000bc4 	.word	0x20000bc4
 8003080:	20000b84 	.word	0x20000b84
 8003084:	20000bcc 	.word	0x20000bcc
 8003088:	200006f4 	.word	0x200006f4
 800308c:	200006f0 	.word	0x200006f0
 8003090:	20000bd8 	.word	0x20000bd8
 8003094:	20000bd4 	.word	0x20000bd4
 8003098:	e000ed04 	.word	0xe000ed04

0800309c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <xTaskGetTickCount+0x1c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80030a8:	687b      	ldr	r3, [r7, #4]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	20000bc8 	.word	0x20000bc8

080030bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030c6:	4b4f      	ldr	r3, [pc, #316]	; (8003204 <xTaskIncrementTick+0x148>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f040 808f 	bne.w	80031ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80030d0:	4b4d      	ldr	r3, [pc, #308]	; (8003208 <xTaskIncrementTick+0x14c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3301      	adds	r3, #1
 80030d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80030d8:	4a4b      	ldr	r2, [pc, #300]	; (8003208 <xTaskIncrementTick+0x14c>)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d120      	bne.n	8003126 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80030e4:	4b49      	ldr	r3, [pc, #292]	; (800320c <xTaskIncrementTick+0x150>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <xTaskIncrementTick+0x48>
	__asm volatile
 80030ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f2:	f383 8811 	msr	BASEPRI, r3
 80030f6:	f3bf 8f6f 	isb	sy
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	603b      	str	r3, [r7, #0]
}
 8003100:	bf00      	nop
 8003102:	e7fe      	b.n	8003102 <xTaskIncrementTick+0x46>
 8003104:	4b41      	ldr	r3, [pc, #260]	; (800320c <xTaskIncrementTick+0x150>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	4b41      	ldr	r3, [pc, #260]	; (8003210 <xTaskIncrementTick+0x154>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a3f      	ldr	r2, [pc, #252]	; (800320c <xTaskIncrementTick+0x150>)
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	4a3f      	ldr	r2, [pc, #252]	; (8003210 <xTaskIncrementTick+0x154>)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6013      	str	r3, [r2, #0]
 8003118:	4b3e      	ldr	r3, [pc, #248]	; (8003214 <xTaskIncrementTick+0x158>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3301      	adds	r3, #1
 800311e:	4a3d      	ldr	r2, [pc, #244]	; (8003214 <xTaskIncrementTick+0x158>)
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	f000 fad1 	bl	80036c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003126:	4b3c      	ldr	r3, [pc, #240]	; (8003218 <xTaskIncrementTick+0x15c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	429a      	cmp	r2, r3
 800312e:	d349      	bcc.n	80031c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003130:	4b36      	ldr	r3, [pc, #216]	; (800320c <xTaskIncrementTick+0x150>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d104      	bne.n	8003144 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800313a:	4b37      	ldr	r3, [pc, #220]	; (8003218 <xTaskIncrementTick+0x15c>)
 800313c:	f04f 32ff 	mov.w	r2, #4294967295
 8003140:	601a      	str	r2, [r3, #0]
					break;
 8003142:	e03f      	b.n	80031c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003144:	4b31      	ldr	r3, [pc, #196]	; (800320c <xTaskIncrementTick+0x150>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	429a      	cmp	r2, r3
 800315a:	d203      	bcs.n	8003164 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800315c:	4a2e      	ldr	r2, [pc, #184]	; (8003218 <xTaskIncrementTick+0x15c>)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003162:	e02f      	b.n	80031c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	3304      	adds	r3, #4
 8003168:	4618      	mov	r0, r3
 800316a:	f7fe ffcd 	bl	8002108 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003172:	2b00      	cmp	r3, #0
 8003174:	d004      	beq.n	8003180 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	3318      	adds	r3, #24
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe ffc4 	bl	8002108 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003184:	4b25      	ldr	r3, [pc, #148]	; (800321c <xTaskIncrementTick+0x160>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d903      	bls.n	8003194 <xTaskIncrementTick+0xd8>
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	4a22      	ldr	r2, [pc, #136]	; (800321c <xTaskIncrementTick+0x160>)
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003198:	4613      	mov	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4a1f      	ldr	r2, [pc, #124]	; (8003220 <xTaskIncrementTick+0x164>)
 80031a2:	441a      	add	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	3304      	adds	r3, #4
 80031a8:	4619      	mov	r1, r3
 80031aa:	4610      	mov	r0, r2
 80031ac:	f7fe ff4f 	bl	800204e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b4:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <xTaskIncrementTick+0x168>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d3b8      	bcc.n	8003130 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80031be:	2301      	movs	r3, #1
 80031c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031c2:	e7b5      	b.n	8003130 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80031c4:	4b17      	ldr	r3, [pc, #92]	; (8003224 <xTaskIncrementTick+0x168>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ca:	4915      	ldr	r1, [pc, #84]	; (8003220 <xTaskIncrementTick+0x164>)
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d901      	bls.n	80031e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80031dc:	2301      	movs	r3, #1
 80031de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80031e0:	4b11      	ldr	r3, [pc, #68]	; (8003228 <xTaskIncrementTick+0x16c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d007      	beq.n	80031f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80031e8:	2301      	movs	r3, #1
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	e004      	b.n	80031f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80031ee:	4b0f      	ldr	r3, [pc, #60]	; (800322c <xTaskIncrementTick+0x170>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3301      	adds	r3, #1
 80031f4:	4a0d      	ldr	r2, [pc, #52]	; (800322c <xTaskIncrementTick+0x170>)
 80031f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80031f8:	697b      	ldr	r3, [r7, #20]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20000bec 	.word	0x20000bec
 8003208:	20000bc8 	.word	0x20000bc8
 800320c:	20000b7c 	.word	0x20000b7c
 8003210:	20000b80 	.word	0x20000b80
 8003214:	20000bdc 	.word	0x20000bdc
 8003218:	20000be4 	.word	0x20000be4
 800321c:	20000bcc 	.word	0x20000bcc
 8003220:	200006f4 	.word	0x200006f4
 8003224:	200006f0 	.word	0x200006f0
 8003228:	20000bd8 	.word	0x20000bd8
 800322c:	20000bd4 	.word	0x20000bd4

08003230 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003236:	4b28      	ldr	r3, [pc, #160]	; (80032d8 <vTaskSwitchContext+0xa8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800323e:	4b27      	ldr	r3, [pc, #156]	; (80032dc <vTaskSwitchContext+0xac>)
 8003240:	2201      	movs	r2, #1
 8003242:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003244:	e041      	b.n	80032ca <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003246:	4b25      	ldr	r3, [pc, #148]	; (80032dc <vTaskSwitchContext+0xac>)
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800324c:	4b24      	ldr	r3, [pc, #144]	; (80032e0 <vTaskSwitchContext+0xb0>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	e010      	b.n	8003276 <vTaskSwitchContext+0x46>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10a      	bne.n	8003270 <vTaskSwitchContext+0x40>
	__asm volatile
 800325a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325e:	f383 8811 	msr	BASEPRI, r3
 8003262:	f3bf 8f6f 	isb	sy
 8003266:	f3bf 8f4f 	dsb	sy
 800326a:	607b      	str	r3, [r7, #4]
}
 800326c:	bf00      	nop
 800326e:	e7fe      	b.n	800326e <vTaskSwitchContext+0x3e>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	3b01      	subs	r3, #1
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	491b      	ldr	r1, [pc, #108]	; (80032e4 <vTaskSwitchContext+0xb4>)
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0e4      	beq.n	8003254 <vTaskSwitchContext+0x24>
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4a13      	ldr	r2, [pc, #76]	; (80032e4 <vTaskSwitchContext+0xb4>)
 8003296:	4413      	add	r3, r2
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	605a      	str	r2, [r3, #4]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	3308      	adds	r3, #8
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d104      	bne.n	80032ba <vTaskSwitchContext+0x8a>
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	4a09      	ldr	r2, [pc, #36]	; (80032e8 <vTaskSwitchContext+0xb8>)
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	4a06      	ldr	r2, [pc, #24]	; (80032e0 <vTaskSwitchContext+0xb0>)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6013      	str	r3, [r2, #0]
}
 80032ca:	bf00      	nop
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	20000bec 	.word	0x20000bec
 80032dc:	20000bd8 	.word	0x20000bd8
 80032e0:	20000bcc 	.word	0x20000bcc
 80032e4:	200006f4 	.word	0x200006f4
 80032e8:	200006f0 	.word	0x200006f0

080032ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10a      	bne.n	8003312 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80032fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003300:	f383 8811 	msr	BASEPRI, r3
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	60fb      	str	r3, [r7, #12]
}
 800330e:	bf00      	nop
 8003310:	e7fe      	b.n	8003310 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003312:	4b07      	ldr	r3, [pc, #28]	; (8003330 <vTaskPlaceOnEventList+0x44>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3318      	adds	r3, #24
 8003318:	4619      	mov	r1, r3
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7fe febb 	bl	8002096 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003320:	2101      	movs	r1, #1
 8003322:	6838      	ldr	r0, [r7, #0]
 8003324:	f000 fa7c 	bl	8003820 <prvAddCurrentTaskToDelayedList>
}
 8003328:	bf00      	nop
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	200006f0 	.word	0x200006f0

08003334 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10a      	bne.n	800335c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334a:	f383 8811 	msr	BASEPRI, r3
 800334e:	f3bf 8f6f 	isb	sy
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	617b      	str	r3, [r7, #20]
}
 8003358:	bf00      	nop
 800335a:	e7fe      	b.n	800335a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800335c:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <vTaskPlaceOnEventListRestricted+0x54>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3318      	adds	r3, #24
 8003362:	4619      	mov	r1, r3
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f7fe fe72 	bl	800204e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003370:	f04f 33ff 	mov.w	r3, #4294967295
 8003374:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	68b8      	ldr	r0, [r7, #8]
 800337a:	f000 fa51 	bl	8003820 <prvAddCurrentTaskToDelayedList>
	}
 800337e:	bf00      	nop
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	200006f0 	.word	0x200006f0

0800338c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10a      	bne.n	80033b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80033a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a6:	f383 8811 	msr	BASEPRI, r3
 80033aa:	f3bf 8f6f 	isb	sy
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	60fb      	str	r3, [r7, #12]
}
 80033b4:	bf00      	nop
 80033b6:	e7fe      	b.n	80033b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	3318      	adds	r3, #24
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fe fea3 	bl	8002108 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033c2:	4b1e      	ldr	r3, [pc, #120]	; (800343c <xTaskRemoveFromEventList+0xb0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d11d      	bne.n	8003406 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	3304      	adds	r3, #4
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe fe9a 	bl	8002108 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d8:	4b19      	ldr	r3, [pc, #100]	; (8003440 <xTaskRemoveFromEventList+0xb4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d903      	bls.n	80033e8 <xTaskRemoveFromEventList+0x5c>
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	4a16      	ldr	r2, [pc, #88]	; (8003440 <xTaskRemoveFromEventList+0xb4>)
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4a13      	ldr	r2, [pc, #76]	; (8003444 <xTaskRemoveFromEventList+0xb8>)
 80033f6:	441a      	add	r2, r3
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	3304      	adds	r3, #4
 80033fc:	4619      	mov	r1, r3
 80033fe:	4610      	mov	r0, r2
 8003400:	f7fe fe25 	bl	800204e <vListInsertEnd>
 8003404:	e005      	b.n	8003412 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	3318      	adds	r3, #24
 800340a:	4619      	mov	r1, r3
 800340c:	480e      	ldr	r0, [pc, #56]	; (8003448 <xTaskRemoveFromEventList+0xbc>)
 800340e:	f7fe fe1e 	bl	800204e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003416:	4b0d      	ldr	r3, [pc, #52]	; (800344c <xTaskRemoveFromEventList+0xc0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	429a      	cmp	r2, r3
 800341e:	d905      	bls.n	800342c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003420:	2301      	movs	r3, #1
 8003422:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003424:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <xTaskRemoveFromEventList+0xc4>)
 8003426:	2201      	movs	r2, #1
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	e001      	b.n	8003430 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003430:	697b      	ldr	r3, [r7, #20]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000bec 	.word	0x20000bec
 8003440:	20000bcc 	.word	0x20000bcc
 8003444:	200006f4 	.word	0x200006f4
 8003448:	20000b84 	.word	0x20000b84
 800344c:	200006f0 	.word	0x200006f0
 8003450:	20000bd8 	.word	0x20000bd8

08003454 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800345c:	4b06      	ldr	r3, [pc, #24]	; (8003478 <vTaskInternalSetTimeOutState+0x24>)
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003464:	4b05      	ldr	r3, [pc, #20]	; (800347c <vTaskInternalSetTimeOutState+0x28>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	605a      	str	r2, [r3, #4]
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	20000bdc 	.word	0x20000bdc
 800347c:	20000bc8 	.word	0x20000bc8

08003480 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10a      	bne.n	80034a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	613b      	str	r3, [r7, #16]
}
 80034a2:	bf00      	nop
 80034a4:	e7fe      	b.n	80034a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10a      	bne.n	80034c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80034ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b0:	f383 8811 	msr	BASEPRI, r3
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	60fb      	str	r3, [r7, #12]
}
 80034be:	bf00      	nop
 80034c0:	e7fe      	b.n	80034c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80034c2:	f000 fe7f 	bl	80041c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80034c6:	4b1d      	ldr	r3, [pc, #116]	; (800353c <xTaskCheckForTimeOut+0xbc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034de:	d102      	bne.n	80034e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80034e0:	2300      	movs	r3, #0
 80034e2:	61fb      	str	r3, [r7, #28]
 80034e4:	e023      	b.n	800352e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4b15      	ldr	r3, [pc, #84]	; (8003540 <xTaskCheckForTimeOut+0xc0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d007      	beq.n	8003502 <xTaskCheckForTimeOut+0x82>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d302      	bcc.n	8003502 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80034fc:	2301      	movs	r3, #1
 80034fe:	61fb      	str	r3, [r7, #28]
 8003500:	e015      	b.n	800352e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	429a      	cmp	r2, r3
 800350a:	d20b      	bcs.n	8003524 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	1ad2      	subs	r2, r2, r3
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff ff9b 	bl	8003454 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
 8003522:	e004      	b.n	800352e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800352a:	2301      	movs	r3, #1
 800352c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800352e:	f000 fe79 	bl	8004224 <vPortExitCritical>

	return xReturn;
 8003532:	69fb      	ldr	r3, [r7, #28]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3720      	adds	r7, #32
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	20000bc8 	.word	0x20000bc8
 8003540:	20000bdc 	.word	0x20000bdc

08003544 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003548:	4b03      	ldr	r3, [pc, #12]	; (8003558 <vTaskMissedYield+0x14>)
 800354a:	2201      	movs	r2, #1
 800354c:	601a      	str	r2, [r3, #0]
}
 800354e:	bf00      	nop
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	20000bd8 	.word	0x20000bd8

0800355c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003564:	f000 f852 	bl	800360c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003568:	4b06      	ldr	r3, [pc, #24]	; (8003584 <prvIdleTask+0x28>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d9f9      	bls.n	8003564 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003570:	4b05      	ldr	r3, [pc, #20]	; (8003588 <prvIdleTask+0x2c>)
 8003572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	f3bf 8f4f 	dsb	sy
 800357c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003580:	e7f0      	b.n	8003564 <prvIdleTask+0x8>
 8003582:	bf00      	nop
 8003584:	200006f4 	.word	0x200006f4
 8003588:	e000ed04 	.word	0xe000ed04

0800358c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003592:	2300      	movs	r3, #0
 8003594:	607b      	str	r3, [r7, #4]
 8003596:	e00c      	b.n	80035b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4a12      	ldr	r2, [pc, #72]	; (80035ec <prvInitialiseTaskLists+0x60>)
 80035a4:	4413      	add	r3, r2
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fe fd24 	bl	8001ff4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3301      	adds	r3, #1
 80035b0:	607b      	str	r3, [r7, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b37      	cmp	r3, #55	; 0x37
 80035b6:	d9ef      	bls.n	8003598 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80035b8:	480d      	ldr	r0, [pc, #52]	; (80035f0 <prvInitialiseTaskLists+0x64>)
 80035ba:	f7fe fd1b 	bl	8001ff4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80035be:	480d      	ldr	r0, [pc, #52]	; (80035f4 <prvInitialiseTaskLists+0x68>)
 80035c0:	f7fe fd18 	bl	8001ff4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80035c4:	480c      	ldr	r0, [pc, #48]	; (80035f8 <prvInitialiseTaskLists+0x6c>)
 80035c6:	f7fe fd15 	bl	8001ff4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80035ca:	480c      	ldr	r0, [pc, #48]	; (80035fc <prvInitialiseTaskLists+0x70>)
 80035cc:	f7fe fd12 	bl	8001ff4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80035d0:	480b      	ldr	r0, [pc, #44]	; (8003600 <prvInitialiseTaskLists+0x74>)
 80035d2:	f7fe fd0f 	bl	8001ff4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80035d6:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <prvInitialiseTaskLists+0x78>)
 80035d8:	4a05      	ldr	r2, [pc, #20]	; (80035f0 <prvInitialiseTaskLists+0x64>)
 80035da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80035dc:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <prvInitialiseTaskLists+0x7c>)
 80035de:	4a05      	ldr	r2, [pc, #20]	; (80035f4 <prvInitialiseTaskLists+0x68>)
 80035e0:	601a      	str	r2, [r3, #0]
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	200006f4 	.word	0x200006f4
 80035f0:	20000b54 	.word	0x20000b54
 80035f4:	20000b68 	.word	0x20000b68
 80035f8:	20000b84 	.word	0x20000b84
 80035fc:	20000b98 	.word	0x20000b98
 8003600:	20000bb0 	.word	0x20000bb0
 8003604:	20000b7c 	.word	0x20000b7c
 8003608:	20000b80 	.word	0x20000b80

0800360c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003612:	e019      	b.n	8003648 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003614:	f000 fdd6 	bl	80041c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003618:	4b10      	ldr	r3, [pc, #64]	; (800365c <prvCheckTasksWaitingTermination+0x50>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3304      	adds	r3, #4
 8003624:	4618      	mov	r0, r3
 8003626:	f7fe fd6f 	bl	8002108 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800362a:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <prvCheckTasksWaitingTermination+0x54>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3b01      	subs	r3, #1
 8003630:	4a0b      	ldr	r2, [pc, #44]	; (8003660 <prvCheckTasksWaitingTermination+0x54>)
 8003632:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003634:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <prvCheckTasksWaitingTermination+0x58>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3b01      	subs	r3, #1
 800363a:	4a0a      	ldr	r2, [pc, #40]	; (8003664 <prvCheckTasksWaitingTermination+0x58>)
 800363c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800363e:	f000 fdf1 	bl	8004224 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f810 	bl	8003668 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003648:	4b06      	ldr	r3, [pc, #24]	; (8003664 <prvCheckTasksWaitingTermination+0x58>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e1      	bne.n	8003614 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	20000b98 	.word	0x20000b98
 8003660:	20000bc4 	.word	0x20000bc4
 8003664:	20000bac 	.word	0x20000bac

08003668 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003676:	2b00      	cmp	r3, #0
 8003678:	d108      	bne.n	800368c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	4618      	mov	r0, r3
 8003680:	f000 ff8e 	bl	80045a0 <vPortFree>
				vPortFree( pxTCB );
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 ff8b 	bl	80045a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800368a:	e018      	b.n	80036be <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003692:	2b01      	cmp	r3, #1
 8003694:	d103      	bne.n	800369e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 ff82 	bl	80045a0 <vPortFree>
	}
 800369c:	e00f      	b.n	80036be <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d00a      	beq.n	80036be <prvDeleteTCB+0x56>
	__asm volatile
 80036a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ac:	f383 8811 	msr	BASEPRI, r3
 80036b0:	f3bf 8f6f 	isb	sy
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	60fb      	str	r3, [r7, #12]
}
 80036ba:	bf00      	nop
 80036bc:	e7fe      	b.n	80036bc <prvDeleteTCB+0x54>
	}
 80036be:	bf00      	nop
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036ce:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <prvResetNextTaskUnblockTime+0x38>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d104      	bne.n	80036e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80036d8:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <prvResetNextTaskUnblockTime+0x3c>)
 80036da:	f04f 32ff 	mov.w	r2, #4294967295
 80036de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80036e0:	e008      	b.n	80036f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036e2:	4b07      	ldr	r3, [pc, #28]	; (8003700 <prvResetNextTaskUnblockTime+0x38>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	4a04      	ldr	r2, [pc, #16]	; (8003704 <prvResetNextTaskUnblockTime+0x3c>)
 80036f2:	6013      	str	r3, [r2, #0]
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	20000b7c 	.word	0x20000b7c
 8003704:	20000be4 	.word	0x20000be4

08003708 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800370e:	4b0b      	ldr	r3, [pc, #44]	; (800373c <xTaskGetSchedulerState+0x34>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d102      	bne.n	800371c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003716:	2301      	movs	r3, #1
 8003718:	607b      	str	r3, [r7, #4]
 800371a:	e008      	b.n	800372e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800371c:	4b08      	ldr	r3, [pc, #32]	; (8003740 <xTaskGetSchedulerState+0x38>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d102      	bne.n	800372a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003724:	2302      	movs	r3, #2
 8003726:	607b      	str	r3, [r7, #4]
 8003728:	e001      	b.n	800372e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800372a:	2300      	movs	r3, #0
 800372c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800372e:	687b      	ldr	r3, [r7, #4]
	}
 8003730:	4618      	mov	r0, r3
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	20000bd0 	.word	0x20000bd0
 8003740:	20000bec 	.word	0x20000bec

08003744 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003750:	2300      	movs	r3, #0
 8003752:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d056      	beq.n	8003808 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800375a:	4b2e      	ldr	r3, [pc, #184]	; (8003814 <xTaskPriorityDisinherit+0xd0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	429a      	cmp	r2, r3
 8003762:	d00a      	beq.n	800377a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003768:	f383 8811 	msr	BASEPRI, r3
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	60fb      	str	r3, [r7, #12]
}
 8003776:	bf00      	nop
 8003778:	e7fe      	b.n	8003778 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10a      	bne.n	8003798 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003786:	f383 8811 	msr	BASEPRI, r3
 800378a:	f3bf 8f6f 	isb	sy
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	60bb      	str	r3, [r7, #8]
}
 8003794:	bf00      	nop
 8003796:	e7fe      	b.n	8003796 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379c:	1e5a      	subs	r2, r3, #1
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d02c      	beq.n	8003808 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d128      	bne.n	8003808 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	3304      	adds	r3, #4
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fe fca4 	bl	8002108 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d8:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <xTaskPriorityDisinherit+0xd4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d903      	bls.n	80037e8 <xTaskPriorityDisinherit+0xa4>
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	4a0c      	ldr	r2, [pc, #48]	; (8003818 <xTaskPriorityDisinherit+0xd4>)
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4a09      	ldr	r2, [pc, #36]	; (800381c <xTaskPriorityDisinherit+0xd8>)
 80037f6:	441a      	add	r2, r3
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	3304      	adds	r3, #4
 80037fc:	4619      	mov	r1, r3
 80037fe:	4610      	mov	r0, r2
 8003800:	f7fe fc25 	bl	800204e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003804:	2301      	movs	r3, #1
 8003806:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003808:	697b      	ldr	r3, [r7, #20]
	}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	200006f0 	.word	0x200006f0
 8003818:	20000bcc 	.word	0x20000bcc
 800381c:	200006f4 	.word	0x200006f4

08003820 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800382a:	4b21      	ldr	r3, [pc, #132]	; (80038b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003830:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3304      	adds	r3, #4
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe fc66 	bl	8002108 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003842:	d10a      	bne.n	800385a <prvAddCurrentTaskToDelayedList+0x3a>
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d007      	beq.n	800385a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800384a:	4b1a      	ldr	r3, [pc, #104]	; (80038b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	3304      	adds	r3, #4
 8003850:	4619      	mov	r1, r3
 8003852:	4819      	ldr	r0, [pc, #100]	; (80038b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003854:	f7fe fbfb 	bl	800204e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003858:	e026      	b.n	80038a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4413      	add	r3, r2
 8003860:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003862:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	429a      	cmp	r2, r3
 8003870:	d209      	bcs.n	8003886 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003872:	4b12      	ldr	r3, [pc, #72]	; (80038bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3304      	adds	r3, #4
 800387c:	4619      	mov	r1, r3
 800387e:	4610      	mov	r0, r2
 8003880:	f7fe fc09 	bl	8002096 <vListInsert>
}
 8003884:	e010      	b.n	80038a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003886:	4b0e      	ldr	r3, [pc, #56]	; (80038c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3304      	adds	r3, #4
 8003890:	4619      	mov	r1, r3
 8003892:	4610      	mov	r0, r2
 8003894:	f7fe fbff 	bl	8002096 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003898:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d202      	bcs.n	80038a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80038a2:	4a08      	ldr	r2, [pc, #32]	; (80038c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	6013      	str	r3, [r2, #0]
}
 80038a8:	bf00      	nop
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20000bc8 	.word	0x20000bc8
 80038b4:	200006f0 	.word	0x200006f0
 80038b8:	20000bb0 	.word	0x20000bb0
 80038bc:	20000b80 	.word	0x20000b80
 80038c0:	20000b7c 	.word	0x20000b7c
 80038c4:	20000be4 	.word	0x20000be4

080038c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08a      	sub	sp, #40	; 0x28
 80038cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80038d2:	f000 fb07 	bl	8003ee4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80038d6:	4b1c      	ldr	r3, [pc, #112]	; (8003948 <xTimerCreateTimerTask+0x80>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d021      	beq.n	8003922 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80038de:	2300      	movs	r3, #0
 80038e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80038e6:	1d3a      	adds	r2, r7, #4
 80038e8:	f107 0108 	add.w	r1, r7, #8
 80038ec:	f107 030c 	add.w	r3, r7, #12
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fe fb65 	bl	8001fc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	9202      	str	r2, [sp, #8]
 80038fe:	9301      	str	r3, [sp, #4]
 8003900:	2302      	movs	r3, #2
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	2300      	movs	r3, #0
 8003906:	460a      	mov	r2, r1
 8003908:	4910      	ldr	r1, [pc, #64]	; (800394c <xTimerCreateTimerTask+0x84>)
 800390a:	4811      	ldr	r0, [pc, #68]	; (8003950 <xTimerCreateTimerTask+0x88>)
 800390c:	f7ff f912 	bl	8002b34 <xTaskCreateStatic>
 8003910:	4603      	mov	r3, r0
 8003912:	4a10      	ldr	r2, [pc, #64]	; (8003954 <xTimerCreateTimerTask+0x8c>)
 8003914:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003916:	4b0f      	ldr	r3, [pc, #60]	; (8003954 <xTimerCreateTimerTask+0x8c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800391e:	2301      	movs	r3, #1
 8003920:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10a      	bne.n	800393e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392c:	f383 8811 	msr	BASEPRI, r3
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	613b      	str	r3, [r7, #16]
}
 800393a:	bf00      	nop
 800393c:	e7fe      	b.n	800393c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800393e:	697b      	ldr	r3, [r7, #20]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	20000c20 	.word	0x20000c20
 800394c:	080052a0 	.word	0x080052a0
 8003950:	08003a8d 	.word	0x08003a8d
 8003954:	20000c24 	.word	0x20000c24

08003958 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08a      	sub	sp, #40	; 0x28
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003966:	2300      	movs	r3, #0
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10a      	bne.n	8003986 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	623b      	str	r3, [r7, #32]
}
 8003982:	bf00      	nop
 8003984:	e7fe      	b.n	8003984 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003986:	4b1a      	ldr	r3, [pc, #104]	; (80039f0 <xTimerGenericCommand+0x98>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d02a      	beq.n	80039e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b05      	cmp	r3, #5
 800399e:	dc18      	bgt.n	80039d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80039a0:	f7ff feb2 	bl	8003708 <xTaskGetSchedulerState>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d109      	bne.n	80039be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80039aa:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <xTimerGenericCommand+0x98>)
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	f107 0110 	add.w	r1, r7, #16
 80039b2:	2300      	movs	r3, #0
 80039b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039b6:	f7fe fcd5 	bl	8002364 <xQueueGenericSend>
 80039ba:	6278      	str	r0, [r7, #36]	; 0x24
 80039bc:	e012      	b.n	80039e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80039be:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <xTimerGenericCommand+0x98>)
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	f107 0110 	add.w	r1, r7, #16
 80039c6:	2300      	movs	r3, #0
 80039c8:	2200      	movs	r2, #0
 80039ca:	f7fe fccb 	bl	8002364 <xQueueGenericSend>
 80039ce:	6278      	str	r0, [r7, #36]	; 0x24
 80039d0:	e008      	b.n	80039e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80039d2:	4b07      	ldr	r3, [pc, #28]	; (80039f0 <xTimerGenericCommand+0x98>)
 80039d4:	6818      	ldr	r0, [r3, #0]
 80039d6:	f107 0110 	add.w	r1, r7, #16
 80039da:	2300      	movs	r3, #0
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	f7fe fdbf 	bl	8002560 <xQueueGenericSendFromISR>
 80039e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3728      	adds	r7, #40	; 0x28
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000c20 	.word	0x20000c20

080039f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af02      	add	r7, sp, #8
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039fe:	4b22      	ldr	r3, [pc, #136]	; (8003a88 <prvProcessExpiredTimer+0x94>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fe fb7b 	bl	8002108 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d022      	beq.n	8003a66 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	699a      	ldr	r2, [r3, #24]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	18d1      	adds	r1, r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	6978      	ldr	r0, [r7, #20]
 8003a2e:	f000 f8d1 	bl	8003bd4 <prvInsertTimerInActiveList>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d01f      	beq.n	8003a78 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003a38:	2300      	movs	r3, #0
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	2100      	movs	r1, #0
 8003a42:	6978      	ldr	r0, [r7, #20]
 8003a44:	f7ff ff88 	bl	8003958 <xTimerGenericCommand>
 8003a48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d113      	bne.n	8003a78 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	60fb      	str	r3, [r7, #12]
}
 8003a62:	bf00      	nop
 8003a64:	e7fe      	b.n	8003a64 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a6c:	f023 0301 	bic.w	r3, r3, #1
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	6978      	ldr	r0, [r7, #20]
 8003a7e:	4798      	blx	r3
}
 8003a80:	bf00      	nop
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	20000c18 	.word	0x20000c18

08003a8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003a94:	f107 0308 	add.w	r3, r7, #8
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 f857 	bl	8003b4c <prvGetNextExpireTime>
 8003a9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 f803 	bl	8003ab0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003aaa:	f000 f8d5 	bl	8003c58 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003aae:	e7f1      	b.n	8003a94 <prvTimerTask+0x8>

08003ab0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003aba:	f7ff fa43 	bl	8002f44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003abe:	f107 0308 	add.w	r3, r7, #8
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 f866 	bl	8003b94 <prvSampleTimeNow>
 8003ac8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d130      	bne.n	8003b32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10a      	bne.n	8003aec <prvProcessTimerOrBlockTask+0x3c>
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d806      	bhi.n	8003aec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003ade:	f7ff fa3f 	bl	8002f60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003ae2:	68f9      	ldr	r1, [r7, #12]
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff ff85 	bl	80039f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003aea:	e024      	b.n	8003b36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d008      	beq.n	8003b04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003af2:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <prvProcessTimerOrBlockTask+0x90>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <prvProcessTimerOrBlockTask+0x50>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <prvProcessTimerOrBlockTask+0x52>
 8003b00:	2300      	movs	r3, #0
 8003b02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b04:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <prvProcessTimerOrBlockTask+0x94>)
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	4619      	mov	r1, r3
 8003b12:	f7fe ffdb 	bl	8002acc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003b16:	f7ff fa23 	bl	8002f60 <xTaskResumeAll>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10a      	bne.n	8003b36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003b20:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <prvProcessTimerOrBlockTask+0x98>)
 8003b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	f3bf 8f4f 	dsb	sy
 8003b2c:	f3bf 8f6f 	isb	sy
}
 8003b30:	e001      	b.n	8003b36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003b32:	f7ff fa15 	bl	8002f60 <xTaskResumeAll>
}
 8003b36:	bf00      	nop
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000c1c 	.word	0x20000c1c
 8003b44:	20000c20 	.word	0x20000c20
 8003b48:	e000ed04 	.word	0xe000ed04

08003b4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003b54:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <prvGetNextExpireTime+0x44>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <prvGetNextExpireTime+0x16>
 8003b5e:	2201      	movs	r2, #1
 8003b60:	e000      	b.n	8003b64 <prvGetNextExpireTime+0x18>
 8003b62:	2200      	movs	r2, #0
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d105      	bne.n	8003b7c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b70:	4b07      	ldr	r3, [pc, #28]	; (8003b90 <prvGetNextExpireTime+0x44>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	e001      	b.n	8003b80 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003b80:	68fb      	ldr	r3, [r7, #12]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	20000c18 	.word	0x20000c18

08003b94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003b9c:	f7ff fa7e 	bl	800309c <xTaskGetTickCount>
 8003ba0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003ba2:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <prvSampleTimeNow+0x3c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d205      	bcs.n	8003bb8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003bac:	f000 f936 	bl	8003e1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	e002      	b.n	8003bbe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003bbe:	4a04      	ldr	r2, [pc, #16]	; (8003bd0 <prvSampleTimeNow+0x3c>)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000c28 	.word	0x20000c28

08003bd4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d812      	bhi.n	8003c20 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	1ad2      	subs	r2, r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d302      	bcc.n	8003c0e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	e01b      	b.n	8003c46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c0e:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <prvInsertTimerInActiveList+0x7c>)
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	3304      	adds	r3, #4
 8003c16:	4619      	mov	r1, r3
 8003c18:	4610      	mov	r0, r2
 8003c1a:	f7fe fa3c 	bl	8002096 <vListInsert>
 8003c1e:	e012      	b.n	8003c46 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d206      	bcs.n	8003c36 <prvInsertTimerInActiveList+0x62>
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d302      	bcc.n	8003c36 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003c30:	2301      	movs	r3, #1
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	e007      	b.n	8003c46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c36:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <prvInsertTimerInActiveList+0x80>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4610      	mov	r0, r2
 8003c42:	f7fe fa28 	bl	8002096 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003c46:	697b      	ldr	r3, [r7, #20]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	20000c1c 	.word	0x20000c1c
 8003c54:	20000c18 	.word	0x20000c18

08003c58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08e      	sub	sp, #56	; 0x38
 8003c5c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c5e:	e0ca      	b.n	8003df6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	da18      	bge.n	8003c98 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003c66:	1d3b      	adds	r3, r7, #4
 8003c68:	3304      	adds	r3, #4
 8003c6a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10a      	bne.n	8003c88 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c76:	f383 8811 	msr	BASEPRI, r3
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	61fb      	str	r3, [r7, #28]
}
 8003c84:	bf00      	nop
 8003c86:	e7fe      	b.n	8003c86 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c8e:	6850      	ldr	r0, [r2, #4]
 8003c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c92:	6892      	ldr	r2, [r2, #8]
 8003c94:	4611      	mov	r1, r2
 8003c96:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f2c0 80aa 	blt.w	8003df4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d004      	beq.n	8003cb6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	3304      	adds	r3, #4
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fe fa29 	bl	8002108 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cb6:	463b      	mov	r3, r7
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff ff6b 	bl	8003b94 <prvSampleTimeNow>
 8003cbe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b09      	cmp	r3, #9
 8003cc4:	f200 8097 	bhi.w	8003df6 <prvProcessReceivedCommands+0x19e>
 8003cc8:	a201      	add	r2, pc, #4	; (adr r2, 8003cd0 <prvProcessReceivedCommands+0x78>)
 8003cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cce:	bf00      	nop
 8003cd0:	08003cf9 	.word	0x08003cf9
 8003cd4:	08003cf9 	.word	0x08003cf9
 8003cd8:	08003cf9 	.word	0x08003cf9
 8003cdc:	08003d6d 	.word	0x08003d6d
 8003ce0:	08003d81 	.word	0x08003d81
 8003ce4:	08003dcb 	.word	0x08003dcb
 8003ce8:	08003cf9 	.word	0x08003cf9
 8003cec:	08003cf9 	.word	0x08003cf9
 8003cf0:	08003d6d 	.word	0x08003d6d
 8003cf4:	08003d81 	.word	0x08003d81
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	18d1      	adds	r1, r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d18:	f7ff ff5c 	bl	8003bd4 <prvInsertTimerInActiveList>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d069      	beq.n	8003df6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d28:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d05e      	beq.n	8003df6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	441a      	add	r2, r3
 8003d40:	2300      	movs	r3, #0
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	2300      	movs	r3, #0
 8003d46:	2100      	movs	r1, #0
 8003d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d4a:	f7ff fe05 	bl	8003958 <xTimerGenericCommand>
 8003d4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d14f      	bne.n	8003df6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	61bb      	str	r3, [r7, #24]
}
 8003d68:	bf00      	nop
 8003d6a:	e7fe      	b.n	8003d6a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d72:	f023 0301 	bic.w	r3, r3, #1
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003d7e:	e03a      	b.n	8003df6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d96:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10a      	bne.n	8003db6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	617b      	str	r3, [r7, #20]
}
 8003db2:	bf00      	nop
 8003db4:	e7fe      	b.n	8003db4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db8:	699a      	ldr	r2, [r3, #24]
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	18d1      	adds	r1, r2, r3
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dc4:	f7ff ff06 	bl	8003bd4 <prvInsertTimerInActiveList>
					break;
 8003dc8:	e015      	b.n	8003df6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d103      	bne.n	8003de0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003dd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dda:	f000 fbe1 	bl	80045a0 <vPortFree>
 8003dde:	e00a      	b.n	8003df6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003de6:	f023 0301 	bic.w	r3, r3, #1
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003df2:	e000      	b.n	8003df6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003df4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003df6:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <prvProcessReceivedCommands+0x1c0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	1d39      	adds	r1, r7, #4
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fe fc4a 	bl	8002698 <xQueueReceive>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f47f af2a 	bne.w	8003c60 <prvProcessReceivedCommands+0x8>
	}
}
 8003e0c:	bf00      	nop
 8003e0e:	bf00      	nop
 8003e10:	3730      	adds	r7, #48	; 0x30
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	20000c20 	.word	0x20000c20

08003e1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e22:	e048      	b.n	8003eb6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e24:	4b2d      	ldr	r3, [pc, #180]	; (8003edc <prvSwitchTimerLists+0xc0>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e2e:	4b2b      	ldr	r3, [pc, #172]	; (8003edc <prvSwitchTimerLists+0xc0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fe f963 	bl	8002108 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d02e      	beq.n	8003eb6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4413      	add	r3, r2
 8003e60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d90e      	bls.n	8003e88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e76:	4b19      	ldr	r3, [pc, #100]	; (8003edc <prvSwitchTimerLists+0xc0>)
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4610      	mov	r0, r2
 8003e82:	f7fe f908 	bl	8002096 <vListInsert>
 8003e86:	e016      	b.n	8003eb6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e88:	2300      	movs	r3, #0
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	2100      	movs	r1, #0
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f7ff fd60 	bl	8003958 <xTimerGenericCommand>
 8003e98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10a      	bne.n	8003eb6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	603b      	str	r3, [r7, #0]
}
 8003eb2:	bf00      	nop
 8003eb4:	e7fe      	b.n	8003eb4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003eb6:	4b09      	ldr	r3, [pc, #36]	; (8003edc <prvSwitchTimerLists+0xc0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1b1      	bne.n	8003e24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003ec0:	4b06      	ldr	r3, [pc, #24]	; (8003edc <prvSwitchTimerLists+0xc0>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003ec6:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <prvSwitchTimerLists+0xc4>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a04      	ldr	r2, [pc, #16]	; (8003edc <prvSwitchTimerLists+0xc0>)
 8003ecc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003ece:	4a04      	ldr	r2, [pc, #16]	; (8003ee0 <prvSwitchTimerLists+0xc4>)
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	6013      	str	r3, [r2, #0]
}
 8003ed4:	bf00      	nop
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20000c18 	.word	0x20000c18
 8003ee0:	20000c1c 	.word	0x20000c1c

08003ee4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003eea:	f000 f96b 	bl	80041c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003eee:	4b15      	ldr	r3, [pc, #84]	; (8003f44 <prvCheckForValidListAndQueue+0x60>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d120      	bne.n	8003f38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003ef6:	4814      	ldr	r0, [pc, #80]	; (8003f48 <prvCheckForValidListAndQueue+0x64>)
 8003ef8:	f7fe f87c 	bl	8001ff4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003efc:	4813      	ldr	r0, [pc, #76]	; (8003f4c <prvCheckForValidListAndQueue+0x68>)
 8003efe:	f7fe f879 	bl	8001ff4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003f02:	4b13      	ldr	r3, [pc, #76]	; (8003f50 <prvCheckForValidListAndQueue+0x6c>)
 8003f04:	4a10      	ldr	r2, [pc, #64]	; (8003f48 <prvCheckForValidListAndQueue+0x64>)
 8003f06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003f08:	4b12      	ldr	r3, [pc, #72]	; (8003f54 <prvCheckForValidListAndQueue+0x70>)
 8003f0a:	4a10      	ldr	r2, [pc, #64]	; (8003f4c <prvCheckForValidListAndQueue+0x68>)
 8003f0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003f0e:	2300      	movs	r3, #0
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	4b11      	ldr	r3, [pc, #68]	; (8003f58 <prvCheckForValidListAndQueue+0x74>)
 8003f14:	4a11      	ldr	r2, [pc, #68]	; (8003f5c <prvCheckForValidListAndQueue+0x78>)
 8003f16:	2110      	movs	r1, #16
 8003f18:	200a      	movs	r0, #10
 8003f1a:	f7fe f987 	bl	800222c <xQueueGenericCreateStatic>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4a08      	ldr	r2, [pc, #32]	; (8003f44 <prvCheckForValidListAndQueue+0x60>)
 8003f22:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003f24:	4b07      	ldr	r3, [pc, #28]	; (8003f44 <prvCheckForValidListAndQueue+0x60>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003f2c:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <prvCheckForValidListAndQueue+0x60>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	490b      	ldr	r1, [pc, #44]	; (8003f60 <prvCheckForValidListAndQueue+0x7c>)
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fe fda0 	bl	8002a78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f38:	f000 f974 	bl	8004224 <vPortExitCritical>
}
 8003f3c:	bf00      	nop
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	20000c20 	.word	0x20000c20
 8003f48:	20000bf0 	.word	0x20000bf0
 8003f4c:	20000c04 	.word	0x20000c04
 8003f50:	20000c18 	.word	0x20000c18
 8003f54:	20000c1c 	.word	0x20000c1c
 8003f58:	20000ccc 	.word	0x20000ccc
 8003f5c:	20000c2c 	.word	0x20000c2c
 8003f60:	080052a8 	.word	0x080052a8

08003f64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	3b04      	subs	r3, #4
 8003f74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	3b04      	subs	r3, #4
 8003f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f023 0201 	bic.w	r2, r3, #1
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	3b04      	subs	r3, #4
 8003f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003f94:	4a0c      	ldr	r2, [pc, #48]	; (8003fc8 <pxPortInitialiseStack+0x64>)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	3b14      	subs	r3, #20
 8003f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	3b04      	subs	r3, #4
 8003faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f06f 0202 	mvn.w	r2, #2
 8003fb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3b20      	subs	r3, #32
 8003fb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003fba:	68fb      	ldr	r3, [r7, #12]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	08003fcd 	.word	0x08003fcd

08003fcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003fd6:	4b12      	ldr	r3, [pc, #72]	; (8004020 <prvTaskExitError+0x54>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fde:	d00a      	beq.n	8003ff6 <prvTaskExitError+0x2a>
	__asm volatile
 8003fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	60fb      	str	r3, [r7, #12]
}
 8003ff2:	bf00      	nop
 8003ff4:	e7fe      	b.n	8003ff4 <prvTaskExitError+0x28>
	__asm volatile
 8003ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffa:	f383 8811 	msr	BASEPRI, r3
 8003ffe:	f3bf 8f6f 	isb	sy
 8004002:	f3bf 8f4f 	dsb	sy
 8004006:	60bb      	str	r3, [r7, #8]
}
 8004008:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800400a:	bf00      	nop
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0fc      	beq.n	800400c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004012:	bf00      	nop
 8004014:	bf00      	nop
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	20000008 	.word	0x20000008
	...

08004030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004030:	4b07      	ldr	r3, [pc, #28]	; (8004050 <pxCurrentTCBConst2>)
 8004032:	6819      	ldr	r1, [r3, #0]
 8004034:	6808      	ldr	r0, [r1, #0]
 8004036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800403a:	f380 8809 	msr	PSP, r0
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f04f 0000 	mov.w	r0, #0
 8004046:	f380 8811 	msr	BASEPRI, r0
 800404a:	4770      	bx	lr
 800404c:	f3af 8000 	nop.w

08004050 <pxCurrentTCBConst2>:
 8004050:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004054:	bf00      	nop
 8004056:	bf00      	nop

08004058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004058:	4808      	ldr	r0, [pc, #32]	; (800407c <prvPortStartFirstTask+0x24>)
 800405a:	6800      	ldr	r0, [r0, #0]
 800405c:	6800      	ldr	r0, [r0, #0]
 800405e:	f380 8808 	msr	MSP, r0
 8004062:	f04f 0000 	mov.w	r0, #0
 8004066:	f380 8814 	msr	CONTROL, r0
 800406a:	b662      	cpsie	i
 800406c:	b661      	cpsie	f
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	df00      	svc	0
 8004078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800407a:	bf00      	nop
 800407c:	e000ed08 	.word	0xe000ed08

08004080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004086:	4b46      	ldr	r3, [pc, #280]	; (80041a0 <xPortStartScheduler+0x120>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a46      	ldr	r2, [pc, #280]	; (80041a4 <xPortStartScheduler+0x124>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d10a      	bne.n	80040a6 <xPortStartScheduler+0x26>
	__asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	613b      	str	r3, [r7, #16]
}
 80040a2:	bf00      	nop
 80040a4:	e7fe      	b.n	80040a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80040a6:	4b3e      	ldr	r3, [pc, #248]	; (80041a0 <xPortStartScheduler+0x120>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a3f      	ldr	r2, [pc, #252]	; (80041a8 <xPortStartScheduler+0x128>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d10a      	bne.n	80040c6 <xPortStartScheduler+0x46>
	__asm volatile
 80040b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	60fb      	str	r3, [r7, #12]
}
 80040c2:	bf00      	nop
 80040c4:	e7fe      	b.n	80040c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80040c6:	4b39      	ldr	r3, [pc, #228]	; (80041ac <xPortStartScheduler+0x12c>)
 80040c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	22ff      	movs	r2, #255	; 0xff
 80040d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	4b31      	ldr	r3, [pc, #196]	; (80041b0 <xPortStartScheduler+0x130>)
 80040ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80040ee:	4b31      	ldr	r3, [pc, #196]	; (80041b4 <xPortStartScheduler+0x134>)
 80040f0:	2207      	movs	r2, #7
 80040f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040f4:	e009      	b.n	800410a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80040f6:	4b2f      	ldr	r3, [pc, #188]	; (80041b4 <xPortStartScheduler+0x134>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	4a2d      	ldr	r2, [pc, #180]	; (80041b4 <xPortStartScheduler+0x134>)
 80040fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	b2db      	uxtb	r3, r3
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	b2db      	uxtb	r3, r3
 8004108:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800410a:	78fb      	ldrb	r3, [r7, #3]
 800410c:	b2db      	uxtb	r3, r3
 800410e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004112:	2b80      	cmp	r3, #128	; 0x80
 8004114:	d0ef      	beq.n	80040f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004116:	4b27      	ldr	r3, [pc, #156]	; (80041b4 <xPortStartScheduler+0x134>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f1c3 0307 	rsb	r3, r3, #7
 800411e:	2b04      	cmp	r3, #4
 8004120:	d00a      	beq.n	8004138 <xPortStartScheduler+0xb8>
	__asm volatile
 8004122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	60bb      	str	r3, [r7, #8]
}
 8004134:	bf00      	nop
 8004136:	e7fe      	b.n	8004136 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004138:	4b1e      	ldr	r3, [pc, #120]	; (80041b4 <xPortStartScheduler+0x134>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	021b      	lsls	r3, r3, #8
 800413e:	4a1d      	ldr	r2, [pc, #116]	; (80041b4 <xPortStartScheduler+0x134>)
 8004140:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004142:	4b1c      	ldr	r3, [pc, #112]	; (80041b4 <xPortStartScheduler+0x134>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800414a:	4a1a      	ldr	r2, [pc, #104]	; (80041b4 <xPortStartScheduler+0x134>)
 800414c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	b2da      	uxtb	r2, r3
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004156:	4b18      	ldr	r3, [pc, #96]	; (80041b8 <xPortStartScheduler+0x138>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a17      	ldr	r2, [pc, #92]	; (80041b8 <xPortStartScheduler+0x138>)
 800415c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004160:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004162:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <xPortStartScheduler+0x138>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a14      	ldr	r2, [pc, #80]	; (80041b8 <xPortStartScheduler+0x138>)
 8004168:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800416c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800416e:	f000 f8dd 	bl	800432c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004172:	4b12      	ldr	r3, [pc, #72]	; (80041bc <xPortStartScheduler+0x13c>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004178:	f000 f8fc 	bl	8004374 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800417c:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <xPortStartScheduler+0x140>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a0f      	ldr	r2, [pc, #60]	; (80041c0 <xPortStartScheduler+0x140>)
 8004182:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004186:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004188:	f7ff ff66 	bl	8004058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800418c:	f7ff f850 	bl	8003230 <vTaskSwitchContext>
	prvTaskExitError();
 8004190:	f7ff ff1c 	bl	8003fcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	e000ed00 	.word	0xe000ed00
 80041a4:	410fc271 	.word	0x410fc271
 80041a8:	410fc270 	.word	0x410fc270
 80041ac:	e000e400 	.word	0xe000e400
 80041b0:	20000d1c 	.word	0x20000d1c
 80041b4:	20000d20 	.word	0x20000d20
 80041b8:	e000ed20 	.word	0xe000ed20
 80041bc:	20000008 	.word	0x20000008
 80041c0:	e000ef34 	.word	0xe000ef34

080041c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
	__asm volatile
 80041ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	607b      	str	r3, [r7, #4]
}
 80041dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80041de:	4b0f      	ldr	r3, [pc, #60]	; (800421c <vPortEnterCritical+0x58>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3301      	adds	r3, #1
 80041e4:	4a0d      	ldr	r2, [pc, #52]	; (800421c <vPortEnterCritical+0x58>)
 80041e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80041e8:	4b0c      	ldr	r3, [pc, #48]	; (800421c <vPortEnterCritical+0x58>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d10f      	bne.n	8004210 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <vPortEnterCritical+0x5c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <vPortEnterCritical+0x4c>
	__asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	603b      	str	r3, [r7, #0]
}
 800420c:	bf00      	nop
 800420e:	e7fe      	b.n	800420e <vPortEnterCritical+0x4a>
	}
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	20000008 	.word	0x20000008
 8004220:	e000ed04 	.word	0xe000ed04

08004224 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800422a:	4b12      	ldr	r3, [pc, #72]	; (8004274 <vPortExitCritical+0x50>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10a      	bne.n	8004248 <vPortExitCritical+0x24>
	__asm volatile
 8004232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004236:	f383 8811 	msr	BASEPRI, r3
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	607b      	str	r3, [r7, #4]
}
 8004244:	bf00      	nop
 8004246:	e7fe      	b.n	8004246 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004248:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <vPortExitCritical+0x50>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3b01      	subs	r3, #1
 800424e:	4a09      	ldr	r2, [pc, #36]	; (8004274 <vPortExitCritical+0x50>)
 8004250:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004252:	4b08      	ldr	r3, [pc, #32]	; (8004274 <vPortExitCritical+0x50>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d105      	bne.n	8004266 <vPortExitCritical+0x42>
 800425a:	2300      	movs	r3, #0
 800425c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	f383 8811 	msr	BASEPRI, r3
}
 8004264:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	20000008 	.word	0x20000008
	...

08004280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004280:	f3ef 8009 	mrs	r0, PSP
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <pxCurrentTCBConst>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	f01e 0f10 	tst.w	lr, #16
 8004290:	bf08      	it	eq
 8004292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800429a:	6010      	str	r0, [r2, #0]
 800429c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80042a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80042a4:	f380 8811 	msr	BASEPRI, r0
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f7fe ffbe 	bl	8003230 <vTaskSwitchContext>
 80042b4:	f04f 0000 	mov.w	r0, #0
 80042b8:	f380 8811 	msr	BASEPRI, r0
 80042bc:	bc09      	pop	{r0, r3}
 80042be:	6819      	ldr	r1, [r3, #0]
 80042c0:	6808      	ldr	r0, [r1, #0]
 80042c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c6:	f01e 0f10 	tst.w	lr, #16
 80042ca:	bf08      	it	eq
 80042cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80042d0:	f380 8809 	msr	PSP, r0
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	f3af 8000 	nop.w

080042e0 <pxCurrentTCBConst>:
 80042e0:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop

080042e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
	__asm volatile
 80042ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	607b      	str	r3, [r7, #4]
}
 8004300:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004302:	f7fe fedb 	bl	80030bc <xTaskIncrementTick>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800430c:	4b06      	ldr	r3, [pc, #24]	; (8004328 <xPortSysTickHandler+0x40>)
 800430e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	2300      	movs	r3, #0
 8004316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	f383 8811 	msr	BASEPRI, r3
}
 800431e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004320:	bf00      	nop
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	e000ed04 	.word	0xe000ed04

0800432c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004330:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <vPortSetupTimerInterrupt+0x34>)
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004336:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <vPortSetupTimerInterrupt+0x38>)
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <vPortSetupTimerInterrupt+0x3c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a0a      	ldr	r2, [pc, #40]	; (800436c <vPortSetupTimerInterrupt+0x40>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	099b      	lsrs	r3, r3, #6
 8004348:	4a09      	ldr	r2, [pc, #36]	; (8004370 <vPortSetupTimerInterrupt+0x44>)
 800434a:	3b01      	subs	r3, #1
 800434c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800434e:	4b04      	ldr	r3, [pc, #16]	; (8004360 <vPortSetupTimerInterrupt+0x34>)
 8004350:	2207      	movs	r2, #7
 8004352:	601a      	str	r2, [r3, #0]
}
 8004354:	bf00      	nop
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	e000e010 	.word	0xe000e010
 8004364:	e000e018 	.word	0xe000e018
 8004368:	20000014 	.word	0x20000014
 800436c:	10624dd3 	.word	0x10624dd3
 8004370:	e000e014 	.word	0xe000e014

08004374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004374:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004384 <vPortEnableVFP+0x10>
 8004378:	6801      	ldr	r1, [r0, #0]
 800437a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800437e:	6001      	str	r1, [r0, #0]
 8004380:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004382:	bf00      	nop
 8004384:	e000ed88 	.word	0xe000ed88

08004388 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800438e:	f3ef 8305 	mrs	r3, IPSR
 8004392:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b0f      	cmp	r3, #15
 8004398:	d914      	bls.n	80043c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800439a:	4a17      	ldr	r2, [pc, #92]	; (80043f8 <vPortValidateInterruptPriority+0x70>)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4413      	add	r3, r2
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80043a4:	4b15      	ldr	r3, [pc, #84]	; (80043fc <vPortValidateInterruptPriority+0x74>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	7afa      	ldrb	r2, [r7, #11]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d20a      	bcs.n	80043c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	607b      	str	r3, [r7, #4]
}
 80043c0:	bf00      	nop
 80043c2:	e7fe      	b.n	80043c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80043c4:	4b0e      	ldr	r3, [pc, #56]	; (8004400 <vPortValidateInterruptPriority+0x78>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043cc:	4b0d      	ldr	r3, [pc, #52]	; (8004404 <vPortValidateInterruptPriority+0x7c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d90a      	bls.n	80043ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	603b      	str	r3, [r7, #0]
}
 80043e6:	bf00      	nop
 80043e8:	e7fe      	b.n	80043e8 <vPortValidateInterruptPriority+0x60>
	}
 80043ea:	bf00      	nop
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	e000e3f0 	.word	0xe000e3f0
 80043fc:	20000d1c 	.word	0x20000d1c
 8004400:	e000ed0c 	.word	0xe000ed0c
 8004404:	20000d20 	.word	0x20000d20

08004408 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08a      	sub	sp, #40	; 0x28
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004410:	2300      	movs	r3, #0
 8004412:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004414:	f7fe fd96 	bl	8002f44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004418:	4b5b      	ldr	r3, [pc, #364]	; (8004588 <pvPortMalloc+0x180>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004420:	f000 f920 	bl	8004664 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004424:	4b59      	ldr	r3, [pc, #356]	; (800458c <pvPortMalloc+0x184>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4013      	ands	r3, r2
 800442c:	2b00      	cmp	r3, #0
 800442e:	f040 8093 	bne.w	8004558 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d01d      	beq.n	8004474 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004438:	2208      	movs	r2, #8
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4413      	add	r3, r2
 800443e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	2b00      	cmp	r3, #0
 8004448:	d014      	beq.n	8004474 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f023 0307 	bic.w	r3, r3, #7
 8004450:	3308      	adds	r3, #8
 8004452:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <pvPortMalloc+0x6c>
	__asm volatile
 800445e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	617b      	str	r3, [r7, #20]
}
 8004470:	bf00      	nop
 8004472:	e7fe      	b.n	8004472 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d06e      	beq.n	8004558 <pvPortMalloc+0x150>
 800447a:	4b45      	ldr	r3, [pc, #276]	; (8004590 <pvPortMalloc+0x188>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	429a      	cmp	r2, r3
 8004482:	d869      	bhi.n	8004558 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004484:	4b43      	ldr	r3, [pc, #268]	; (8004594 <pvPortMalloc+0x18c>)
 8004486:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004488:	4b42      	ldr	r3, [pc, #264]	; (8004594 <pvPortMalloc+0x18c>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800448e:	e004      	b.n	800449a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d903      	bls.n	80044ac <pvPortMalloc+0xa4>
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f1      	bne.n	8004490 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80044ac:	4b36      	ldr	r3, [pc, #216]	; (8004588 <pvPortMalloc+0x180>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d050      	beq.n	8004558 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2208      	movs	r2, #8
 80044bc:	4413      	add	r3, r2
 80044be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	1ad2      	subs	r2, r2, r3
 80044d0:	2308      	movs	r3, #8
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d91f      	bls.n	8004518 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4413      	add	r3, r2
 80044de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <pvPortMalloc+0xf8>
	__asm volatile
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	613b      	str	r3, [r7, #16]
}
 80044fc:	bf00      	nop
 80044fe:	e7fe      	b.n	80044fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	1ad2      	subs	r2, r2, r3
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004512:	69b8      	ldr	r0, [r7, #24]
 8004514:	f000 f908 	bl	8004728 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004518:	4b1d      	ldr	r3, [pc, #116]	; (8004590 <pvPortMalloc+0x188>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	4a1b      	ldr	r2, [pc, #108]	; (8004590 <pvPortMalloc+0x188>)
 8004524:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004526:	4b1a      	ldr	r3, [pc, #104]	; (8004590 <pvPortMalloc+0x188>)
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	4b1b      	ldr	r3, [pc, #108]	; (8004598 <pvPortMalloc+0x190>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d203      	bcs.n	800453a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004532:	4b17      	ldr	r3, [pc, #92]	; (8004590 <pvPortMalloc+0x188>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a18      	ldr	r2, [pc, #96]	; (8004598 <pvPortMalloc+0x190>)
 8004538:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	4b13      	ldr	r3, [pc, #76]	; (800458c <pvPortMalloc+0x184>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	431a      	orrs	r2, r3
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800454e:	4b13      	ldr	r3, [pc, #76]	; (800459c <pvPortMalloc+0x194>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3301      	adds	r3, #1
 8004554:	4a11      	ldr	r2, [pc, #68]	; (800459c <pvPortMalloc+0x194>)
 8004556:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004558:	f7fe fd02 	bl	8002f60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f003 0307 	and.w	r3, r3, #7
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <pvPortMalloc+0x174>
	__asm volatile
 8004566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	60fb      	str	r3, [r7, #12]
}
 8004578:	bf00      	nop
 800457a:	e7fe      	b.n	800457a <pvPortMalloc+0x172>
	return pvReturn;
 800457c:	69fb      	ldr	r3, [r7, #28]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3728      	adds	r7, #40	; 0x28
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	2000492c 	.word	0x2000492c
 800458c:	20004940 	.word	0x20004940
 8004590:	20004930 	.word	0x20004930
 8004594:	20004924 	.word	0x20004924
 8004598:	20004934 	.word	0x20004934
 800459c:	20004938 	.word	0x20004938

080045a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d04d      	beq.n	800464e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80045b2:	2308      	movs	r3, #8
 80045b4:	425b      	negs	r3, r3
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4413      	add	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	4b24      	ldr	r3, [pc, #144]	; (8004658 <vPortFree+0xb8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4013      	ands	r3, r2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10a      	bne.n	80045e4 <vPortFree+0x44>
	__asm volatile
 80045ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d2:	f383 8811 	msr	BASEPRI, r3
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	60fb      	str	r3, [r7, #12]
}
 80045e0:	bf00      	nop
 80045e2:	e7fe      	b.n	80045e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <vPortFree+0x62>
	__asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	60bb      	str	r3, [r7, #8]
}
 80045fe:	bf00      	nop
 8004600:	e7fe      	b.n	8004600 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	4b14      	ldr	r3, [pc, #80]	; (8004658 <vPortFree+0xb8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4013      	ands	r3, r2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01e      	beq.n	800464e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d11a      	bne.n	800464e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	4b0e      	ldr	r3, [pc, #56]	; (8004658 <vPortFree+0xb8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	43db      	mvns	r3, r3
 8004622:	401a      	ands	r2, r3
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004628:	f7fe fc8c 	bl	8002f44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	4b0a      	ldr	r3, [pc, #40]	; (800465c <vPortFree+0xbc>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4413      	add	r3, r2
 8004636:	4a09      	ldr	r2, [pc, #36]	; (800465c <vPortFree+0xbc>)
 8004638:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800463a:	6938      	ldr	r0, [r7, #16]
 800463c:	f000 f874 	bl	8004728 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004640:	4b07      	ldr	r3, [pc, #28]	; (8004660 <vPortFree+0xc0>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3301      	adds	r3, #1
 8004646:	4a06      	ldr	r2, [pc, #24]	; (8004660 <vPortFree+0xc0>)
 8004648:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800464a:	f7fe fc89 	bl	8002f60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800464e:	bf00      	nop
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20004940 	.word	0x20004940
 800465c:	20004930 	.word	0x20004930
 8004660:	2000493c 	.word	0x2000493c

08004664 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800466a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800466e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004670:	4b27      	ldr	r3, [pc, #156]	; (8004710 <prvHeapInit+0xac>)
 8004672:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00c      	beq.n	8004698 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	3307      	adds	r3, #7
 8004682:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f023 0307 	bic.w	r3, r3, #7
 800468a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	4a1f      	ldr	r2, [pc, #124]	; (8004710 <prvHeapInit+0xac>)
 8004694:	4413      	add	r3, r2
 8004696:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800469c:	4a1d      	ldr	r2, [pc, #116]	; (8004714 <prvHeapInit+0xb0>)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80046a2:	4b1c      	ldr	r3, [pc, #112]	; (8004714 <prvHeapInit+0xb0>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	4413      	add	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80046b0:	2208      	movs	r2, #8
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0307 	bic.w	r3, r3, #7
 80046be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4a15      	ldr	r2, [pc, #84]	; (8004718 <prvHeapInit+0xb4>)
 80046c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80046c6:	4b14      	ldr	r3, [pc, #80]	; (8004718 <prvHeapInit+0xb4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2200      	movs	r2, #0
 80046cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80046ce:	4b12      	ldr	r3, [pc, #72]	; (8004718 <prvHeapInit+0xb4>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	1ad2      	subs	r2, r2, r3
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046e4:	4b0c      	ldr	r3, [pc, #48]	; (8004718 <prvHeapInit+0xb4>)
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	4a0a      	ldr	r2, [pc, #40]	; (800471c <prvHeapInit+0xb8>)
 80046f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	4a09      	ldr	r2, [pc, #36]	; (8004720 <prvHeapInit+0xbc>)
 80046fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80046fc:	4b09      	ldr	r3, [pc, #36]	; (8004724 <prvHeapInit+0xc0>)
 80046fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004702:	601a      	str	r2, [r3, #0]
}
 8004704:	bf00      	nop
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	20000d24 	.word	0x20000d24
 8004714:	20004924 	.word	0x20004924
 8004718:	2000492c 	.word	0x2000492c
 800471c:	20004934 	.word	0x20004934
 8004720:	20004930 	.word	0x20004930
 8004724:	20004940 	.word	0x20004940

08004728 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004730:	4b28      	ldr	r3, [pc, #160]	; (80047d4 <prvInsertBlockIntoFreeList+0xac>)
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	e002      	b.n	800473c <prvInsertBlockIntoFreeList+0x14>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	429a      	cmp	r2, r3
 8004744:	d8f7      	bhi.n	8004736 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	4413      	add	r3, r2
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	429a      	cmp	r2, r3
 8004756:	d108      	bne.n	800476a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	441a      	add	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	441a      	add	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	429a      	cmp	r2, r3
 800477c:	d118      	bne.n	80047b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <prvInsertBlockIntoFreeList+0xb0>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d00d      	beq.n	80047a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	441a      	add	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	e008      	b.n	80047b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80047a6:	4b0c      	ldr	r3, [pc, #48]	; (80047d8 <prvInsertBlockIntoFreeList+0xb0>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	e003      	b.n	80047b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d002      	beq.n	80047c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047c6:	bf00      	nop
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	20004924 	.word	0x20004924
 80047d8:	2000492c 	.word	0x2000492c

080047dc <debug>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void debug(char * string) {
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
	uint32_t length = strlen(string);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7fb fcfb 	bl	80001e0 <strlen>
 80047ea:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(&huart2,(uint8_t *) string, length, 100);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	2364      	movs	r3, #100	; 0x64
 80047f2:	6879      	ldr	r1, [r7, #4]
 80047f4:	4803      	ldr	r0, [pc, #12]	; (8004804 <debug+0x28>)
 80047f6:	f7fc ff72 	bl	80016de <HAL_UART_Transmit>
}
 80047fa:	bf00      	nop
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	20004b90 	.word	0x20004b90

08004808 <pmSlaveUartTx>:
/*static*/pmProtocolContext_t master_uart;
static pmProtocolDriver_t master_uart_drivers = { .tx = pmMasterUartTx, .rx =
		pmMasterUartRx };
#endif

static int pmSlaveUartTx(uint8_t * data, uint8_t numBytes) {
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	70fb      	strb	r3, [r7, #3]
	if ((HAL_UART_Transmit(&huart1, data, numBytes, 100) == HAL_OK)) {
 8004814:	78fb      	ldrb	r3, [r7, #3]
 8004816:	b29a      	uxth	r2, r3
 8004818:	2364      	movs	r3, #100	; 0x64
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	4806      	ldr	r0, [pc, #24]	; (8004838 <pmSlaveUartTx+0x30>)
 800481e:	f7fc ff5e 	bl	80016de <HAL_UART_Transmit>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <pmSlaveUartTx+0x24>
		return numBytes;
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	e000      	b.n	800482e <pmSlaveUartTx+0x26>
	}
	return 0;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20004b08 	.word	0x20004b08

0800483c <pmSlaveUartRx>:

static int pmSlaveUartRx(uint8_t * data, uint8_t numBytes) {
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	460b      	mov	r3, r1
 8004846:	70fb      	strb	r3, [r7, #3]
	if ((HAL_UART_Receive(&huart1, data, numBytes,100) == HAL_OK)) {
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	b29a      	uxth	r2, r3
 800484c:	2364      	movs	r3, #100	; 0x64
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	4806      	ldr	r0, [pc, #24]	; (800486c <pmSlaveUartRx+0x30>)
 8004852:	f7fc ffd6 	bl	8001802 <HAL_UART_Receive>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <pmSlaveUartRx+0x24>
		return numBytes;
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	e000      	b.n	8004862 <pmSlaveUartRx+0x26>
	}
	return 0;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20004b08 	.word	0x20004b08

08004870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004874:	f7fb fe38 	bl	80004e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004878:	f000 f82e 	bl	80048d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800487c:	f000 f944 	bl	8004b08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004880:	f000 f8ee 	bl	8004a60 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8004884:	f000 f8c2 	bl	8004a0c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8004888:	f000 f914 	bl	8004ab4 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 800488c:	f000 f890 	bl	80049b0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	if (PM_PROTOCOL_SUCCESS
			!= pmProtocolInit(&slave_uart_drivers, &slave_uart)) {
 8004890:	490b      	ldr	r1, [pc, #44]	; (80048c0 <main+0x50>)
 8004892:	480c      	ldr	r0, [pc, #48]	; (80048c4 <main+0x54>)
 8004894:	f000 f9e2 	bl	8004c5c <pmProtocolInit>
 8004898:	4603      	mov	r3, r0
	if (PM_PROTOCOL_SUCCESS
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <main+0x34>
		debug("Error! PM protocol initialized failed\n");
 800489e:	480a      	ldr	r0, [pc, #40]	; (80048c8 <main+0x58>)
 80048a0:	f7ff ff9c 	bl	80047dc <debug>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80048a4:	f7fd fa96 	bl	8001dd4 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80048a8:	4a08      	ldr	r2, [pc, #32]	; (80048cc <main+0x5c>)
 80048aa:	2100      	movs	r1, #0
 80048ac:	4808      	ldr	r0, [pc, #32]	; (80048d0 <main+0x60>)
 80048ae:	f7fd fadb 	bl	8001e68 <osThreadNew>
 80048b2:	4603      	mov	r3, r0
 80048b4:	4a07      	ldr	r2, [pc, #28]	; (80048d4 <main+0x64>)
 80048b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80048b8:	f7fd fab0 	bl	8001e1c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80048bc:	e7fe      	b.n	80048bc <main+0x4c>
 80048be:	bf00      	nop
 80048c0:	20004a20 	.word	0x20004a20
 80048c4:	2000000c 	.word	0x2000000c
 80048c8:	080052bc 	.word	0x080052bc
 80048cc:	080052e4 	.word	0x080052e4
 80048d0:	08004c19 	.word	0x08004c19
 80048d4:	20004a1c 	.word	0x20004a1c

080048d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b094      	sub	sp, #80	; 0x50
 80048dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048de:	f107 0320 	add.w	r3, r7, #32
 80048e2:	2230      	movs	r2, #48	; 0x30
 80048e4:	2100      	movs	r1, #0
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fcc2 	bl	8005270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048ec:	f107 030c 	add.w	r3, r7, #12
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	605a      	str	r2, [r3, #4]
 80048f6:	609a      	str	r2, [r3, #8]
 80048f8:	60da      	str	r2, [r3, #12]
 80048fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80048fc:	2300      	movs	r3, #0
 80048fe:	60bb      	str	r3, [r7, #8]
 8004900:	4b29      	ldr	r3, [pc, #164]	; (80049a8 <SystemClock_Config+0xd0>)
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	4a28      	ldr	r2, [pc, #160]	; (80049a8 <SystemClock_Config+0xd0>)
 8004906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800490a:	6413      	str	r3, [r2, #64]	; 0x40
 800490c:	4b26      	ldr	r3, [pc, #152]	; (80049a8 <SystemClock_Config+0xd0>)
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004918:	2300      	movs	r3, #0
 800491a:	607b      	str	r3, [r7, #4]
 800491c:	4b23      	ldr	r3, [pc, #140]	; (80049ac <SystemClock_Config+0xd4>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004924:	4a21      	ldr	r2, [pc, #132]	; (80049ac <SystemClock_Config+0xd4>)
 8004926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800492a:	6013      	str	r3, [r2, #0]
 800492c:	4b1f      	ldr	r3, [pc, #124]	; (80049ac <SystemClock_Config+0xd4>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004934:	607b      	str	r3, [r7, #4]
 8004936:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004938:	2302      	movs	r3, #2
 800493a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800493c:	2301      	movs	r3, #1
 800493e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004940:	2310      	movs	r3, #16
 8004942:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004944:	2302      	movs	r3, #2
 8004946:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004948:	2300      	movs	r3, #0
 800494a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800494c:	2310      	movs	r3, #16
 800494e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004950:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004954:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004956:	2304      	movs	r3, #4
 8004958:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800495a:	2307      	movs	r3, #7
 800495c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800495e:	f107 0320 	add.w	r3, r7, #32
 8004962:	4618      	mov	r0, r3
 8004964:	f7fc f9fa 	bl	8000d5c <HAL_RCC_OscConfig>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800496e:	f000 f96d 	bl	8004c4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004972:	230f      	movs	r3, #15
 8004974:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004976:	2302      	movs	r3, #2
 8004978:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800497e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004982:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004984:	2300      	movs	r3, #0
 8004986:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004988:	f107 030c 	add.w	r3, r7, #12
 800498c:	2102      	movs	r1, #2
 800498e:	4618      	mov	r0, r3
 8004990:	f7fc fc5c 	bl	800124c <HAL_RCC_ClockConfig>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800499a:	f000 f957 	bl	8004c4c <Error_Handler>
  }
}
 800499e:	bf00      	nop
 80049a0:	3750      	adds	r7, #80	; 0x50
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40023800 	.word	0x40023800
 80049ac:	40007000 	.word	0x40007000

080049b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80049b4:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <MX_I2C1_Init+0x50>)
 80049b6:	4a13      	ldr	r2, [pc, #76]	; (8004a04 <MX_I2C1_Init+0x54>)
 80049b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80049ba:	4b11      	ldr	r3, [pc, #68]	; (8004a00 <MX_I2C1_Init+0x50>)
 80049bc:	4a12      	ldr	r2, [pc, #72]	; (8004a08 <MX_I2C1_Init+0x58>)
 80049be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80049c0:	4b0f      	ldr	r3, [pc, #60]	; (8004a00 <MX_I2C1_Init+0x50>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80049c6:	4b0e      	ldr	r3, [pc, #56]	; (8004a00 <MX_I2C1_Init+0x50>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80049cc:	4b0c      	ldr	r3, [pc, #48]	; (8004a00 <MX_I2C1_Init+0x50>)
 80049ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80049d4:	4b0a      	ldr	r3, [pc, #40]	; (8004a00 <MX_I2C1_Init+0x50>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80049da:	4b09      	ldr	r3, [pc, #36]	; (8004a00 <MX_I2C1_Init+0x50>)
 80049dc:	2200      	movs	r2, #0
 80049de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80049e0:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <MX_I2C1_Init+0x50>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80049e6:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <MX_I2C1_Init+0x50>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80049ec:	4804      	ldr	r0, [pc, #16]	; (8004a00 <MX_I2C1_Init+0x50>)
 80049ee:	f7fc f871 	bl	8000ad4 <HAL_I2C_Init>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80049f8:	f000 f928 	bl	8004c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80049fc:	bf00      	nop
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	20004ab4 	.word	0x20004ab4
 8004a04:	40005400 	.word	0x40005400
 8004a08:	000186a0 	.word	0x000186a0

08004a0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004a10:	4b11      	ldr	r3, [pc, #68]	; (8004a58 <MX_USART1_UART_Init+0x4c>)
 8004a12:	4a12      	ldr	r2, [pc, #72]	; (8004a5c <MX_USART1_UART_Init+0x50>)
 8004a14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004a16:	4b10      	ldr	r3, [pc, #64]	; (8004a58 <MX_USART1_UART_Init+0x4c>)
 8004a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004a1e:	4b0e      	ldr	r3, [pc, #56]	; (8004a58 <MX_USART1_UART_Init+0x4c>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004a24:	4b0c      	ldr	r3, [pc, #48]	; (8004a58 <MX_USART1_UART_Init+0x4c>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004a2a:	4b0b      	ldr	r3, [pc, #44]	; (8004a58 <MX_USART1_UART_Init+0x4c>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004a30:	4b09      	ldr	r3, [pc, #36]	; (8004a58 <MX_USART1_UART_Init+0x4c>)
 8004a32:	220c      	movs	r2, #12
 8004a34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a36:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <MX_USART1_UART_Init+0x4c>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a3c:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <MX_USART1_UART_Init+0x4c>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004a42:	4805      	ldr	r0, [pc, #20]	; (8004a58 <MX_USART1_UART_Init+0x4c>)
 8004a44:	f7fc fdfe 	bl	8001644 <HAL_UART_Init>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004a4e:	f000 f8fd 	bl	8004c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004a52:	bf00      	nop
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20004b08 	.word	0x20004b08
 8004a5c:	40011000 	.word	0x40011000

08004a60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004a64:	4b11      	ldr	r3, [pc, #68]	; (8004aac <MX_USART2_UART_Init+0x4c>)
 8004a66:	4a12      	ldr	r2, [pc, #72]	; (8004ab0 <MX_USART2_UART_Init+0x50>)
 8004a68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004a6a:	4b10      	ldr	r3, [pc, #64]	; (8004aac <MX_USART2_UART_Init+0x4c>)
 8004a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a72:	4b0e      	ldr	r3, [pc, #56]	; (8004aac <MX_USART2_UART_Init+0x4c>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004a78:	4b0c      	ldr	r3, [pc, #48]	; (8004aac <MX_USART2_UART_Init+0x4c>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004a7e:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <MX_USART2_UART_Init+0x4c>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004a84:	4b09      	ldr	r3, [pc, #36]	; (8004aac <MX_USART2_UART_Init+0x4c>)
 8004a86:	220c      	movs	r2, #12
 8004a88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a8a:	4b08      	ldr	r3, [pc, #32]	; (8004aac <MX_USART2_UART_Init+0x4c>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a90:	4b06      	ldr	r3, [pc, #24]	; (8004aac <MX_USART2_UART_Init+0x4c>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004a96:	4805      	ldr	r0, [pc, #20]	; (8004aac <MX_USART2_UART_Init+0x4c>)
 8004a98:	f7fc fdd4 	bl	8001644 <HAL_UART_Init>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004aa2:	f000 f8d3 	bl	8004c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004aa6:	bf00      	nop
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	20004b90 	.word	0x20004b90
 8004ab0:	40004400 	.word	0x40004400

08004ab4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004ab8:	4b11      	ldr	r3, [pc, #68]	; (8004b00 <MX_USART6_UART_Init+0x4c>)
 8004aba:	4a12      	ldr	r2, [pc, #72]	; (8004b04 <MX_USART6_UART_Init+0x50>)
 8004abc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004abe:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <MX_USART6_UART_Init+0x4c>)
 8004ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004ac4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004ac6:	4b0e      	ldr	r3, [pc, #56]	; (8004b00 <MX_USART6_UART_Init+0x4c>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004acc:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <MX_USART6_UART_Init+0x4c>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004ad2:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <MX_USART6_UART_Init+0x4c>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004ad8:	4b09      	ldr	r3, [pc, #36]	; (8004b00 <MX_USART6_UART_Init+0x4c>)
 8004ada:	220c      	movs	r2, #12
 8004adc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ade:	4b08      	ldr	r3, [pc, #32]	; (8004b00 <MX_USART6_UART_Init+0x4c>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ae4:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <MX_USART6_UART_Init+0x4c>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004aea:	4805      	ldr	r0, [pc, #20]	; (8004b00 <MX_USART6_UART_Init+0x4c>)
 8004aec:	f7fc fdaa 	bl	8001644 <HAL_UART_Init>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004af6:	f000 f8a9 	bl	8004c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004afa:	bf00      	nop
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20004b4c 	.word	0x20004b4c
 8004b04:	40011400 	.word	0x40011400

08004b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08a      	sub	sp, #40	; 0x28
 8004b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b0e:	f107 0314 	add.w	r3, r7, #20
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	605a      	str	r2, [r3, #4]
 8004b18:	609a      	str	r2, [r3, #8]
 8004b1a:	60da      	str	r2, [r3, #12]
 8004b1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b1e:	2300      	movs	r3, #0
 8004b20:	613b      	str	r3, [r7, #16]
 8004b22:	4b39      	ldr	r3, [pc, #228]	; (8004c08 <MX_GPIO_Init+0x100>)
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	4a38      	ldr	r2, [pc, #224]	; (8004c08 <MX_GPIO_Init+0x100>)
 8004b28:	f043 0304 	orr.w	r3, r3, #4
 8004b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b2e:	4b36      	ldr	r3, [pc, #216]	; (8004c08 <MX_GPIO_Init+0x100>)
 8004b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	613b      	str	r3, [r7, #16]
 8004b38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	4b32      	ldr	r3, [pc, #200]	; (8004c08 <MX_GPIO_Init+0x100>)
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	4a31      	ldr	r2, [pc, #196]	; (8004c08 <MX_GPIO_Init+0x100>)
 8004b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b48:	6313      	str	r3, [r2, #48]	; 0x30
 8004b4a:	4b2f      	ldr	r3, [pc, #188]	; (8004c08 <MX_GPIO_Init+0x100>)
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b56:	2300      	movs	r3, #0
 8004b58:	60bb      	str	r3, [r7, #8]
 8004b5a:	4b2b      	ldr	r3, [pc, #172]	; (8004c08 <MX_GPIO_Init+0x100>)
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5e:	4a2a      	ldr	r2, [pc, #168]	; (8004c08 <MX_GPIO_Init+0x100>)
 8004b60:	f043 0301 	orr.w	r3, r3, #1
 8004b64:	6313      	str	r3, [r2, #48]	; 0x30
 8004b66:	4b28      	ldr	r3, [pc, #160]	; (8004c08 <MX_GPIO_Init+0x100>)
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	60bb      	str	r3, [r7, #8]
 8004b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b72:	2300      	movs	r3, #0
 8004b74:	607b      	str	r3, [r7, #4]
 8004b76:	4b24      	ldr	r3, [pc, #144]	; (8004c08 <MX_GPIO_Init+0x100>)
 8004b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7a:	4a23      	ldr	r2, [pc, #140]	; (8004c08 <MX_GPIO_Init+0x100>)
 8004b7c:	f043 0302 	orr.w	r3, r3, #2
 8004b80:	6313      	str	r3, [r2, #48]	; 0x30
 8004b82:	4b21      	ldr	r3, [pc, #132]	; (8004c08 <MX_GPIO_Init+0x100>)
 8004b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	607b      	str	r3, [r7, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004b8e:	2200      	movs	r2, #0
 8004b90:	2120      	movs	r1, #32
 8004b92:	481e      	ldr	r0, [pc, #120]	; (8004c0c <MX_GPIO_Init+0x104>)
 8004b94:	f7fb ff84 	bl	8000aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004b9e:	4b1c      	ldr	r3, [pc, #112]	; (8004c10 <MX_GPIO_Init+0x108>)
 8004ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004ba6:	f107 0314 	add.w	r3, r7, #20
 8004baa:	4619      	mov	r1, r3
 8004bac:	4819      	ldr	r0, [pc, #100]	; (8004c14 <MX_GPIO_Init+0x10c>)
 8004bae:	f7fb fdf3 	bl	8000798 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004bb2:	2320      	movs	r3, #32
 8004bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004bc2:	f107 0314 	add.w	r3, r7, #20
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4810      	ldr	r0, [pc, #64]	; (8004c0c <MX_GPIO_Init+0x104>)
 8004bca:	f7fb fde5 	bl	8000798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004bce:	2330      	movs	r3, #48	; 0x30
 8004bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bda:	f107 0314 	add.w	r3, r7, #20
 8004bde:	4619      	mov	r1, r3
 8004be0:	480c      	ldr	r0, [pc, #48]	; (8004c14 <MX_GPIO_Init+0x10c>)
 8004be2:	f7fb fdd9 	bl	8000798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bec:	2300      	movs	r3, #0
 8004bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bf4:	f107 0314 	add.w	r3, r7, #20
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4804      	ldr	r0, [pc, #16]	; (8004c0c <MX_GPIO_Init+0x104>)
 8004bfc:	f7fb fdcc 	bl	8000798 <HAL_GPIO_Init>

}
 8004c00:	bf00      	nop
 8004c02:	3728      	adds	r7, #40	; 0x28
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	40020000 	.word	0x40020000
 8004c10:	10210000 	.word	0x10210000
 8004c14:	40020800 	.word	0x40020800

08004c18 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		TickType_t nowTicks = xTaskGetTickCount();
 8004c20:	f7fe fa3c 	bl	800309c <xTaskGetTickCount>
 8004c24:	60f8      	str	r0, [r7, #12]
		uint32_t nowTicks_ms = nowTicks * 1000 / configTICK_RATE_HZ;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c2c:	fb02 f303 	mul.w	r3, r2, r3
 8004c30:	4a04      	ldr	r2, [pc, #16]	; (8004c44 <StartDefaultTask+0x2c>)
 8004c32:	fba2 2303 	umull	r2, r3, r2, r3
 8004c36:	099b      	lsrs	r3, r3, #6
 8004c38:	60bb      	str	r3, [r7, #8]
		pmProtocolPeriodic(nowTicks_ms, &slave_uart);
 8004c3a:	4903      	ldr	r1, [pc, #12]	; (8004c48 <StartDefaultTask+0x30>)
 8004c3c:	68b8      	ldr	r0, [r7, #8]
 8004c3e:	f000 f837 	bl	8004cb0 <pmProtocolPeriodic>
	for (;;) {
 8004c42:	e7ed      	b.n	8004c20 <StartDefaultTask+0x8>
 8004c44:	10624dd3 	.word	0x10624dd3
 8004c48:	20004a20 	.word	0x20004a20

08004c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004c50:	bf00      	nop
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
	...

08004c5c <pmProtocolInit>:

// --------------------------------------------------------------------------------------------------------------------
// FUNCTIONS
// --------------------------------------------------------------------------------------------------------------------
int pmProtocolInit(const pmProtocolDriver_t * driver, pmProtocolContext_t * context)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
    int rc = PM_PROTOCOL_FAILURE;
 8004c66:	2301      	movs	r3, #1
 8004c68:	60fb      	str	r3, [r7, #12]
    if (   (NULL != context)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d018      	beq.n	8004ca2 <pmProtocolInit+0x46>
        && (NULL == context->driver) // If the driver is null, we can assume the module has not yet been initialized.
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d114      	bne.n	8004ca2 <pmProtocolInit+0x46>
        && (NULL != driver)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d011      	beq.n	8004ca2 <pmProtocolInit+0x46>
        && (NULL != driver->rx)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00d      	beq.n	8004ca2 <pmProtocolInit+0x46>
        && (NULL != driver->tx))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d009      	beq.n	8004ca2 <pmProtocolInit+0x46>
    {
        context->driver = driver;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	601a      	str	r2, [r3, #0]

        (void)memset(&g_pmProtocolContext, 0, sizeof(g_pmProtocolContext));
 8004c94:	2294      	movs	r2, #148	; 0x94
 8004c96:	2100      	movs	r1, #0
 8004c98:	4804      	ldr	r0, [pc, #16]	; (8004cac <pmProtocolInit+0x50>)
 8004c9a:	f000 fae9 	bl	8005270 <memset>

        rc = PM_PROTOCOL_SUCCESS;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60fb      	str	r3, [r7, #12]
    }

    return rc;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	20004944 	.word	0x20004944

08004cb0 <pmProtocolPeriodic>:
    return rc;
}

// --------------------------------------------------------------------------------------------------------------------
void pmProtocolPeriodic(uint32_t ticks_ms, pmProtocolContext_t * context)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
    if (NULL != context->driver)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 80ec 	beq.w	8004e9c <pmProtocolPeriodic+0x1ec>
    {
        // Handle transmits.
        if (context->txInProgress)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	791b      	ldrb	r3, [r3, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d035      	beq.n	8004d38 <pmProtocolPeriodic+0x88>
        {
        	if (!context->txWaitingForAck)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	795b      	ldrb	r3, [r3, #5]
 8004cd0:	f083 0301 	eor.w	r3, r3, #1
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00e      	beq.n	8004cf8 <pmProtocolPeriodic+0x48>
        	{
        		// Transmit the first two bytes.
				if (0 < context->driver->tx(context->txBuffer, LEN_BYTE_OFFSET + 1))
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	3206      	adds	r2, #6
 8004ce4:	2102      	movs	r1, #2
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	4798      	blx	r3
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	dd23      	ble.n	8004d38 <pmProtocolPeriodic+0x88>
				{
					context->txWaitingForAck = true;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	715a      	strb	r2, [r3, #5]
 8004cf6:	e01f      	b.n	8004d38 <pmProtocolPeriodic+0x88>
				}
        	}
        	else
        	{
        		uint8_t ack;
        		if (1 == context->driver->rx(&ack, 1))
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f107 020b 	add.w	r2, r7, #11
 8004d02:	2101      	movs	r1, #1
 8004d04:	4610      	mov	r0, r2
 8004d06:	4798      	blx	r3
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d114      	bne.n	8004d38 <pmProtocolPeriodic+0x88>
        		{
        			// Ack received, send the rest of the bytes.
        			context->txWaitingForAck = false;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2200      	movs	r2, #0
 8004d12:	715a      	strb	r2, [r3, #5]
        			if (0 < context->driver->tx(&context->txBuffer[LEN_BYTE_OFFSET + 1], context->txBuffer[LEN_BYTE_OFFSET] - 2))
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	f102 0008 	add.w	r0, r2, #8
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	79d2      	ldrb	r2, [r2, #7]
 8004d24:	3a02      	subs	r2, #2
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	4611      	mov	r1, r2
 8004d2a:	4798      	blx	r3
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	dd02      	ble.n	8004d38 <pmProtocolPeriodic+0x88>
        			{
        				context->txInProgress = false; // Transmit completed.
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2200      	movs	r2, #0
 8004d36:	711a      	strb	r2, [r3, #4]
        		}
        	}
        }

        // Handle receives.
        switch(context->rxState)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <pmProtocolPeriodic+0x98>
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d05a      	beq.n	8004dfc <pmProtocolPeriodic+0x14c>
            }
            case PAYLOAD_READY:    // Pass through
            case TIMEOUT_OCCURRED: // Pass through
            case CHECKSUM_ERROR:   // Pass through
            default:
                break;
 8004d46:	e0ae      	b.n	8004ea6 <pmProtocolPeriodic+0x1f6>
                if (2 == context->driver->rx(context->rxBuffer, 2))
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	3250      	adds	r2, #80	; 0x50
 8004d52:	2102      	movs	r1, #2
 8004d54:	4610      	mov	r0, r2
 8004d56:	4798      	blx	r3
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	f040 80a0 	bne.w	8004ea0 <pmProtocolPeriodic+0x1f0>
                    if (context->rxBuffer[START_BYTE_OFFSET] == START_BYTE)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	f040 809a 	bne.w	8004ea0 <pmProtocolPeriodic+0x1f0>
                        context->rxStartTicks = ticks_ms;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	64da      	str	r2, [r3, #76]	; 0x4c
                        context->rxBytes = 1;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
                        context->rxLen = context->rxBuffer[LEN_BYTE_OFFSET];
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
						if (context->rxLen <= MAX_RX_BYTES)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004d8c:	2b43      	cmp	r3, #67	; 0x43
 8004d8e:	d830      	bhi.n	8004df2 <pmProtocolPeriodic+0x142>
							uint8_t ack = 0x40;
 8004d90:	2340      	movs	r3, #64	; 0x40
 8004d92:	72bb      	strb	r3, [r7, #10]
							context->driver->tx(&ack, 1);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f107 020a 	add.w	r2, r7, #10
 8004d9e:	2101      	movs	r1, #1
 8004da0:	4610      	mov	r0, r2
 8004da2:	4798      	blx	r3
							context->rxBytes = 2;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
							context->rxState = WAITING_FOR_DATA;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
			                uint8_t rxBytes = context->driver->rx(&context->rxBuffer[context->rxBytes],
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	f892 204b 	ldrb.w	r2, [r2, #75]	; 0x4b
 8004dc0:	3250      	adds	r2, #80	; 0x50
 8004dc2:	6839      	ldr	r1, [r7, #0]
 8004dc4:	1888      	adds	r0, r1, r2
			                    context->rxLen - context->rxBytes);
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	f892 104a 	ldrb.w	r1, [r2, #74]	; 0x4a
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	f892 204b 	ldrb.w	r2, [r2, #75]	; 0x4b
			                uint8_t rxBytes = context->driver->rx(&context->rxBuffer[context->rxBytes],
 8004dd2:	1a8a      	subs	r2, r1, r2
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	4798      	blx	r3
 8004dda:	4603      	mov	r3, r0
 8004ddc:	733b      	strb	r3, [r7, #12]
			                context->rxBytes += rxBytes;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8004de4:	7b3b      	ldrb	r3, [r7, #12]
 8004de6:	4413      	add	r3, r2
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
                break;
 8004df0:	e056      	b.n	8004ea0 <pmProtocolPeriodic+0x1f0>
							context->rxState = CHECKSUM_ERROR;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2205      	movs	r2, #5
 8004df6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                break;
 8004dfa:	e051      	b.n	8004ea0 <pmProtocolPeriodic+0x1f0>
                if (context->rxBytes >= context->rxLen)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d322      	bcc.n	8004e52 <pmProtocolPeriodic+0x1a2>
                    uint8_t checksum = 0;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	73fb      	strb	r3, [r7, #15]
                    for (uint8_t ix = 0; ix < context->rxLen; ix++)
 8004e10:	2300      	movs	r3, #0
 8004e12:	73bb      	strb	r3, [r7, #14]
 8004e14:	e00a      	b.n	8004e2c <pmProtocolPeriodic+0x17c>
                        checksum += context->rxBuffer[ix];
 8004e16:	7bbb      	ldrb	r3, [r7, #14]
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
 8004e22:	4413      	add	r3, r2
 8004e24:	73fb      	strb	r3, [r7, #15]
                    for (uint8_t ix = 0; ix < context->rxLen; ix++)
 8004e26:	7bbb      	ldrb	r3, [r7, #14]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	73bb      	strb	r3, [r7, #14]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004e32:	7bba      	ldrb	r2, [r7, #14]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d3ee      	bcc.n	8004e16 <pmProtocolPeriodic+0x166>
                    if (checksum == 0)
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d104      	bne.n	8004e48 <pmProtocolPeriodic+0x198>
                        context->rxState = PAYLOAD_READY;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2203      	movs	r2, #3
 8004e42:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                break;
 8004e46:	e02d      	b.n	8004ea4 <pmProtocolPeriodic+0x1f4>
                        context->rxState = CHECKSUM_ERROR;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2205      	movs	r2, #5
 8004e4c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                break;
 8004e50:	e028      	b.n	8004ea4 <pmProtocolPeriodic+0x1f4>
					if ((ticks_ms - context->rxStartTicks) > END_OF_PACKET_TIMEOUT_ms)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2bfa      	cmp	r3, #250	; 0xfa
 8004e5c:	d822      	bhi.n	8004ea4 <pmProtocolPeriodic+0x1f4>
						uint8_t rxBytes = context->driver->rx(&context->rxBuffer[context->rxBytes],
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	f892 204b 	ldrb.w	r2, [r2, #75]	; 0x4b
 8004e6a:	3250      	adds	r2, #80	; 0x50
 8004e6c:	6839      	ldr	r1, [r7, #0]
 8004e6e:	1888      	adds	r0, r1, r2
							context->rxLen - context->rxBytes);
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	f892 104a 	ldrb.w	r1, [r2, #74]	; 0x4a
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	f892 204b 	ldrb.w	r2, [r2, #75]	; 0x4b
						uint8_t rxBytes = context->driver->rx(&context->rxBuffer[context->rxBytes],
 8004e7c:	1a8a      	subs	r2, r1, r2
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	4611      	mov	r1, r2
 8004e82:	4798      	blx	r3
 8004e84:	4603      	mov	r3, r0
 8004e86:	737b      	strb	r3, [r7, #13]
						context->rxBytes += rxBytes;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8004e8e:	7b7b      	ldrb	r3, [r7, #13]
 8004e90:	4413      	add	r3, r2
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
                break;
 8004e9a:	e003      	b.n	8004ea4 <pmProtocolPeriodic+0x1f4>
        }
    }
 8004e9c:	bf00      	nop
 8004e9e:	e002      	b.n	8004ea6 <pmProtocolPeriodic+0x1f6>
                break;
 8004ea0:	bf00      	nop
 8004ea2:	e000      	b.n	8004ea6 <pmProtocolPeriodic+0x1f6>
                break;
 8004ea4:	bf00      	nop
}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	607b      	str	r3, [r7, #4]
 8004eba:	4b12      	ldr	r3, [pc, #72]	; (8004f04 <HAL_MspInit+0x54>)
 8004ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ebe:	4a11      	ldr	r2, [pc, #68]	; (8004f04 <HAL_MspInit+0x54>)
 8004ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ec6:	4b0f      	ldr	r3, [pc, #60]	; (8004f04 <HAL_MspInit+0x54>)
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ece:	607b      	str	r3, [r7, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	603b      	str	r3, [r7, #0]
 8004ed6:	4b0b      	ldr	r3, [pc, #44]	; (8004f04 <HAL_MspInit+0x54>)
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	4a0a      	ldr	r2, [pc, #40]	; (8004f04 <HAL_MspInit+0x54>)
 8004edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ee2:	4b08      	ldr	r3, [pc, #32]	; (8004f04 <HAL_MspInit+0x54>)
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eea:	603b      	str	r3, [r7, #0]
 8004eec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004eee:	2200      	movs	r2, #0
 8004ef0:	210f      	movs	r1, #15
 8004ef2:	f06f 0001 	mvn.w	r0, #1
 8004ef6:	f7fb fc26 	bl	8000746 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004efa:	bf00      	nop
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	40023800 	.word	0x40023800

08004f08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08a      	sub	sp, #40	; 0x28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f10:	f107 0314 	add.w	r3, r7, #20
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	605a      	str	r2, [r3, #4]
 8004f1a:	609a      	str	r2, [r3, #8]
 8004f1c:	60da      	str	r2, [r3, #12]
 8004f1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a19      	ldr	r2, [pc, #100]	; (8004f8c <HAL_I2C_MspInit+0x84>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d12b      	bne.n	8004f82 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	613b      	str	r3, [r7, #16]
 8004f2e:	4b18      	ldr	r3, [pc, #96]	; (8004f90 <HAL_I2C_MspInit+0x88>)
 8004f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f32:	4a17      	ldr	r2, [pc, #92]	; (8004f90 <HAL_I2C_MspInit+0x88>)
 8004f34:	f043 0302 	orr.w	r3, r3, #2
 8004f38:	6313      	str	r3, [r2, #48]	; 0x30
 8004f3a:	4b15      	ldr	r3, [pc, #84]	; (8004f90 <HAL_I2C_MspInit+0x88>)
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	613b      	str	r3, [r7, #16]
 8004f44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f46:	23c0      	movs	r3, #192	; 0xc0
 8004f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f4a:	2312      	movs	r3, #18
 8004f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f52:	2303      	movs	r3, #3
 8004f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f56:	2304      	movs	r3, #4
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f5a:	f107 0314 	add.w	r3, r7, #20
 8004f5e:	4619      	mov	r1, r3
 8004f60:	480c      	ldr	r0, [pc, #48]	; (8004f94 <HAL_I2C_MspInit+0x8c>)
 8004f62:	f7fb fc19 	bl	8000798 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	4b09      	ldr	r3, [pc, #36]	; (8004f90 <HAL_I2C_MspInit+0x88>)
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	4a08      	ldr	r2, [pc, #32]	; (8004f90 <HAL_I2C_MspInit+0x88>)
 8004f70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f74:	6413      	str	r3, [r2, #64]	; 0x40
 8004f76:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <HAL_I2C_MspInit+0x88>)
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004f82:	bf00      	nop
 8004f84:	3728      	adds	r7, #40	; 0x28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40005400 	.word	0x40005400
 8004f90:	40023800 	.word	0x40023800
 8004f94:	40020400 	.word	0x40020400

08004f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08e      	sub	sp, #56	; 0x38
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	605a      	str	r2, [r3, #4]
 8004faa:	609a      	str	r2, [r3, #8]
 8004fac:	60da      	str	r2, [r3, #12]
 8004fae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a4b      	ldr	r2, [pc, #300]	; (80050e4 <HAL_UART_MspInit+0x14c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d12d      	bne.n	8005016 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004fba:	2300      	movs	r3, #0
 8004fbc:	623b      	str	r3, [r7, #32]
 8004fbe:	4b4a      	ldr	r3, [pc, #296]	; (80050e8 <HAL_UART_MspInit+0x150>)
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc2:	4a49      	ldr	r2, [pc, #292]	; (80050e8 <HAL_UART_MspInit+0x150>)
 8004fc4:	f043 0310 	orr.w	r3, r3, #16
 8004fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8004fca:	4b47      	ldr	r3, [pc, #284]	; (80050e8 <HAL_UART_MspInit+0x150>)
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fce:	f003 0310 	and.w	r3, r3, #16
 8004fd2:	623b      	str	r3, [r7, #32]
 8004fd4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	61fb      	str	r3, [r7, #28]
 8004fda:	4b43      	ldr	r3, [pc, #268]	; (80050e8 <HAL_UART_MspInit+0x150>)
 8004fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fde:	4a42      	ldr	r2, [pc, #264]	; (80050e8 <HAL_UART_MspInit+0x150>)
 8004fe0:	f043 0301 	orr.w	r3, r3, #1
 8004fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fe6:	4b40      	ldr	r3, [pc, #256]	; (80050e8 <HAL_UART_MspInit+0x150>)
 8004fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	61fb      	str	r3, [r7, #28]
 8004ff0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004ff2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005000:	2303      	movs	r3, #3
 8005002:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005004:	2307      	movs	r3, #7
 8005006:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800500c:	4619      	mov	r1, r3
 800500e:	4837      	ldr	r0, [pc, #220]	; (80050ec <HAL_UART_MspInit+0x154>)
 8005010:	f7fb fbc2 	bl	8000798 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005014:	e062      	b.n	80050dc <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART2)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a35      	ldr	r2, [pc, #212]	; (80050f0 <HAL_UART_MspInit+0x158>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d12c      	bne.n	800507a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005020:	2300      	movs	r3, #0
 8005022:	61bb      	str	r3, [r7, #24]
 8005024:	4b30      	ldr	r3, [pc, #192]	; (80050e8 <HAL_UART_MspInit+0x150>)
 8005026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005028:	4a2f      	ldr	r2, [pc, #188]	; (80050e8 <HAL_UART_MspInit+0x150>)
 800502a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800502e:	6413      	str	r3, [r2, #64]	; 0x40
 8005030:	4b2d      	ldr	r3, [pc, #180]	; (80050e8 <HAL_UART_MspInit+0x150>)
 8005032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005038:	61bb      	str	r3, [r7, #24]
 800503a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	4b29      	ldr	r3, [pc, #164]	; (80050e8 <HAL_UART_MspInit+0x150>)
 8005042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005044:	4a28      	ldr	r2, [pc, #160]	; (80050e8 <HAL_UART_MspInit+0x150>)
 8005046:	f043 0301 	orr.w	r3, r3, #1
 800504a:	6313      	str	r3, [r2, #48]	; 0x30
 800504c:	4b26      	ldr	r3, [pc, #152]	; (80050e8 <HAL_UART_MspInit+0x150>)
 800504e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	617b      	str	r3, [r7, #20]
 8005056:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005058:	230c      	movs	r3, #12
 800505a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800505c:	2302      	movs	r3, #2
 800505e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005060:	2300      	movs	r3, #0
 8005062:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005064:	2300      	movs	r3, #0
 8005066:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005068:	2307      	movs	r3, #7
 800506a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800506c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005070:	4619      	mov	r1, r3
 8005072:	481e      	ldr	r0, [pc, #120]	; (80050ec <HAL_UART_MspInit+0x154>)
 8005074:	f7fb fb90 	bl	8000798 <HAL_GPIO_Init>
}
 8005078:	e030      	b.n	80050dc <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a1d      	ldr	r2, [pc, #116]	; (80050f4 <HAL_UART_MspInit+0x15c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d12b      	bne.n	80050dc <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005084:	2300      	movs	r3, #0
 8005086:	613b      	str	r3, [r7, #16]
 8005088:	4b17      	ldr	r3, [pc, #92]	; (80050e8 <HAL_UART_MspInit+0x150>)
 800508a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508c:	4a16      	ldr	r2, [pc, #88]	; (80050e8 <HAL_UART_MspInit+0x150>)
 800508e:	f043 0320 	orr.w	r3, r3, #32
 8005092:	6453      	str	r3, [r2, #68]	; 0x44
 8005094:	4b14      	ldr	r3, [pc, #80]	; (80050e8 <HAL_UART_MspInit+0x150>)
 8005096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005098:	f003 0320 	and.w	r3, r3, #32
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050a0:	2300      	movs	r3, #0
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	4b10      	ldr	r3, [pc, #64]	; (80050e8 <HAL_UART_MspInit+0x150>)
 80050a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a8:	4a0f      	ldr	r2, [pc, #60]	; (80050e8 <HAL_UART_MspInit+0x150>)
 80050aa:	f043 0304 	orr.w	r3, r3, #4
 80050ae:	6313      	str	r3, [r2, #48]	; 0x30
 80050b0:	4b0d      	ldr	r3, [pc, #52]	; (80050e8 <HAL_UART_MspInit+0x150>)
 80050b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80050bc:	23c0      	movs	r3, #192	; 0xc0
 80050be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c0:	2302      	movs	r3, #2
 80050c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c4:	2300      	movs	r3, #0
 80050c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050c8:	2303      	movs	r3, #3
 80050ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80050cc:	2308      	movs	r3, #8
 80050ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050d4:	4619      	mov	r1, r3
 80050d6:	4808      	ldr	r0, [pc, #32]	; (80050f8 <HAL_UART_MspInit+0x160>)
 80050d8:	f7fb fb5e 	bl	8000798 <HAL_GPIO_Init>
}
 80050dc:	bf00      	nop
 80050de:	3738      	adds	r7, #56	; 0x38
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40011000 	.word	0x40011000
 80050e8:	40023800 	.word	0x40023800
 80050ec:	40020000 	.word	0x40020000
 80050f0:	40004400 	.word	0x40004400
 80050f4:	40011400 	.word	0x40011400
 80050f8:	40020800 	.word	0x40020800

080050fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005100:	bf00      	nop
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800510a:	b480      	push	{r7}
 800510c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800510e:	e7fe      	b.n	800510e <HardFault_Handler+0x4>

08005110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005114:	e7fe      	b.n	8005114 <MemManage_Handler+0x4>

08005116 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005116:	b480      	push	{r7}
 8005118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800511a:	e7fe      	b.n	800511a <BusFault_Handler+0x4>

0800511c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005120:	e7fe      	b.n	8005120 <UsageFault_Handler+0x4>

08005122 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005122:	b480      	push	{r7}
 8005124:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005126:	bf00      	nop
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005134:	f7fb fa2a 	bl	800058c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005138:	f7fe fae6 	bl	8003708 <xTaskGetSchedulerState>
 800513c:	4603      	mov	r3, r0
 800513e:	2b01      	cmp	r3, #1
 8005140:	d001      	beq.n	8005146 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8005142:	f7ff f8d1 	bl	80042e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005146:	bf00      	nop
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005150:	4b16      	ldr	r3, [pc, #88]	; (80051ac <SystemInit+0x60>)
 8005152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005156:	4a15      	ldr	r2, [pc, #84]	; (80051ac <SystemInit+0x60>)
 8005158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800515c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005160:	4b13      	ldr	r3, [pc, #76]	; (80051b0 <SystemInit+0x64>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a12      	ldr	r2, [pc, #72]	; (80051b0 <SystemInit+0x64>)
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800516c:	4b10      	ldr	r3, [pc, #64]	; (80051b0 <SystemInit+0x64>)
 800516e:	2200      	movs	r2, #0
 8005170:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005172:	4b0f      	ldr	r3, [pc, #60]	; (80051b0 <SystemInit+0x64>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a0e      	ldr	r2, [pc, #56]	; (80051b0 <SystemInit+0x64>)
 8005178:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800517c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005180:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005182:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <SystemInit+0x64>)
 8005184:	4a0b      	ldr	r2, [pc, #44]	; (80051b4 <SystemInit+0x68>)
 8005186:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005188:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <SystemInit+0x64>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a08      	ldr	r2, [pc, #32]	; (80051b0 <SystemInit+0x64>)
 800518e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005192:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005194:	4b06      	ldr	r3, [pc, #24]	; (80051b0 <SystemInit+0x64>)
 8005196:	2200      	movs	r2, #0
 8005198:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800519a:	4b04      	ldr	r3, [pc, #16]	; (80051ac <SystemInit+0x60>)
 800519c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80051a0:	609a      	str	r2, [r3, #8]
#endif
}
 80051a2:	bf00      	nop
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	e000ed00 	.word	0xe000ed00
 80051b0:	40023800 	.word	0x40023800
 80051b4:	24003010 	.word	0x24003010

080051b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80051b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80051f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80051bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80051be:	e003      	b.n	80051c8 <LoopCopyDataInit>

080051c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80051c0:	4b0c      	ldr	r3, [pc, #48]	; (80051f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80051c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80051c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80051c6:	3104      	adds	r1, #4

080051c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80051c8:	480b      	ldr	r0, [pc, #44]	; (80051f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80051ca:	4b0c      	ldr	r3, [pc, #48]	; (80051fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80051cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80051ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80051d0:	d3f6      	bcc.n	80051c0 <CopyDataInit>
  ldr  r2, =_sbss
 80051d2:	4a0b      	ldr	r2, [pc, #44]	; (8005200 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80051d4:	e002      	b.n	80051dc <LoopFillZerobss>

080051d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80051d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80051d8:	f842 3b04 	str.w	r3, [r2], #4

080051dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80051dc:	4b09      	ldr	r3, [pc, #36]	; (8005204 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80051de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80051e0:	d3f9      	bcc.n	80051d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80051e2:	f7ff ffb3 	bl	800514c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80051e6:	f000 f811 	bl	800520c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80051ea:	f7ff fb41 	bl	8004870 <main>
  bx  lr    
 80051ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80051f0:	20017fff 	.word	0x20017fff
  ldr  r3, =_sidata
 80051f4:	08005330 	.word	0x08005330
  ldr  r0, =_sdata
 80051f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80051fc:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8005200:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8005204:	20004bd4 	.word	0x20004bd4

08005208 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005208:	e7fe      	b.n	8005208 <ADC_IRQHandler>
	...

0800520c <__libc_init_array>:
 800520c:	b570      	push	{r4, r5, r6, lr}
 800520e:	4d0d      	ldr	r5, [pc, #52]	; (8005244 <__libc_init_array+0x38>)
 8005210:	4c0d      	ldr	r4, [pc, #52]	; (8005248 <__libc_init_array+0x3c>)
 8005212:	1b64      	subs	r4, r4, r5
 8005214:	10a4      	asrs	r4, r4, #2
 8005216:	2600      	movs	r6, #0
 8005218:	42a6      	cmp	r6, r4
 800521a:	d109      	bne.n	8005230 <__libc_init_array+0x24>
 800521c:	4d0b      	ldr	r5, [pc, #44]	; (800524c <__libc_init_array+0x40>)
 800521e:	4c0c      	ldr	r4, [pc, #48]	; (8005250 <__libc_init_array+0x44>)
 8005220:	f000 f82e 	bl	8005280 <_init>
 8005224:	1b64      	subs	r4, r4, r5
 8005226:	10a4      	asrs	r4, r4, #2
 8005228:	2600      	movs	r6, #0
 800522a:	42a6      	cmp	r6, r4
 800522c:	d105      	bne.n	800523a <__libc_init_array+0x2e>
 800522e:	bd70      	pop	{r4, r5, r6, pc}
 8005230:	f855 3b04 	ldr.w	r3, [r5], #4
 8005234:	4798      	blx	r3
 8005236:	3601      	adds	r6, #1
 8005238:	e7ee      	b.n	8005218 <__libc_init_array+0xc>
 800523a:	f855 3b04 	ldr.w	r3, [r5], #4
 800523e:	4798      	blx	r3
 8005240:	3601      	adds	r6, #1
 8005242:	e7f2      	b.n	800522a <__libc_init_array+0x1e>
 8005244:	08005328 	.word	0x08005328
 8005248:	08005328 	.word	0x08005328
 800524c:	08005328 	.word	0x08005328
 8005250:	0800532c 	.word	0x0800532c

08005254 <memcpy>:
 8005254:	440a      	add	r2, r1
 8005256:	4291      	cmp	r1, r2
 8005258:	f100 33ff 	add.w	r3, r0, #4294967295
 800525c:	d100      	bne.n	8005260 <memcpy+0xc>
 800525e:	4770      	bx	lr
 8005260:	b510      	push	{r4, lr}
 8005262:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005266:	f803 4f01 	strb.w	r4, [r3, #1]!
 800526a:	4291      	cmp	r1, r2
 800526c:	d1f9      	bne.n	8005262 <memcpy+0xe>
 800526e:	bd10      	pop	{r4, pc}

08005270 <memset>:
 8005270:	4402      	add	r2, r0
 8005272:	4603      	mov	r3, r0
 8005274:	4293      	cmp	r3, r2
 8005276:	d100      	bne.n	800527a <memset+0xa>
 8005278:	4770      	bx	lr
 800527a:	f803 1b01 	strb.w	r1, [r3], #1
 800527e:	e7f9      	b.n	8005274 <memset+0x4>

08005280 <_init>:
 8005280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005282:	bf00      	nop
 8005284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005286:	bc08      	pop	{r3}
 8005288:	469e      	mov	lr, r3
 800528a:	4770      	bx	lr

0800528c <_fini>:
 800528c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528e:	bf00      	nop
 8005290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005292:	bc08      	pop	{r3}
 8005294:	469e      	mov	lr, r3
 8005296:	4770      	bx	lr
