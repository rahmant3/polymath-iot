
UART_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007088  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08007228  08007228  00017228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800730c  0800730c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800730c  0800730c  0001730c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007314  08007314  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007314  08007314  00017314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007318  08007318  00017318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800731c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be0  20000080  0800739c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c60  0800739c  00024c60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019919  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000344b  00000000  00000000  000399c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  0003ce18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  0003dfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188d9  00000000  00000000  0003f088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144bf  00000000  00000000  00057961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009244c  00000000  00000000  0006be20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fe26c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e50  00000000  00000000  000fe2c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007210 	.word	0x08007210

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08007210 	.word	0x08007210

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_d2f>:
 800089c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008a4:	bf24      	itt	cs
 80008a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008ae:	d90d      	bls.n	80008cc <__aeabi_d2f+0x30>
 80008b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008c4:	bf08      	it	eq
 80008c6:	f020 0001 	biceq.w	r0, r0, #1
 80008ca:	4770      	bx	lr
 80008cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008d0:	d121      	bne.n	8000916 <__aeabi_d2f+0x7a>
 80008d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008d6:	bfbc      	itt	lt
 80008d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008dc:	4770      	bxlt	lr
 80008de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008e6:	f1c2 0218 	rsb	r2, r2, #24
 80008ea:	f1c2 0c20 	rsb	ip, r2, #32
 80008ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80008f2:	fa20 f002 	lsr.w	r0, r0, r2
 80008f6:	bf18      	it	ne
 80008f8:	f040 0001 	orrne.w	r0, r0, #1
 80008fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000900:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000904:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000908:	ea40 000c 	orr.w	r0, r0, ip
 800090c:	fa23 f302 	lsr.w	r3, r3, r2
 8000910:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000914:	e7cc      	b.n	80008b0 <__aeabi_d2f+0x14>
 8000916:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800091a:	d107      	bne.n	800092c <__aeabi_d2f+0x90>
 800091c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000920:	bf1e      	ittt	ne
 8000922:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000926:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800092a:	4770      	bxne	lr
 800092c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000930:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000934:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_uldivmod>:
 800093c:	b953      	cbnz	r3, 8000954 <__aeabi_uldivmod+0x18>
 800093e:	b94a      	cbnz	r2, 8000954 <__aeabi_uldivmod+0x18>
 8000940:	2900      	cmp	r1, #0
 8000942:	bf08      	it	eq
 8000944:	2800      	cmpeq	r0, #0
 8000946:	bf1c      	itt	ne
 8000948:	f04f 31ff 	movne.w	r1, #4294967295
 800094c:	f04f 30ff 	movne.w	r0, #4294967295
 8000950:	f000 b96e 	b.w	8000c30 <__aeabi_idiv0>
 8000954:	f1ad 0c08 	sub.w	ip, sp, #8
 8000958:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800095c:	f000 f806 	bl	800096c <__udivmoddi4>
 8000960:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000968:	b004      	add	sp, #16
 800096a:	4770      	bx	lr

0800096c <__udivmoddi4>:
 800096c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000970:	9d08      	ldr	r5, [sp, #32]
 8000972:	4604      	mov	r4, r0
 8000974:	468c      	mov	ip, r1
 8000976:	2b00      	cmp	r3, #0
 8000978:	f040 8083 	bne.w	8000a82 <__udivmoddi4+0x116>
 800097c:	428a      	cmp	r2, r1
 800097e:	4617      	mov	r7, r2
 8000980:	d947      	bls.n	8000a12 <__udivmoddi4+0xa6>
 8000982:	fab2 f282 	clz	r2, r2
 8000986:	b142      	cbz	r2, 800099a <__udivmoddi4+0x2e>
 8000988:	f1c2 0020 	rsb	r0, r2, #32
 800098c:	fa24 f000 	lsr.w	r0, r4, r0
 8000990:	4091      	lsls	r1, r2
 8000992:	4097      	lsls	r7, r2
 8000994:	ea40 0c01 	orr.w	ip, r0, r1
 8000998:	4094      	lsls	r4, r2
 800099a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800099e:	0c23      	lsrs	r3, r4, #16
 80009a0:	fbbc f6f8 	udiv	r6, ip, r8
 80009a4:	fa1f fe87 	uxth.w	lr, r7
 80009a8:	fb08 c116 	mls	r1, r8, r6, ip
 80009ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009b0:	fb06 f10e 	mul.w	r1, r6, lr
 80009b4:	4299      	cmp	r1, r3
 80009b6:	d909      	bls.n	80009cc <__udivmoddi4+0x60>
 80009b8:	18fb      	adds	r3, r7, r3
 80009ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80009be:	f080 8119 	bcs.w	8000bf4 <__udivmoddi4+0x288>
 80009c2:	4299      	cmp	r1, r3
 80009c4:	f240 8116 	bls.w	8000bf4 <__udivmoddi4+0x288>
 80009c8:	3e02      	subs	r6, #2
 80009ca:	443b      	add	r3, r7
 80009cc:	1a5b      	subs	r3, r3, r1
 80009ce:	b2a4      	uxth	r4, r4
 80009d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d4:	fb08 3310 	mls	r3, r8, r0, r3
 80009d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80009e0:	45a6      	cmp	lr, r4
 80009e2:	d909      	bls.n	80009f8 <__udivmoddi4+0x8c>
 80009e4:	193c      	adds	r4, r7, r4
 80009e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80009ea:	f080 8105 	bcs.w	8000bf8 <__udivmoddi4+0x28c>
 80009ee:	45a6      	cmp	lr, r4
 80009f0:	f240 8102 	bls.w	8000bf8 <__udivmoddi4+0x28c>
 80009f4:	3802      	subs	r0, #2
 80009f6:	443c      	add	r4, r7
 80009f8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009fc:	eba4 040e 	sub.w	r4, r4, lr
 8000a00:	2600      	movs	r6, #0
 8000a02:	b11d      	cbz	r5, 8000a0c <__udivmoddi4+0xa0>
 8000a04:	40d4      	lsrs	r4, r2
 8000a06:	2300      	movs	r3, #0
 8000a08:	e9c5 4300 	strd	r4, r3, [r5]
 8000a0c:	4631      	mov	r1, r6
 8000a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a12:	b902      	cbnz	r2, 8000a16 <__udivmoddi4+0xaa>
 8000a14:	deff      	udf	#255	; 0xff
 8000a16:	fab2 f282 	clz	r2, r2
 8000a1a:	2a00      	cmp	r2, #0
 8000a1c:	d150      	bne.n	8000ac0 <__udivmoddi4+0x154>
 8000a1e:	1bcb      	subs	r3, r1, r7
 8000a20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a24:	fa1f f887 	uxth.w	r8, r7
 8000a28:	2601      	movs	r6, #1
 8000a2a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a2e:	0c21      	lsrs	r1, r4, #16
 8000a30:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a38:	fb08 f30c 	mul.w	r3, r8, ip
 8000a3c:	428b      	cmp	r3, r1
 8000a3e:	d907      	bls.n	8000a50 <__udivmoddi4+0xe4>
 8000a40:	1879      	adds	r1, r7, r1
 8000a42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000a46:	d202      	bcs.n	8000a4e <__udivmoddi4+0xe2>
 8000a48:	428b      	cmp	r3, r1
 8000a4a:	f200 80e9 	bhi.w	8000c20 <__udivmoddi4+0x2b4>
 8000a4e:	4684      	mov	ip, r0
 8000a50:	1ac9      	subs	r1, r1, r3
 8000a52:	b2a3      	uxth	r3, r4
 8000a54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a58:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a5c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a60:	fb08 f800 	mul.w	r8, r8, r0
 8000a64:	45a0      	cmp	r8, r4
 8000a66:	d907      	bls.n	8000a78 <__udivmoddi4+0x10c>
 8000a68:	193c      	adds	r4, r7, r4
 8000a6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a6e:	d202      	bcs.n	8000a76 <__udivmoddi4+0x10a>
 8000a70:	45a0      	cmp	r8, r4
 8000a72:	f200 80d9 	bhi.w	8000c28 <__udivmoddi4+0x2bc>
 8000a76:	4618      	mov	r0, r3
 8000a78:	eba4 0408 	sub.w	r4, r4, r8
 8000a7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a80:	e7bf      	b.n	8000a02 <__udivmoddi4+0x96>
 8000a82:	428b      	cmp	r3, r1
 8000a84:	d909      	bls.n	8000a9a <__udivmoddi4+0x12e>
 8000a86:	2d00      	cmp	r5, #0
 8000a88:	f000 80b1 	beq.w	8000bee <__udivmoddi4+0x282>
 8000a8c:	2600      	movs	r6, #0
 8000a8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a92:	4630      	mov	r0, r6
 8000a94:	4631      	mov	r1, r6
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	fab3 f683 	clz	r6, r3
 8000a9e:	2e00      	cmp	r6, #0
 8000aa0:	d14a      	bne.n	8000b38 <__udivmoddi4+0x1cc>
 8000aa2:	428b      	cmp	r3, r1
 8000aa4:	d302      	bcc.n	8000aac <__udivmoddi4+0x140>
 8000aa6:	4282      	cmp	r2, r0
 8000aa8:	f200 80b8 	bhi.w	8000c1c <__udivmoddi4+0x2b0>
 8000aac:	1a84      	subs	r4, r0, r2
 8000aae:	eb61 0103 	sbc.w	r1, r1, r3
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	468c      	mov	ip, r1
 8000ab6:	2d00      	cmp	r5, #0
 8000ab8:	d0a8      	beq.n	8000a0c <__udivmoddi4+0xa0>
 8000aba:	e9c5 4c00 	strd	r4, ip, [r5]
 8000abe:	e7a5      	b.n	8000a0c <__udivmoddi4+0xa0>
 8000ac0:	f1c2 0320 	rsb	r3, r2, #32
 8000ac4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ac8:	4097      	lsls	r7, r2
 8000aca:	fa01 f002 	lsl.w	r0, r1, r2
 8000ace:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ad2:	40d9      	lsrs	r1, r3
 8000ad4:	4330      	orrs	r0, r6
 8000ad6:	0c03      	lsrs	r3, r0, #16
 8000ad8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000adc:	fa1f f887 	uxth.w	r8, r7
 8000ae0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ae4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae8:	fb06 f108 	mul.w	r1, r6, r8
 8000aec:	4299      	cmp	r1, r3
 8000aee:	fa04 f402 	lsl.w	r4, r4, r2
 8000af2:	d909      	bls.n	8000b08 <__udivmoddi4+0x19c>
 8000af4:	18fb      	adds	r3, r7, r3
 8000af6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000afa:	f080 808d 	bcs.w	8000c18 <__udivmoddi4+0x2ac>
 8000afe:	4299      	cmp	r1, r3
 8000b00:	f240 808a 	bls.w	8000c18 <__udivmoddi4+0x2ac>
 8000b04:	3e02      	subs	r6, #2
 8000b06:	443b      	add	r3, r7
 8000b08:	1a5b      	subs	r3, r3, r1
 8000b0a:	b281      	uxth	r1, r0
 8000b0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b18:	fb00 f308 	mul.w	r3, r0, r8
 8000b1c:	428b      	cmp	r3, r1
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x1c4>
 8000b20:	1879      	adds	r1, r7, r1
 8000b22:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b26:	d273      	bcs.n	8000c10 <__udivmoddi4+0x2a4>
 8000b28:	428b      	cmp	r3, r1
 8000b2a:	d971      	bls.n	8000c10 <__udivmoddi4+0x2a4>
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	4439      	add	r1, r7
 8000b30:	1acb      	subs	r3, r1, r3
 8000b32:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b36:	e778      	b.n	8000a2a <__udivmoddi4+0xbe>
 8000b38:	f1c6 0c20 	rsb	ip, r6, #32
 8000b3c:	fa03 f406 	lsl.w	r4, r3, r6
 8000b40:	fa22 f30c 	lsr.w	r3, r2, ip
 8000b44:	431c      	orrs	r4, r3
 8000b46:	fa20 f70c 	lsr.w	r7, r0, ip
 8000b4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000b4e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b52:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b56:	431f      	orrs	r7, r3
 8000b58:	0c3b      	lsrs	r3, r7, #16
 8000b5a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b5e:	fa1f f884 	uxth.w	r8, r4
 8000b62:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b66:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b6a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b6e:	458a      	cmp	sl, r1
 8000b70:	fa02 f206 	lsl.w	r2, r2, r6
 8000b74:	fa00 f306 	lsl.w	r3, r0, r6
 8000b78:	d908      	bls.n	8000b8c <__udivmoddi4+0x220>
 8000b7a:	1861      	adds	r1, r4, r1
 8000b7c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b80:	d248      	bcs.n	8000c14 <__udivmoddi4+0x2a8>
 8000b82:	458a      	cmp	sl, r1
 8000b84:	d946      	bls.n	8000c14 <__udivmoddi4+0x2a8>
 8000b86:	f1a9 0902 	sub.w	r9, r9, #2
 8000b8a:	4421      	add	r1, r4
 8000b8c:	eba1 010a 	sub.w	r1, r1, sl
 8000b90:	b2bf      	uxth	r7, r7
 8000b92:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b96:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b9a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b9e:	fb00 f808 	mul.w	r8, r0, r8
 8000ba2:	45b8      	cmp	r8, r7
 8000ba4:	d907      	bls.n	8000bb6 <__udivmoddi4+0x24a>
 8000ba6:	19e7      	adds	r7, r4, r7
 8000ba8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bac:	d22e      	bcs.n	8000c0c <__udivmoddi4+0x2a0>
 8000bae:	45b8      	cmp	r8, r7
 8000bb0:	d92c      	bls.n	8000c0c <__udivmoddi4+0x2a0>
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	4427      	add	r7, r4
 8000bb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bba:	eba7 0708 	sub.w	r7, r7, r8
 8000bbe:	fba0 8902 	umull	r8, r9, r0, r2
 8000bc2:	454f      	cmp	r7, r9
 8000bc4:	46c6      	mov	lr, r8
 8000bc6:	4649      	mov	r1, r9
 8000bc8:	d31a      	bcc.n	8000c00 <__udivmoddi4+0x294>
 8000bca:	d017      	beq.n	8000bfc <__udivmoddi4+0x290>
 8000bcc:	b15d      	cbz	r5, 8000be6 <__udivmoddi4+0x27a>
 8000bce:	ebb3 020e 	subs.w	r2, r3, lr
 8000bd2:	eb67 0701 	sbc.w	r7, r7, r1
 8000bd6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000bda:	40f2      	lsrs	r2, r6
 8000bdc:	ea4c 0202 	orr.w	r2, ip, r2
 8000be0:	40f7      	lsrs	r7, r6
 8000be2:	e9c5 2700 	strd	r2, r7, [r5]
 8000be6:	2600      	movs	r6, #0
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	462e      	mov	r6, r5
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	e70b      	b.n	8000a0c <__udivmoddi4+0xa0>
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	e6e9      	b.n	80009cc <__udivmoddi4+0x60>
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	e6fd      	b.n	80009f8 <__udivmoddi4+0x8c>
 8000bfc:	4543      	cmp	r3, r8
 8000bfe:	d2e5      	bcs.n	8000bcc <__udivmoddi4+0x260>
 8000c00:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c04:	eb69 0104 	sbc.w	r1, r9, r4
 8000c08:	3801      	subs	r0, #1
 8000c0a:	e7df      	b.n	8000bcc <__udivmoddi4+0x260>
 8000c0c:	4608      	mov	r0, r1
 8000c0e:	e7d2      	b.n	8000bb6 <__udivmoddi4+0x24a>
 8000c10:	4660      	mov	r0, ip
 8000c12:	e78d      	b.n	8000b30 <__udivmoddi4+0x1c4>
 8000c14:	4681      	mov	r9, r0
 8000c16:	e7b9      	b.n	8000b8c <__udivmoddi4+0x220>
 8000c18:	4666      	mov	r6, ip
 8000c1a:	e775      	b.n	8000b08 <__udivmoddi4+0x19c>
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	e74a      	b.n	8000ab6 <__udivmoddi4+0x14a>
 8000c20:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c24:	4439      	add	r1, r7
 8000c26:	e713      	b.n	8000a50 <__udivmoddi4+0xe4>
 8000c28:	3802      	subs	r0, #2
 8000c2a:	443c      	add	r4, r7
 8000c2c:	e724      	b.n	8000a78 <__udivmoddi4+0x10c>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_idiv0>:
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <HAL_Init+0x40>)
 8000c3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <HAL_Init+0x40>)
 8000c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <HAL_Init+0x40>)
 8000c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	f000 f931 	bl	8000ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c62:	200f      	movs	r0, #15
 8000c64:	f000 f808 	bl	8000c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c68:	f005 fb66 	bl	8006338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023c00 	.word	0x40023c00

08000c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_InitTick+0x54>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_InitTick+0x58>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 f93b 	bl	8000f12 <HAL_SYSTICK_Config>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00e      	b.n	8000cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b0f      	cmp	r3, #15
 8000caa:	d80a      	bhi.n	8000cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cac:	2200      	movs	r2, #0
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f000 f911 	bl	8000eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb8:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <HAL_InitTick+0x5c>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e000      	b.n	8000cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000014 	.word	0x20000014
 8000cd0:	20000004 	.word	0x20000004
 8000cd4:	20000000 	.word	0x20000000

08000cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x20>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x24>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <HAL_IncTick+0x24>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000004 	.word	0x20000004
 8000cfc:	20004a4c 	.word	0x20004a4c

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <HAL_GetTick+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20004a4c 	.word	0x20004a4c

08000d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d20:	f7ff ffee 	bl	8000d00 <HAL_GetTick>
 8000d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d30:	d005      	beq.n	8000d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <HAL_Delay+0x44>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d3e:	bf00      	nop
 8000d40:	f7ff ffde 	bl	8000d00 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d8f7      	bhi.n	8000d40 <HAL_Delay+0x28>
  {
  }
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000004 	.word	0x20000004

08000d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d92:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	60d3      	str	r3, [r2, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	f003 0307 	and.w	r3, r3, #7
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	db0a      	blt.n	8000dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	490c      	ldr	r1, [pc, #48]	; (8000e10 <__NVIC_SetPriority+0x4c>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	0112      	lsls	r2, r2, #4
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	440b      	add	r3, r1
 8000de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dec:	e00a      	b.n	8000e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	4908      	ldr	r1, [pc, #32]	; (8000e14 <__NVIC_SetPriority+0x50>)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	3b04      	subs	r3, #4
 8000dfc:	0112      	lsls	r2, r2, #4
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	440b      	add	r3, r1
 8000e02:	761a      	strb	r2, [r3, #24]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000e100 	.word	0xe000e100
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	; 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f1c3 0307 	rsb	r3, r3, #7
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	bf28      	it	cs
 8000e36:	2304      	movcs	r3, #4
 8000e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	2b06      	cmp	r3, #6
 8000e40:	d902      	bls.n	8000e48 <NVIC_EncodePriority+0x30>
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3b03      	subs	r3, #3
 8000e46:	e000      	b.n	8000e4a <NVIC_EncodePriority+0x32>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43da      	mvns	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e60:	f04f 31ff 	mov.w	r1, #4294967295
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	43d9      	mvns	r1, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	4313      	orrs	r3, r2
         );
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3724      	adds	r7, #36	; 0x24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
	...

08000e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e90:	d301      	bcc.n	8000e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e92:	2301      	movs	r3, #1
 8000e94:	e00f      	b.n	8000eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e96:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <SysTick_Config+0x40>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9e:	210f      	movs	r1, #15
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea4:	f7ff ff8e 	bl	8000dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <SysTick_Config+0x40>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eae:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <SysTick_Config+0x40>)
 8000eb0:	2207      	movs	r2, #7
 8000eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	e000e010 	.word	0xe000e010

08000ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ff47 	bl	8000d60 <__NVIC_SetPriorityGrouping>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
 8000ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eec:	f7ff ff5c 	bl	8000da8 <__NVIC_GetPriorityGrouping>
 8000ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	68b9      	ldr	r1, [r7, #8]
 8000ef6:	6978      	ldr	r0, [r7, #20]
 8000ef8:	f7ff ff8e 	bl	8000e18 <NVIC_EncodePriority>
 8000efc:	4602      	mov	r2, r0
 8000efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f02:	4611      	mov	r1, r2
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff5d 	bl	8000dc4 <__NVIC_SetPriority>
}
 8000f0a:	bf00      	nop
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ffb0 	bl	8000e80 <SysTick_Config>
 8000f20:	4603      	mov	r3, r0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
 8000f46:	e159      	b.n	80011fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f48:	2201      	movs	r2, #1
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	f040 8148 	bne.w	80011f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d005      	beq.n	8000f7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d130      	bne.n	8000fe0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	68da      	ldr	r2, [r3, #12]
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	091b      	lsrs	r3, r3, #4
 8000fca:	f003 0201 	and.w	r2, r3, #1
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d017      	beq.n	800101c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d123      	bne.n	8001070 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	08da      	lsrs	r2, r3, #3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3208      	adds	r2, #8
 8001030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001034:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	f003 0307 	and.w	r3, r3, #7
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	691a      	ldr	r2, [r3, #16]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	08da      	lsrs	r2, r3, #3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3208      	adds	r2, #8
 800106a:	69b9      	ldr	r1, [r7, #24]
 800106c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0203 	and.w	r2, r3, #3
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f000 80a2 	beq.w	80011f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	4b57      	ldr	r3, [pc, #348]	; (8001214 <HAL_GPIO_Init+0x2e8>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	4a56      	ldr	r2, [pc, #344]	; (8001214 <HAL_GPIO_Init+0x2e8>)
 80010bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c0:	6453      	str	r3, [r2, #68]	; 0x44
 80010c2:	4b54      	ldr	r3, [pc, #336]	; (8001214 <HAL_GPIO_Init+0x2e8>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ce:	4a52      	ldr	r2, [pc, #328]	; (8001218 <HAL_GPIO_Init+0x2ec>)
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	089b      	lsrs	r3, r3, #2
 80010d4:	3302      	adds	r3, #2
 80010d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	220f      	movs	r2, #15
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a49      	ldr	r2, [pc, #292]	; (800121c <HAL_GPIO_Init+0x2f0>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d019      	beq.n	800112e <HAL_GPIO_Init+0x202>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a48      	ldr	r2, [pc, #288]	; (8001220 <HAL_GPIO_Init+0x2f4>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d013      	beq.n	800112a <HAL_GPIO_Init+0x1fe>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a47      	ldr	r2, [pc, #284]	; (8001224 <HAL_GPIO_Init+0x2f8>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d00d      	beq.n	8001126 <HAL_GPIO_Init+0x1fa>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a46      	ldr	r2, [pc, #280]	; (8001228 <HAL_GPIO_Init+0x2fc>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d007      	beq.n	8001122 <HAL_GPIO_Init+0x1f6>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a45      	ldr	r2, [pc, #276]	; (800122c <HAL_GPIO_Init+0x300>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d101      	bne.n	800111e <HAL_GPIO_Init+0x1f2>
 800111a:	2304      	movs	r3, #4
 800111c:	e008      	b.n	8001130 <HAL_GPIO_Init+0x204>
 800111e:	2307      	movs	r3, #7
 8001120:	e006      	b.n	8001130 <HAL_GPIO_Init+0x204>
 8001122:	2303      	movs	r3, #3
 8001124:	e004      	b.n	8001130 <HAL_GPIO_Init+0x204>
 8001126:	2302      	movs	r3, #2
 8001128:	e002      	b.n	8001130 <HAL_GPIO_Init+0x204>
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <HAL_GPIO_Init+0x204>
 800112e:	2300      	movs	r3, #0
 8001130:	69fa      	ldr	r2, [r7, #28]
 8001132:	f002 0203 	and.w	r2, r2, #3
 8001136:	0092      	lsls	r2, r2, #2
 8001138:	4093      	lsls	r3, r2
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001140:	4935      	ldr	r1, [pc, #212]	; (8001218 <HAL_GPIO_Init+0x2ec>)
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	3302      	adds	r3, #2
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800114e:	4b38      	ldr	r3, [pc, #224]	; (8001230 <HAL_GPIO_Init+0x304>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001172:	4a2f      	ldr	r2, [pc, #188]	; (8001230 <HAL_GPIO_Init+0x304>)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001178:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <HAL_GPIO_Init+0x304>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800119c:	4a24      	ldr	r2, [pc, #144]	; (8001230 <HAL_GPIO_Init+0x304>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a2:	4b23      	ldr	r3, [pc, #140]	; (8001230 <HAL_GPIO_Init+0x304>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c6:	4a1a      	ldr	r2, [pc, #104]	; (8001230 <HAL_GPIO_Init+0x304>)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <HAL_GPIO_Init+0x304>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f0:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <HAL_GPIO_Init+0x304>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3301      	adds	r3, #1
 80011fa:	61fb      	str	r3, [r7, #28]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	2b0f      	cmp	r3, #15
 8001200:	f67f aea2 	bls.w	8000f48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3724      	adds	r7, #36	; 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800
 8001218:	40013800 	.word	0x40013800
 800121c:	40020000 	.word	0x40020000
 8001220:	40020400 	.word	0x40020400
 8001224:	40020800 	.word	0x40020800
 8001228:	40020c00 	.word	0x40020c00
 800122c:	40021000 	.word	0x40021000
 8001230:	40013c00 	.word	0x40013c00

08001234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	807b      	strh	r3, [r7, #2]
 8001240:	4613      	mov	r3, r2
 8001242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001244:	787b      	ldrb	r3, [r7, #1]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124a:	887a      	ldrh	r2, [r7, #2]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001250:	e003      	b.n	800125a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	041a      	lsls	r2, r3, #16
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	619a      	str	r2, [r3, #24]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e12b      	b.n	80014d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d106      	bne.n	8001294 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f005 f87e 	bl	8006390 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2224      	movs	r2, #36	; 0x24
 8001298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 0201 	bic.w	r2, r2, #1
 80012aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012cc:	f001 fbae 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 80012d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	4a81      	ldr	r2, [pc, #516]	; (80014dc <HAL_I2C_Init+0x274>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d807      	bhi.n	80012ec <HAL_I2C_Init+0x84>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4a80      	ldr	r2, [pc, #512]	; (80014e0 <HAL_I2C_Init+0x278>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	bf94      	ite	ls
 80012e4:	2301      	movls	r3, #1
 80012e6:	2300      	movhi	r3, #0
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	e006      	b.n	80012fa <HAL_I2C_Init+0x92>
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4a7d      	ldr	r2, [pc, #500]	; (80014e4 <HAL_I2C_Init+0x27c>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	bf94      	ite	ls
 80012f4:	2301      	movls	r3, #1
 80012f6:	2300      	movhi	r3, #0
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e0e7      	b.n	80014d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4a78      	ldr	r2, [pc, #480]	; (80014e8 <HAL_I2C_Init+0x280>)
 8001306:	fba2 2303 	umull	r2, r3, r2, r3
 800130a:	0c9b      	lsrs	r3, r3, #18
 800130c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68ba      	ldr	r2, [r7, #8]
 800131e:	430a      	orrs	r2, r1
 8001320:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	4a6a      	ldr	r2, [pc, #424]	; (80014dc <HAL_I2C_Init+0x274>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d802      	bhi.n	800133c <HAL_I2C_Init+0xd4>
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	3301      	adds	r3, #1
 800133a:	e009      	b.n	8001350 <HAL_I2C_Init+0xe8>
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001342:	fb02 f303 	mul.w	r3, r2, r3
 8001346:	4a69      	ldr	r2, [pc, #420]	; (80014ec <HAL_I2C_Init+0x284>)
 8001348:	fba2 2303 	umull	r2, r3, r2, r3
 800134c:	099b      	lsrs	r3, r3, #6
 800134e:	3301      	adds	r3, #1
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	430b      	orrs	r3, r1
 8001356:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001362:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	495c      	ldr	r1, [pc, #368]	; (80014dc <HAL_I2C_Init+0x274>)
 800136c:	428b      	cmp	r3, r1
 800136e:	d819      	bhi.n	80013a4 <HAL_I2C_Init+0x13c>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	1e59      	subs	r1, r3, #1
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	fbb1 f3f3 	udiv	r3, r1, r3
 800137e:	1c59      	adds	r1, r3, #1
 8001380:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001384:	400b      	ands	r3, r1
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00a      	beq.n	80013a0 <HAL_I2C_Init+0x138>
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	1e59      	subs	r1, r3, #1
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	fbb1 f3f3 	udiv	r3, r1, r3
 8001398:	3301      	adds	r3, #1
 800139a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800139e:	e051      	b.n	8001444 <HAL_I2C_Init+0x1dc>
 80013a0:	2304      	movs	r3, #4
 80013a2:	e04f      	b.n	8001444 <HAL_I2C_Init+0x1dc>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d111      	bne.n	80013d0 <HAL_I2C_Init+0x168>
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	1e58      	subs	r0, r3, #1
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6859      	ldr	r1, [r3, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	440b      	add	r3, r1
 80013ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80013be:	3301      	adds	r3, #1
 80013c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	bf0c      	ite	eq
 80013c8:	2301      	moveq	r3, #1
 80013ca:	2300      	movne	r3, #0
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	e012      	b.n	80013f6 <HAL_I2C_Init+0x18e>
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	1e58      	subs	r0, r3, #1
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6859      	ldr	r1, [r3, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	440b      	add	r3, r1
 80013de:	0099      	lsls	r1, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80013e6:	3301      	adds	r3, #1
 80013e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	bf0c      	ite	eq
 80013f0:	2301      	moveq	r3, #1
 80013f2:	2300      	movne	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_I2C_Init+0x196>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e022      	b.n	8001444 <HAL_I2C_Init+0x1dc>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10e      	bne.n	8001424 <HAL_I2C_Init+0x1bc>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	1e58      	subs	r0, r3, #1
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6859      	ldr	r1, [r3, #4]
 800140e:	460b      	mov	r3, r1
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	440b      	add	r3, r1
 8001414:	fbb0 f3f3 	udiv	r3, r0, r3
 8001418:	3301      	adds	r3, #1
 800141a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800141e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001422:	e00f      	b.n	8001444 <HAL_I2C_Init+0x1dc>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	1e58      	subs	r0, r3, #1
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6859      	ldr	r1, [r3, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	0099      	lsls	r1, r3, #2
 8001434:	440b      	add	r3, r1
 8001436:	fbb0 f3f3 	udiv	r3, r0, r3
 800143a:	3301      	adds	r3, #1
 800143c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001440:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	6809      	ldr	r1, [r1, #0]
 8001448:	4313      	orrs	r3, r2
 800144a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69da      	ldr	r2, [r3, #28]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	431a      	orrs	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001472:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6911      	ldr	r1, [r2, #16]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68d2      	ldr	r2, [r2, #12]
 800147e:	4311      	orrs	r1, r2
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6812      	ldr	r2, [r2, #0]
 8001484:	430b      	orrs	r3, r1
 8001486:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	695a      	ldr	r2, [r3, #20]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f042 0201 	orr.w	r2, r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2220      	movs	r2, #32
 80014be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	000186a0 	.word	0x000186a0
 80014e0:	001e847f 	.word	0x001e847f
 80014e4:	003d08ff 	.word	0x003d08ff
 80014e8:	431bde83 	.word	0x431bde83
 80014ec:	10624dd3 	.word	0x10624dd3

080014f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af02      	add	r7, sp, #8
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	461a      	mov	r2, r3
 80014fc:	460b      	mov	r3, r1
 80014fe:	817b      	strh	r3, [r7, #10]
 8001500:	4613      	mov	r3, r2
 8001502:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/

	uint32_t tickstart = HAL_GetTick();
 8001504:	f7ff fbfc 	bl	8000d00 <HAL_GetTick>
 8001508:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b20      	cmp	r3, #32
 8001514:	f040 80e0 	bne.w	80016d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2319      	movs	r3, #25
 800151e:	2201      	movs	r2, #1
 8001520:	4970      	ldr	r1, [pc, #448]	; (80016e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f000 fc58 	bl	8001dd8 <I2C_WaitOnFlagUntilTimeout>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800152e:	2302      	movs	r3, #2
 8001530:	e0d3      	b.n	80016da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001538:	2b01      	cmp	r3, #1
 800153a:	d101      	bne.n	8001540 <HAL_I2C_Master_Transmit+0x50>
 800153c:	2302      	movs	r3, #2
 800153e:	e0cc      	b.n	80016da <HAL_I2C_Master_Transmit+0x1ea>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b01      	cmp	r3, #1
 8001554:	d007      	beq.n	8001566 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f042 0201 	orr.w	r2, r2, #1
 8001564:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001574:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2221      	movs	r2, #33	; 0x21
 800157a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2210      	movs	r2, #16
 8001582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2200      	movs	r2, #0
 800158a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	893a      	ldrh	r2, [r7, #8]
 8001596:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800159c:	b29a      	uxth	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4a50      	ldr	r2, [pc, #320]	; (80016e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80015a8:	8979      	ldrh	r1, [r7, #10]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	6a3a      	ldr	r2, [r7, #32]
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f000 fac2 	bl	8001b38 <I2C_MasterRequestWrite>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e08d      	b.n	80016da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80015d4:	e066      	b.n	80016a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	6a39      	ldr	r1, [r7, #32]
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	f000 fcd2 	bl	8001f84 <I2C_WaitOnTXEFlagUntilTimeout>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00d      	beq.n	8001602 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d107      	bne.n	80015fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e06b      	b.n	80016da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	781a      	ldrb	r2, [r3, #0]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800161c:	b29b      	uxth	r3, r3
 800161e:	3b01      	subs	r3, #1
 8001620:	b29a      	uxth	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800162a:	3b01      	subs	r3, #1
 800162c:	b29a      	uxth	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b04      	cmp	r3, #4
 800163e:	d11b      	bne.n	8001678 <HAL_I2C_Master_Transmit+0x188>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001644:	2b00      	cmp	r3, #0
 8001646:	d017      	beq.n	8001678 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	781a      	ldrb	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	1c5a      	adds	r2, r3, #1
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001662:	b29b      	uxth	r3, r3
 8001664:	3b01      	subs	r3, #1
 8001666:	b29a      	uxth	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001670:	3b01      	subs	r3, #1
 8001672:	b29a      	uxth	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	6a39      	ldr	r1, [r7, #32]
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f000 fcc2 	bl	8002006 <I2C_WaitOnBTFFlagUntilTimeout>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d00d      	beq.n	80016a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	2b04      	cmp	r3, #4
 800168e:	d107      	bne.n	80016a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800169e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e01a      	b.n	80016da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d194      	bne.n	80015d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2220      	movs	r2, #32
 80016c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	e000      	b.n	80016da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80016d8:	2302      	movs	r3, #2
  }
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	00100002 	.word	0x00100002
 80016e8:	ffff0000 	.word	0xffff0000

080016ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08c      	sub	sp, #48	; 0x30
 80016f0:	af02      	add	r7, sp, #8
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	461a      	mov	r2, r3
 80016f8:	460b      	mov	r3, r1
 80016fa:	817b      	strh	r3, [r7, #10]
 80016fc:	4613      	mov	r3, r2
 80016fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001700:	f7ff fafe 	bl	8000d00 <HAL_GetTick>
 8001704:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b20      	cmp	r3, #32
 8001710:	f040 820b 	bne.w	8001b2a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2319      	movs	r3, #25
 800171a:	2201      	movs	r2, #1
 800171c:	497c      	ldr	r1, [pc, #496]	; (8001910 <HAL_I2C_Master_Receive+0x224>)
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 fb5a 	bl	8001dd8 <I2C_WaitOnFlagUntilTimeout>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800172a:	2302      	movs	r3, #2
 800172c:	e1fe      	b.n	8001b2c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001734:	2b01      	cmp	r3, #1
 8001736:	d101      	bne.n	800173c <HAL_I2C_Master_Receive+0x50>
 8001738:	2302      	movs	r3, #2
 800173a:	e1f7      	b.n	8001b2c <HAL_I2C_Master_Receive+0x440>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b01      	cmp	r3, #1
 8001750:	d007      	beq.n	8001762 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f042 0201 	orr.w	r2, r2, #1
 8001760:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001770:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2222      	movs	r2, #34	; 0x22
 8001776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2210      	movs	r2, #16
 800177e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	893a      	ldrh	r2, [r7, #8]
 8001792:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001798:	b29a      	uxth	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4a5c      	ldr	r2, [pc, #368]	; (8001914 <HAL_I2C_Master_Receive+0x228>)
 80017a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017a4:	8979      	ldrh	r1, [r7, #10]
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 fa46 	bl	8001c3c <I2C_MasterRequestRead>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e1b8      	b.n	8001b2c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d113      	bne.n	80017ea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	623b      	str	r3, [r7, #32]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	623b      	str	r3, [r7, #32]
 80017d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	e18c      	b.n	8001b04 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d11b      	bne.n	800182a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001800:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	61fb      	str	r3, [r7, #28]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	e16c      	b.n	8001b04 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182e:	2b02      	cmp	r3, #2
 8001830:	d11b      	bne.n	800186a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001840:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001850:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	61bb      	str	r3, [r7, #24]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	61bb      	str	r3, [r7, #24]
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	e14c      	b.n	8001b04 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001878:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001890:	e138      	b.n	8001b04 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001896:	2b03      	cmp	r3, #3
 8001898:	f200 80f1 	bhi.w	8001a7e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d123      	bne.n	80018ec <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f000 fbed 	bl	8002088 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e139      	b.n	8001b2c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	691a      	ldr	r2, [r3, #16]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d4:	3b01      	subs	r3, #1
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	3b01      	subs	r3, #1
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018ea:	e10b      	b.n	8001b04 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d14e      	bne.n	8001992 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018fa:	2200      	movs	r2, #0
 80018fc:	4906      	ldr	r1, [pc, #24]	; (8001918 <HAL_I2C_Master_Receive+0x22c>)
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f000 fa6a 	bl	8001dd8 <I2C_WaitOnFlagUntilTimeout>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d008      	beq.n	800191c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e10e      	b.n	8001b2c <HAL_I2C_Master_Receive+0x440>
 800190e:	bf00      	nop
 8001910:	00100002 	.word	0x00100002
 8001914:	ffff0000 	.word	0xffff0000
 8001918:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800192a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	691a      	ldr	r2, [r3, #16]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001948:	3b01      	subs	r3, #1
 800194a:	b29a      	uxth	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001954:	b29b      	uxth	r3, r3
 8001956:	3b01      	subs	r3, #1
 8001958:	b29a      	uxth	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	691a      	ldr	r2, [r3, #16]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	1c5a      	adds	r2, r3, #1
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800197a:	3b01      	subs	r3, #1
 800197c:	b29a      	uxth	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001986:	b29b      	uxth	r3, r3
 8001988:	3b01      	subs	r3, #1
 800198a:	b29a      	uxth	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001990:	e0b8      	b.n	8001b04 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001998:	2200      	movs	r2, #0
 800199a:	4966      	ldr	r1, [pc, #408]	; (8001b34 <HAL_I2C_Master_Receive+0x448>)
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 fa1b 	bl	8001dd8 <I2C_WaitOnFlagUntilTimeout>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0bf      	b.n	8001b2c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	691a      	ldr	r2, [r3, #16]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d8:	3b01      	subs	r3, #1
 80019da:	b29a      	uxth	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	3b01      	subs	r3, #1
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f4:	2200      	movs	r2, #0
 80019f6:	494f      	ldr	r1, [pc, #316]	; (8001b34 <HAL_I2C_Master_Receive+0x448>)
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f000 f9ed 	bl	8001dd8 <I2C_WaitOnFlagUntilTimeout>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e091      	b.n	8001b2c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	691a      	ldr	r2, [r3, #16]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	3b01      	subs	r3, #1
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	691a      	ldr	r2, [r3, #16]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5c:	1c5a      	adds	r2, r3, #1
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a66:	3b01      	subs	r3, #1
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	3b01      	subs	r3, #1
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a7c:	e042      	b.n	8001b04 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f000 fb00 	bl	8002088 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e04c      	b.n	8001b2c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	691a      	ldr	r2, [r3, #16]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	3b01      	subs	r3, #1
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d118      	bne.n	8001b04 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	3b01      	subs	r3, #1
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f47f aec2 	bne.w	8001892 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2220      	movs	r2, #32
 8001b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	e000      	b.n	8001b2c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001b2a:	2302      	movs	r3, #2
  }
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3728      	adds	r7, #40	; 0x28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	00010004 	.word	0x00010004

08001b38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af02      	add	r7, sp, #8
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	460b      	mov	r3, r1
 8001b46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d006      	beq.n	8001b62 <I2C_MasterRequestWrite+0x2a>
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d003      	beq.n	8001b62 <I2C_MasterRequestWrite+0x2a>
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b60:	d108      	bne.n	8001b74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	e00b      	b.n	8001b8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b78:	2b12      	cmp	r3, #18
 8001b7a:	d107      	bne.n	8001b8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 f91d 	bl	8001dd8 <I2C_WaitOnFlagUntilTimeout>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00d      	beq.n	8001bc0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bb2:	d103      	bne.n	8001bbc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e035      	b.n	8001c2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bc8:	d108      	bne.n	8001bdc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bca:	897b      	ldrh	r3, [r7, #10]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001bd8:	611a      	str	r2, [r3, #16]
 8001bda:	e01b      	b.n	8001c14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001bdc:	897b      	ldrh	r3, [r7, #10]
 8001bde:	11db      	asrs	r3, r3, #7
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	f003 0306 	and.w	r3, r3, #6
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	f063 030f 	orn	r3, r3, #15
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	490e      	ldr	r1, [pc, #56]	; (8001c34 <I2C_MasterRequestWrite+0xfc>)
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 f943 	bl	8001e86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e010      	b.n	8001c2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c0a:	897b      	ldrh	r3, [r7, #10]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	4907      	ldr	r1, [pc, #28]	; (8001c38 <I2C_MasterRequestWrite+0x100>)
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 f933 	bl	8001e86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	00010008 	.word	0x00010008
 8001c38:	00010002 	.word	0x00010002

08001c3c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	607a      	str	r2, [r7, #4]
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c60:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d006      	beq.n	8001c76 <I2C_MasterRequestRead+0x3a>
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d003      	beq.n	8001c76 <I2C_MasterRequestRead+0x3a>
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c74:	d108      	bne.n	8001c88 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	e00b      	b.n	8001ca0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8c:	2b11      	cmp	r3, #17
 8001c8e:	d107      	bne.n	8001ca0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 f893 	bl	8001dd8 <I2C_WaitOnFlagUntilTimeout>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00d      	beq.n	8001cd4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cc6:	d103      	bne.n	8001cd0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e079      	b.n	8001dc8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cdc:	d108      	bne.n	8001cf0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001cde:	897b      	ldrh	r3, [r7, #10]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	611a      	str	r2, [r3, #16]
 8001cee:	e05f      	b.n	8001db0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001cf0:	897b      	ldrh	r3, [r7, #10]
 8001cf2:	11db      	asrs	r3, r3, #7
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	f003 0306 	and.w	r3, r3, #6
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	f063 030f 	orn	r3, r3, #15
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	4930      	ldr	r1, [pc, #192]	; (8001dd0 <I2C_MasterRequestRead+0x194>)
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 f8b9 	bl	8001e86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e054      	b.n	8001dc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d1e:	897b      	ldrh	r3, [r7, #10]
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	4929      	ldr	r1, [pc, #164]	; (8001dd4 <I2C_MasterRequestRead+0x198>)
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 f8a9 	bl	8001e86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e044      	b.n	8001dc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d62:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f000 f831 	bl	8001dd8 <I2C_WaitOnFlagUntilTimeout>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00d      	beq.n	8001d98 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d8a:	d103      	bne.n	8001d94 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e017      	b.n	8001dc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001d98:	897b      	ldrh	r3, [r7, #10]
 8001d9a:	11db      	asrs	r3, r3, #7
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	f003 0306 	and.w	r3, r3, #6
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	f063 030e 	orn	r3, r3, #14
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	4907      	ldr	r1, [pc, #28]	; (8001dd4 <I2C_MasterRequestRead+0x198>)
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 f865 	bl	8001e86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	00010008 	.word	0x00010008
 8001dd4:	00010002 	.word	0x00010002

08001dd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	4613      	mov	r3, r2
 8001de6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001de8:	e025      	b.n	8001e36 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df0:	d021      	beq.n	8001e36 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001df2:	f7fe ff85 	bl	8000d00 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d302      	bcc.n	8001e08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d116      	bne.n	8001e36 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2220      	movs	r2, #32
 8001e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f043 0220 	orr.w	r2, r3, #32
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e023      	b.n	8001e7e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	0c1b      	lsrs	r3, r3, #16
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d10d      	bne.n	8001e5c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	43da      	mvns	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bf0c      	ite	eq
 8001e52:	2301      	moveq	r3, #1
 8001e54:	2300      	movne	r3, #0
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	461a      	mov	r2, r3
 8001e5a:	e00c      	b.n	8001e76 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	43da      	mvns	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	4013      	ands	r3, r2
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	bf0c      	ite	eq
 8001e6e:	2301      	moveq	r3, #1
 8001e70:	2300      	movne	r3, #0
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	461a      	mov	r2, r3
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d0b6      	beq.n	8001dea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b084      	sub	sp, #16
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e94:	e051      	b.n	8001f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea4:	d123      	bne.n	8001eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ebe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f043 0204 	orr.w	r2, r3, #4
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e046      	b.n	8001f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef4:	d021      	beq.n	8001f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ef6:	f7fe ff03 	bl	8000d00 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d302      	bcc.n	8001f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d116      	bne.n	8001f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2220      	movs	r2, #32
 8001f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f043 0220 	orr.w	r2, r3, #32
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e020      	b.n	8001f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	0c1b      	lsrs	r3, r3, #16
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d10c      	bne.n	8001f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	bf14      	ite	ne
 8001f56:	2301      	movne	r3, #1
 8001f58:	2300      	moveq	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	e00b      	b.n	8001f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	43da      	mvns	r2, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	bf14      	ite	ne
 8001f70:	2301      	movne	r3, #1
 8001f72:	2300      	moveq	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d18d      	bne.n	8001e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f90:	e02d      	b.n	8001fee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f8ce 	bl	8002134 <I2C_IsAcknowledgeFailed>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e02d      	b.n	8001ffe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa8:	d021      	beq.n	8001fee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001faa:	f7fe fea9 	bl	8000d00 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d302      	bcc.n	8001fc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d116      	bne.n	8001fee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f043 0220 	orr.w	r2, r3, #32
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e007      	b.n	8001ffe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff8:	2b80      	cmp	r3, #128	; 0x80
 8001ffa:	d1ca      	bne.n	8001f92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	60f8      	str	r0, [r7, #12]
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002012:	e02d      	b.n	8002070 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 f88d 	bl	8002134 <I2C_IsAcknowledgeFailed>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e02d      	b.n	8002080 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202a:	d021      	beq.n	8002070 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800202c:	f7fe fe68 	bl	8000d00 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	429a      	cmp	r2, r3
 800203a:	d302      	bcc.n	8002042 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d116      	bne.n	8002070 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2220      	movs	r2, #32
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	f043 0220 	orr.w	r2, r3, #32
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e007      	b.n	8002080 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	2b04      	cmp	r3, #4
 800207c:	d1ca      	bne.n	8002014 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002094:	e042      	b.n	800211c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	2b10      	cmp	r3, #16
 80020a2:	d119      	bne.n	80020d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0210 	mvn.w	r2, #16
 80020ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2220      	movs	r2, #32
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e029      	b.n	800212c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020d8:	f7fe fe12 	bl	8000d00 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d302      	bcc.n	80020ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d116      	bne.n	800211c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2220      	movs	r2, #32
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	f043 0220 	orr.w	r2, r3, #32
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e007      	b.n	800212c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002126:	2b40      	cmp	r3, #64	; 0x40
 8002128:	d1b5      	bne.n	8002096 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800214a:	d11b      	bne.n	8002184 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002154:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2220      	movs	r2, #32
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	f043 0204 	orr.w	r2, r3, #4
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e264      	b.n	8002670 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d075      	beq.n	800229e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021b2:	4ba3      	ldr	r3, [pc, #652]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d00c      	beq.n	80021d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021be:	4ba0      	ldr	r3, [pc, #640]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d112      	bne.n	80021f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ca:	4b9d      	ldr	r3, [pc, #628]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021d6:	d10b      	bne.n	80021f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d8:	4b99      	ldr	r3, [pc, #612]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d05b      	beq.n	800229c <HAL_RCC_OscConfig+0x108>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d157      	bne.n	800229c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e23f      	b.n	8002670 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f8:	d106      	bne.n	8002208 <HAL_RCC_OscConfig+0x74>
 80021fa:	4b91      	ldr	r3, [pc, #580]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a90      	ldr	r2, [pc, #576]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	e01d      	b.n	8002244 <HAL_RCC_OscConfig+0xb0>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002210:	d10c      	bne.n	800222c <HAL_RCC_OscConfig+0x98>
 8002212:	4b8b      	ldr	r3, [pc, #556]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a8a      	ldr	r2, [pc, #552]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	4b88      	ldr	r3, [pc, #544]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a87      	ldr	r2, [pc, #540]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	e00b      	b.n	8002244 <HAL_RCC_OscConfig+0xb0>
 800222c:	4b84      	ldr	r3, [pc, #528]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a83      	ldr	r2, [pc, #524]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	4b81      	ldr	r3, [pc, #516]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a80      	ldr	r2, [pc, #512]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 800223e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d013      	beq.n	8002274 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7fe fd58 	bl	8000d00 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002254:	f7fe fd54 	bl	8000d00 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b64      	cmp	r3, #100	; 0x64
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e204      	b.n	8002670 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	4b76      	ldr	r3, [pc, #472]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0xc0>
 8002272:	e014      	b.n	800229e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7fe fd44 	bl	8000d00 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800227c:	f7fe fd40 	bl	8000d00 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	; 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e1f0      	b.n	8002670 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228e:	4b6c      	ldr	r3, [pc, #432]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0xe8>
 800229a:	e000      	b.n	800229e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d063      	beq.n	8002372 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022aa:	4b65      	ldr	r3, [pc, #404]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00b      	beq.n	80022ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022b6:	4b62      	ldr	r3, [pc, #392]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d11c      	bne.n	80022fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022c2:	4b5f      	ldr	r3, [pc, #380]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d116      	bne.n	80022fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ce:	4b5c      	ldr	r3, [pc, #368]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d005      	beq.n	80022e6 <HAL_RCC_OscConfig+0x152>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d001      	beq.n	80022e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e1c4      	b.n	8002670 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e6:	4b56      	ldr	r3, [pc, #344]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4952      	ldr	r1, [pc, #328]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fa:	e03a      	b.n	8002372 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d020      	beq.n	8002346 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002304:	4b4f      	ldr	r3, [pc, #316]	; (8002444 <HAL_RCC_OscConfig+0x2b0>)
 8002306:	2201      	movs	r2, #1
 8002308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230a:	f7fe fcf9 	bl	8000d00 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002312:	f7fe fcf5 	bl	8000d00 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e1a5      	b.n	8002670 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002324:	4b46      	ldr	r3, [pc, #280]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002330:	4b43      	ldr	r3, [pc, #268]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4940      	ldr	r1, [pc, #256]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002340:	4313      	orrs	r3, r2
 8002342:	600b      	str	r3, [r1, #0]
 8002344:	e015      	b.n	8002372 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002346:	4b3f      	ldr	r3, [pc, #252]	; (8002444 <HAL_RCC_OscConfig+0x2b0>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234c:	f7fe fcd8 	bl	8000d00 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002354:	f7fe fcd4 	bl	8000d00 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e184      	b.n	8002670 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002366:	4b36      	ldr	r3, [pc, #216]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d030      	beq.n	80023e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d016      	beq.n	80023b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002386:	4b30      	ldr	r3, [pc, #192]	; (8002448 <HAL_RCC_OscConfig+0x2b4>)
 8002388:	2201      	movs	r2, #1
 800238a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238c:	f7fe fcb8 	bl	8000d00 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002394:	f7fe fcb4 	bl	8000d00 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e164      	b.n	8002670 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a6:	4b26      	ldr	r3, [pc, #152]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x200>
 80023b2:	e015      	b.n	80023e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b4:	4b24      	ldr	r3, [pc, #144]	; (8002448 <HAL_RCC_OscConfig+0x2b4>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ba:	f7fe fca1 	bl	8000d00 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023c2:	f7fe fc9d 	bl	8000d00 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e14d      	b.n	8002670 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d4:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f0      	bne.n	80023c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80a0 	beq.w	800252e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f2:	4b13      	ldr	r3, [pc, #76]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10f      	bne.n	800241e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	4a0e      	ldr	r2, [pc, #56]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240c:	6413      	str	r3, [r2, #64]	; 0x40
 800240e:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800241a:	2301      	movs	r3, #1
 800241c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241e:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_RCC_OscConfig+0x2b8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002426:	2b00      	cmp	r3, #0
 8002428:	d121      	bne.n	800246e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800242a:	4b08      	ldr	r3, [pc, #32]	; (800244c <HAL_RCC_OscConfig+0x2b8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a07      	ldr	r2, [pc, #28]	; (800244c <HAL_RCC_OscConfig+0x2b8>)
 8002430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002436:	f7fe fc63 	bl	8000d00 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243c:	e011      	b.n	8002462 <HAL_RCC_OscConfig+0x2ce>
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800
 8002444:	42470000 	.word	0x42470000
 8002448:	42470e80 	.word	0x42470e80
 800244c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002450:	f7fe fc56 	bl	8000d00 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e106      	b.n	8002670 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002462:	4b85      	ldr	r3, [pc, #532]	; (8002678 <HAL_RCC_OscConfig+0x4e4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d106      	bne.n	8002484 <HAL_RCC_OscConfig+0x2f0>
 8002476:	4b81      	ldr	r3, [pc, #516]	; (800267c <HAL_RCC_OscConfig+0x4e8>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	4a80      	ldr	r2, [pc, #512]	; (800267c <HAL_RCC_OscConfig+0x4e8>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	6713      	str	r3, [r2, #112]	; 0x70
 8002482:	e01c      	b.n	80024be <HAL_RCC_OscConfig+0x32a>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2b05      	cmp	r3, #5
 800248a:	d10c      	bne.n	80024a6 <HAL_RCC_OscConfig+0x312>
 800248c:	4b7b      	ldr	r3, [pc, #492]	; (800267c <HAL_RCC_OscConfig+0x4e8>)
 800248e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002490:	4a7a      	ldr	r2, [pc, #488]	; (800267c <HAL_RCC_OscConfig+0x4e8>)
 8002492:	f043 0304 	orr.w	r3, r3, #4
 8002496:	6713      	str	r3, [r2, #112]	; 0x70
 8002498:	4b78      	ldr	r3, [pc, #480]	; (800267c <HAL_RCC_OscConfig+0x4e8>)
 800249a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249c:	4a77      	ldr	r2, [pc, #476]	; (800267c <HAL_RCC_OscConfig+0x4e8>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	6713      	str	r3, [r2, #112]	; 0x70
 80024a4:	e00b      	b.n	80024be <HAL_RCC_OscConfig+0x32a>
 80024a6:	4b75      	ldr	r3, [pc, #468]	; (800267c <HAL_RCC_OscConfig+0x4e8>)
 80024a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024aa:	4a74      	ldr	r2, [pc, #464]	; (800267c <HAL_RCC_OscConfig+0x4e8>)
 80024ac:	f023 0301 	bic.w	r3, r3, #1
 80024b0:	6713      	str	r3, [r2, #112]	; 0x70
 80024b2:	4b72      	ldr	r3, [pc, #456]	; (800267c <HAL_RCC_OscConfig+0x4e8>)
 80024b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b6:	4a71      	ldr	r2, [pc, #452]	; (800267c <HAL_RCC_OscConfig+0x4e8>)
 80024b8:	f023 0304 	bic.w	r3, r3, #4
 80024bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d015      	beq.n	80024f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c6:	f7fe fc1b 	bl	8000d00 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024cc:	e00a      	b.n	80024e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ce:	f7fe fc17 	bl	8000d00 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024dc:	4293      	cmp	r3, r2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e0c5      	b.n	8002670 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e4:	4b65      	ldr	r3, [pc, #404]	; (800267c <HAL_RCC_OscConfig+0x4e8>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0ee      	beq.n	80024ce <HAL_RCC_OscConfig+0x33a>
 80024f0:	e014      	b.n	800251c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f2:	f7fe fc05 	bl	8000d00 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f8:	e00a      	b.n	8002510 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024fa:	f7fe fc01 	bl	8000d00 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	f241 3288 	movw	r2, #5000	; 0x1388
 8002508:	4293      	cmp	r3, r2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e0af      	b.n	8002670 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002510:	4b5a      	ldr	r3, [pc, #360]	; (800267c <HAL_RCC_OscConfig+0x4e8>)
 8002512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1ee      	bne.n	80024fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800251c:	7dfb      	ldrb	r3, [r7, #23]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d105      	bne.n	800252e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002522:	4b56      	ldr	r3, [pc, #344]	; (800267c <HAL_RCC_OscConfig+0x4e8>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	4a55      	ldr	r2, [pc, #340]	; (800267c <HAL_RCC_OscConfig+0x4e8>)
 8002528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800252c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 809b 	beq.w	800266e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002538:	4b50      	ldr	r3, [pc, #320]	; (800267c <HAL_RCC_OscConfig+0x4e8>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 030c 	and.w	r3, r3, #12
 8002540:	2b08      	cmp	r3, #8
 8002542:	d05c      	beq.n	80025fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d141      	bne.n	80025d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254c:	4b4c      	ldr	r3, [pc, #304]	; (8002680 <HAL_RCC_OscConfig+0x4ec>)
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002552:	f7fe fbd5 	bl	8000d00 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800255a:	f7fe fbd1 	bl	8000d00 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e081      	b.n	8002670 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256c:	4b43      	ldr	r3, [pc, #268]	; (800267c <HAL_RCC_OscConfig+0x4e8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f0      	bne.n	800255a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69da      	ldr	r2, [r3, #28]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	431a      	orrs	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	019b      	lsls	r3, r3, #6
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258e:	085b      	lsrs	r3, r3, #1
 8002590:	3b01      	subs	r3, #1
 8002592:	041b      	lsls	r3, r3, #16
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	061b      	lsls	r3, r3, #24
 800259c:	4937      	ldr	r1, [pc, #220]	; (800267c <HAL_RCC_OscConfig+0x4e8>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a2:	4b37      	ldr	r3, [pc, #220]	; (8002680 <HAL_RCC_OscConfig+0x4ec>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7fe fbaa 	bl	8000d00 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b0:	f7fe fba6 	bl	8000d00 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e056      	b.n	8002670 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c2:	4b2e      	ldr	r3, [pc, #184]	; (800267c <HAL_RCC_OscConfig+0x4e8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0x41c>
 80025ce:	e04e      	b.n	800266e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d0:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <HAL_RCC_OscConfig+0x4ec>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d6:	f7fe fb93 	bl	8000d00 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025de:	f7fe fb8f 	bl	8000d00 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e03f      	b.n	8002670 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f0:	4b22      	ldr	r3, [pc, #136]	; (800267c <HAL_RCC_OscConfig+0x4e8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f0      	bne.n	80025de <HAL_RCC_OscConfig+0x44a>
 80025fc:	e037      	b.n	800266e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e032      	b.n	8002670 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800260a:	4b1c      	ldr	r3, [pc, #112]	; (800267c <HAL_RCC_OscConfig+0x4e8>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d028      	beq.n	800266a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002622:	429a      	cmp	r2, r3
 8002624:	d121      	bne.n	800266a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002630:	429a      	cmp	r2, r3
 8002632:	d11a      	bne.n	800266a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800263a:	4013      	ands	r3, r2
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002640:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002642:	4293      	cmp	r3, r2
 8002644:	d111      	bne.n	800266a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	085b      	lsrs	r3, r3, #1
 8002652:	3b01      	subs	r3, #1
 8002654:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002656:	429a      	cmp	r2, r3
 8002658:	d107      	bne.n	800266a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002666:	429a      	cmp	r2, r3
 8002668:	d001      	beq.n	800266e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40007000 	.word	0x40007000
 800267c:	40023800 	.word	0x40023800
 8002680:	42470060 	.word	0x42470060

08002684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0cc      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002698:	4b68      	ldr	r3, [pc, #416]	; (800283c <HAL_RCC_ClockConfig+0x1b8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d90c      	bls.n	80026c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a6:	4b65      	ldr	r3, [pc, #404]	; (800283c <HAL_RCC_ClockConfig+0x1b8>)
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ae:	4b63      	ldr	r3, [pc, #396]	; (800283c <HAL_RCC_ClockConfig+0x1b8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0b8      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d020      	beq.n	800270e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d8:	4b59      	ldr	r3, [pc, #356]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	4a58      	ldr	r2, [pc, #352]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026f0:	4b53      	ldr	r3, [pc, #332]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	4a52      	ldr	r2, [pc, #328]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026fc:	4b50      	ldr	r3, [pc, #320]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	494d      	ldr	r1, [pc, #308]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	4313      	orrs	r3, r2
 800270c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d044      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d107      	bne.n	8002732 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	4b47      	ldr	r3, [pc, #284]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d119      	bne.n	8002762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e07f      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d003      	beq.n	8002742 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800273e:	2b03      	cmp	r3, #3
 8002740:	d107      	bne.n	8002752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002742:	4b3f      	ldr	r3, [pc, #252]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d109      	bne.n	8002762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e06f      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002752:	4b3b      	ldr	r3, [pc, #236]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e067      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002762:	4b37      	ldr	r3, [pc, #220]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f023 0203 	bic.w	r2, r3, #3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	4934      	ldr	r1, [pc, #208]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	4313      	orrs	r3, r2
 8002772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002774:	f7fe fac4 	bl	8000d00 <HAL_GetTick>
 8002778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277a:	e00a      	b.n	8002792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800277c:	f7fe fac0 	bl	8000d00 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	; 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e04f      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002792:	4b2b      	ldr	r3, [pc, #172]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 020c 	and.w	r2, r3, #12
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d1eb      	bne.n	800277c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027a4:	4b25      	ldr	r3, [pc, #148]	; (800283c <HAL_RCC_ClockConfig+0x1b8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d20c      	bcs.n	80027cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b2:	4b22      	ldr	r3, [pc, #136]	; (800283c <HAL_RCC_ClockConfig+0x1b8>)
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ba:	4b20      	ldr	r3, [pc, #128]	; (800283c <HAL_RCC_ClockConfig+0x1b8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e032      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d8:	4b19      	ldr	r3, [pc, #100]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4916      	ldr	r1, [pc, #88]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d009      	beq.n	800280a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027f6:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	490e      	ldr	r1, [pc, #56]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	4313      	orrs	r3, r2
 8002808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800280a:	f000 f821 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 800280e:	4602      	mov	r2, r0
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	490a      	ldr	r1, [pc, #40]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 800281c:	5ccb      	ldrb	r3, [r1, r3]
 800281e:	fa22 f303 	lsr.w	r3, r2, r3
 8002822:	4a09      	ldr	r2, [pc, #36]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7fe fa24 	bl	8000c78 <HAL_InitTick>

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40023c00 	.word	0x40023c00
 8002840:	40023800 	.word	0x40023800
 8002844:	080072c0 	.word	0x080072c0
 8002848:	20000014 	.word	0x20000014
 800284c:	20000000 	.word	0x20000000

08002850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002850:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	2300      	movs	r3, #0
 8002862:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002868:	4b67      	ldr	r3, [pc, #412]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 030c 	and.w	r3, r3, #12
 8002870:	2b08      	cmp	r3, #8
 8002872:	d00d      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0x40>
 8002874:	2b08      	cmp	r3, #8
 8002876:	f200 80bd 	bhi.w	80029f4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0x34>
 800287e:	2b04      	cmp	r3, #4
 8002880:	d003      	beq.n	800288a <HAL_RCC_GetSysClockFreq+0x3a>
 8002882:	e0b7      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002884:	4b61      	ldr	r3, [pc, #388]	; (8002a0c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002886:	60bb      	str	r3, [r7, #8]
       break;
 8002888:	e0b7      	b.n	80029fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800288a:	4b61      	ldr	r3, [pc, #388]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800288c:	60bb      	str	r3, [r7, #8]
      break;
 800288e:	e0b4      	b.n	80029fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002890:	4b5d      	ldr	r3, [pc, #372]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002898:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800289a:	4b5b      	ldr	r3, [pc, #364]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d04d      	beq.n	8002942 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a6:	4b58      	ldr	r3, [pc, #352]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	099b      	lsrs	r3, r3, #6
 80028ac:	461a      	mov	r2, r3
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028b6:	f04f 0100 	mov.w	r1, #0
 80028ba:	ea02 0800 	and.w	r8, r2, r0
 80028be:	ea03 0901 	and.w	r9, r3, r1
 80028c2:	4640      	mov	r0, r8
 80028c4:	4649      	mov	r1, r9
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	014b      	lsls	r3, r1, #5
 80028d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028d4:	0142      	lsls	r2, r0, #5
 80028d6:	4610      	mov	r0, r2
 80028d8:	4619      	mov	r1, r3
 80028da:	ebb0 0008 	subs.w	r0, r0, r8
 80028de:	eb61 0109 	sbc.w	r1, r1, r9
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	018b      	lsls	r3, r1, #6
 80028ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028f0:	0182      	lsls	r2, r0, #6
 80028f2:	1a12      	subs	r2, r2, r0
 80028f4:	eb63 0301 	sbc.w	r3, r3, r1
 80028f8:	f04f 0000 	mov.w	r0, #0
 80028fc:	f04f 0100 	mov.w	r1, #0
 8002900:	00d9      	lsls	r1, r3, #3
 8002902:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002906:	00d0      	lsls	r0, r2, #3
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	eb12 0208 	adds.w	r2, r2, r8
 8002910:	eb43 0309 	adc.w	r3, r3, r9
 8002914:	f04f 0000 	mov.w	r0, #0
 8002918:	f04f 0100 	mov.w	r1, #0
 800291c:	0259      	lsls	r1, r3, #9
 800291e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002922:	0250      	lsls	r0, r2, #9
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4610      	mov	r0, r2
 800292a:	4619      	mov	r1, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	461a      	mov	r2, r3
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	f7fe f802 	bl	800093c <__aeabi_uldivmod>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4613      	mov	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	e04a      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002942:	4b31      	ldr	r3, [pc, #196]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	099b      	lsrs	r3, r3, #6
 8002948:	461a      	mov	r2, r3
 800294a:	f04f 0300 	mov.w	r3, #0
 800294e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002952:	f04f 0100 	mov.w	r1, #0
 8002956:	ea02 0400 	and.w	r4, r2, r0
 800295a:	ea03 0501 	and.w	r5, r3, r1
 800295e:	4620      	mov	r0, r4
 8002960:	4629      	mov	r1, r5
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	014b      	lsls	r3, r1, #5
 800296c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002970:	0142      	lsls	r2, r0, #5
 8002972:	4610      	mov	r0, r2
 8002974:	4619      	mov	r1, r3
 8002976:	1b00      	subs	r0, r0, r4
 8002978:	eb61 0105 	sbc.w	r1, r1, r5
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	018b      	lsls	r3, r1, #6
 8002986:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800298a:	0182      	lsls	r2, r0, #6
 800298c:	1a12      	subs	r2, r2, r0
 800298e:	eb63 0301 	sbc.w	r3, r3, r1
 8002992:	f04f 0000 	mov.w	r0, #0
 8002996:	f04f 0100 	mov.w	r1, #0
 800299a:	00d9      	lsls	r1, r3, #3
 800299c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029a0:	00d0      	lsls	r0, r2, #3
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	1912      	adds	r2, r2, r4
 80029a8:	eb45 0303 	adc.w	r3, r5, r3
 80029ac:	f04f 0000 	mov.w	r0, #0
 80029b0:	f04f 0100 	mov.w	r1, #0
 80029b4:	0299      	lsls	r1, r3, #10
 80029b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80029ba:	0290      	lsls	r0, r2, #10
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	461a      	mov	r2, r3
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	f7fd ffb6 	bl	800093c <__aeabi_uldivmod>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4613      	mov	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	0c1b      	lsrs	r3, r3, #16
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	3301      	adds	r3, #1
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f0:	60bb      	str	r3, [r7, #8]
      break;
 80029f2:	e002      	b.n	80029fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029f6:	60bb      	str	r3, [r7, #8]
      break;
 80029f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029fa:	68bb      	ldr	r3, [r7, #8]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	00f42400 	.word	0x00f42400
 8002a10:	007a1200 	.word	0x007a1200

08002a14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a18:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	20000014 	.word	0x20000014

08002a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a30:	f7ff fff0 	bl	8002a14 <HAL_RCC_GetHCLKFreq>
 8002a34:	4602      	mov	r2, r0
 8002a36:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	0a9b      	lsrs	r3, r3, #10
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	4903      	ldr	r1, [pc, #12]	; (8002a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a42:	5ccb      	ldrb	r3, [r1, r3]
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	080072d0 	.word	0x080072d0

08002a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a58:	f7ff ffdc 	bl	8002a14 <HAL_RCC_GetHCLKFreq>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	0b5b      	lsrs	r3, r3, #13
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	4903      	ldr	r1, [pc, #12]	; (8002a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a6a:	5ccb      	ldrb	r3, [r1, r3]
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40023800 	.word	0x40023800
 8002a78:	080072d0 	.word	0x080072d0

08002a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e03f      	b.n	8002b0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d106      	bne.n	8002aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f003 fcbc 	bl	8006420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2224      	movs	r2, #36	; 0x24
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f9a7 	bl	8002e14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695a      	ldr	r2, [r3, #20]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b08a      	sub	sp, #40	; 0x28
 8002b1a:	af02      	add	r7, sp, #8
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	603b      	str	r3, [r7, #0]
 8002b22:	4613      	mov	r3, r2
 8002b24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	d17c      	bne.n	8002c30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <HAL_UART_Transmit+0x2c>
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e075      	b.n	8002c32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_UART_Transmit+0x3e>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e06e      	b.n	8002c32 <HAL_UART_Transmit+0x11c>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2221      	movs	r2, #33	; 0x21
 8002b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b6a:	f7fe f8c9 	bl	8000d00 <HAL_GetTick>
 8002b6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	88fa      	ldrh	r2, [r7, #6]
 8002b74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	88fa      	ldrh	r2, [r7, #6]
 8002b7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b84:	d108      	bne.n	8002b98 <HAL_UART_Transmit+0x82>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d104      	bne.n	8002b98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	e003      	b.n	8002ba0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ba8:	e02a      	b.n	8002c00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2180      	movs	r1, #128	; 0x80
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 f8e2 	bl	8002d7e <UART_WaitOnFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e036      	b.n	8002c32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10b      	bne.n	8002be2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	3302      	adds	r3, #2
 8002bde:	61bb      	str	r3, [r7, #24]
 8002be0:	e007      	b.n	8002bf2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	781a      	ldrb	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1cf      	bne.n	8002baa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2200      	movs	r2, #0
 8002c12:	2140      	movs	r1, #64	; 0x40
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 f8b2 	bl	8002d7e <UART_WaitOnFlagUntilTimeout>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e006      	b.n	8002c32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e000      	b.n	8002c32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
  }
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3720      	adds	r7, #32
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b08a      	sub	sp, #40	; 0x28
 8002c3e:	af02      	add	r7, sp, #8
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	4613      	mov	r3, r2
 8002c48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	f040 808c 	bne.w	8002d74 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <HAL_UART_Receive+0x2e>
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e084      	b.n	8002d76 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <HAL_UART_Receive+0x40>
 8002c76:	2302      	movs	r3, #2
 8002c78:	e07d      	b.n	8002d76 <HAL_UART_Receive+0x13c>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2222      	movs	r2, #34	; 0x22
 8002c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c96:	f7fe f833 	bl	8000d00 <HAL_GetTick>
 8002c9a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	88fa      	ldrh	r2, [r7, #6]
 8002ca0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	88fa      	ldrh	r2, [r7, #6]
 8002ca6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb0:	d108      	bne.n	8002cc4 <HAL_UART_Receive+0x8a>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d104      	bne.n	8002cc4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	61bb      	str	r3, [r7, #24]
 8002cc2:	e003      	b.n	8002ccc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002cd4:	e043      	b.n	8002d5e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2120      	movs	r1, #32
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f84c 	bl	8002d7e <UART_WaitOnFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e042      	b.n	8002d76 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10c      	bne.n	8002d10 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	e01f      	b.n	8002d50 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d18:	d007      	beq.n	8002d2a <HAL_UART_Receive+0xf0>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10a      	bne.n	8002d38 <HAL_UART_Receive+0xfe>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d106      	bne.n	8002d38 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	701a      	strb	r2, [r3, #0]
 8002d36:	e008      	b.n	8002d4a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1b6      	bne.n	8002cd6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e000      	b.n	8002d76 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002d74:	2302      	movs	r3, #2
  }
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3720      	adds	r7, #32
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b084      	sub	sp, #16
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	603b      	str	r3, [r7, #0]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d8e:	e02c      	b.n	8002dea <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d96:	d028      	beq.n	8002dea <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d007      	beq.n	8002dae <UART_WaitOnFlagUntilTimeout+0x30>
 8002d9e:	f7fd ffaf 	bl	8000d00 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d21d      	bcs.n	8002dea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002dbc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0201 	bic.w	r2, r2, #1
 8002dcc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e00f      	b.n	8002e0a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4013      	ands	r3, r2
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	bf0c      	ite	eq
 8002dfa:	2301      	moveq	r3, #1
 8002dfc:	2300      	movne	r3, #0
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d0c3      	beq.n	8002d90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e18:	b09f      	sub	sp, #124	; 0x7c
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2a:	68d9      	ldr	r1, [r3, #12]
 8002e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	ea40 0301 	orr.w	r3, r0, r1
 8002e34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	431a      	orrs	r2, r3
 8002e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e58:	f021 010c 	bic.w	r1, r1, #12
 8002e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e62:	430b      	orrs	r3, r1
 8002e64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e72:	6999      	ldr	r1, [r3, #24]
 8002e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	ea40 0301 	orr.w	r3, r0, r1
 8002e7c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	4bc5      	ldr	r3, [pc, #788]	; (8003198 <UART_SetConfig+0x384>)
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d004      	beq.n	8002e92 <UART_SetConfig+0x7e>
 8002e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4bc3      	ldr	r3, [pc, #780]	; (800319c <UART_SetConfig+0x388>)
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d103      	bne.n	8002e9a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e92:	f7ff fddf 	bl	8002a54 <HAL_RCC_GetPCLK2Freq>
 8002e96:	6778      	str	r0, [r7, #116]	; 0x74
 8002e98:	e002      	b.n	8002ea0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e9a:	f7ff fdc7 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 8002e9e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ea8:	f040 80b6 	bne.w	8003018 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002eac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eae:	461c      	mov	r4, r3
 8002eb0:	f04f 0500 	mov.w	r5, #0
 8002eb4:	4622      	mov	r2, r4
 8002eb6:	462b      	mov	r3, r5
 8002eb8:	1891      	adds	r1, r2, r2
 8002eba:	6439      	str	r1, [r7, #64]	; 0x40
 8002ebc:	415b      	adcs	r3, r3
 8002ebe:	647b      	str	r3, [r7, #68]	; 0x44
 8002ec0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ec4:	1912      	adds	r2, r2, r4
 8002ec6:	eb45 0303 	adc.w	r3, r5, r3
 8002eca:	f04f 0000 	mov.w	r0, #0
 8002ece:	f04f 0100 	mov.w	r1, #0
 8002ed2:	00d9      	lsls	r1, r3, #3
 8002ed4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ed8:	00d0      	lsls	r0, r2, #3
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	1911      	adds	r1, r2, r4
 8002ee0:	6639      	str	r1, [r7, #96]	; 0x60
 8002ee2:	416b      	adcs	r3, r5
 8002ee4:	667b      	str	r3, [r7, #100]	; 0x64
 8002ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	461a      	mov	r2, r3
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	1891      	adds	r1, r2, r2
 8002ef2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ef4:	415b      	adcs	r3, r3
 8002ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ef8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002efc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002f00:	f7fd fd1c 	bl	800093c <__aeabi_uldivmod>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4ba5      	ldr	r3, [pc, #660]	; (80031a0 <UART_SetConfig+0x38c>)
 8002f0a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	011e      	lsls	r6, r3, #4
 8002f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f14:	461c      	mov	r4, r3
 8002f16:	f04f 0500 	mov.w	r5, #0
 8002f1a:	4622      	mov	r2, r4
 8002f1c:	462b      	mov	r3, r5
 8002f1e:	1891      	adds	r1, r2, r2
 8002f20:	6339      	str	r1, [r7, #48]	; 0x30
 8002f22:	415b      	adcs	r3, r3
 8002f24:	637b      	str	r3, [r7, #52]	; 0x34
 8002f26:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f2a:	1912      	adds	r2, r2, r4
 8002f2c:	eb45 0303 	adc.w	r3, r5, r3
 8002f30:	f04f 0000 	mov.w	r0, #0
 8002f34:	f04f 0100 	mov.w	r1, #0
 8002f38:	00d9      	lsls	r1, r3, #3
 8002f3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f3e:	00d0      	lsls	r0, r2, #3
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	1911      	adds	r1, r2, r4
 8002f46:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f48:	416b      	adcs	r3, r5
 8002f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	461a      	mov	r2, r3
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	1891      	adds	r1, r2, r2
 8002f58:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f5a:	415b      	adcs	r3, r3
 8002f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f62:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002f66:	f7fd fce9 	bl	800093c <__aeabi_uldivmod>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	4b8c      	ldr	r3, [pc, #560]	; (80031a0 <UART_SetConfig+0x38c>)
 8002f70:	fba3 1302 	umull	r1, r3, r3, r2
 8002f74:	095b      	lsrs	r3, r3, #5
 8002f76:	2164      	movs	r1, #100	; 0x64
 8002f78:	fb01 f303 	mul.w	r3, r1, r3
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	3332      	adds	r3, #50	; 0x32
 8002f82:	4a87      	ldr	r2, [pc, #540]	; (80031a0 <UART_SetConfig+0x38c>)
 8002f84:	fba2 2303 	umull	r2, r3, r2, r3
 8002f88:	095b      	lsrs	r3, r3, #5
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f90:	441e      	add	r6, r3
 8002f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f94:	4618      	mov	r0, r3
 8002f96:	f04f 0100 	mov.w	r1, #0
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	1894      	adds	r4, r2, r2
 8002fa0:	623c      	str	r4, [r7, #32]
 8002fa2:	415b      	adcs	r3, r3
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002faa:	1812      	adds	r2, r2, r0
 8002fac:	eb41 0303 	adc.w	r3, r1, r3
 8002fb0:	f04f 0400 	mov.w	r4, #0
 8002fb4:	f04f 0500 	mov.w	r5, #0
 8002fb8:	00dd      	lsls	r5, r3, #3
 8002fba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002fbe:	00d4      	lsls	r4, r2, #3
 8002fc0:	4622      	mov	r2, r4
 8002fc2:	462b      	mov	r3, r5
 8002fc4:	1814      	adds	r4, r2, r0
 8002fc6:	653c      	str	r4, [r7, #80]	; 0x50
 8002fc8:	414b      	adcs	r3, r1
 8002fca:	657b      	str	r3, [r7, #84]	; 0x54
 8002fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	1891      	adds	r1, r2, r2
 8002fd8:	61b9      	str	r1, [r7, #24]
 8002fda:	415b      	adcs	r3, r3
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fe2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002fe6:	f7fd fca9 	bl	800093c <__aeabi_uldivmod>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4b6c      	ldr	r3, [pc, #432]	; (80031a0 <UART_SetConfig+0x38c>)
 8002ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff4:	095b      	lsrs	r3, r3, #5
 8002ff6:	2164      	movs	r1, #100	; 0x64
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	3332      	adds	r3, #50	; 0x32
 8003002:	4a67      	ldr	r2, [pc, #412]	; (80031a0 <UART_SetConfig+0x38c>)
 8003004:	fba2 2303 	umull	r2, r3, r2, r3
 8003008:	095b      	lsrs	r3, r3, #5
 800300a:	f003 0207 	and.w	r2, r3, #7
 800300e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4432      	add	r2, r6
 8003014:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003016:	e0b9      	b.n	800318c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003018:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800301a:	461c      	mov	r4, r3
 800301c:	f04f 0500 	mov.w	r5, #0
 8003020:	4622      	mov	r2, r4
 8003022:	462b      	mov	r3, r5
 8003024:	1891      	adds	r1, r2, r2
 8003026:	6139      	str	r1, [r7, #16]
 8003028:	415b      	adcs	r3, r3
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003030:	1912      	adds	r2, r2, r4
 8003032:	eb45 0303 	adc.w	r3, r5, r3
 8003036:	f04f 0000 	mov.w	r0, #0
 800303a:	f04f 0100 	mov.w	r1, #0
 800303e:	00d9      	lsls	r1, r3, #3
 8003040:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003044:	00d0      	lsls	r0, r2, #3
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	eb12 0804 	adds.w	r8, r2, r4
 800304e:	eb43 0905 	adc.w	r9, r3, r5
 8003052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	4618      	mov	r0, r3
 8003058:	f04f 0100 	mov.w	r1, #0
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	008b      	lsls	r3, r1, #2
 8003066:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800306a:	0082      	lsls	r2, r0, #2
 800306c:	4640      	mov	r0, r8
 800306e:	4649      	mov	r1, r9
 8003070:	f7fd fc64 	bl	800093c <__aeabi_uldivmod>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4b49      	ldr	r3, [pc, #292]	; (80031a0 <UART_SetConfig+0x38c>)
 800307a:	fba3 2302 	umull	r2, r3, r3, r2
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	011e      	lsls	r6, r3, #4
 8003082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003084:	4618      	mov	r0, r3
 8003086:	f04f 0100 	mov.w	r1, #0
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	1894      	adds	r4, r2, r2
 8003090:	60bc      	str	r4, [r7, #8]
 8003092:	415b      	adcs	r3, r3
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800309a:	1812      	adds	r2, r2, r0
 800309c:	eb41 0303 	adc.w	r3, r1, r3
 80030a0:	f04f 0400 	mov.w	r4, #0
 80030a4:	f04f 0500 	mov.w	r5, #0
 80030a8:	00dd      	lsls	r5, r3, #3
 80030aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030ae:	00d4      	lsls	r4, r2, #3
 80030b0:	4622      	mov	r2, r4
 80030b2:	462b      	mov	r3, r5
 80030b4:	1814      	adds	r4, r2, r0
 80030b6:	64bc      	str	r4, [r7, #72]	; 0x48
 80030b8:	414b      	adcs	r3, r1
 80030ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f04f 0100 	mov.w	r1, #0
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	008b      	lsls	r3, r1, #2
 80030d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80030d4:	0082      	lsls	r2, r0, #2
 80030d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80030da:	f7fd fc2f 	bl	800093c <__aeabi_uldivmod>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	4b2f      	ldr	r3, [pc, #188]	; (80031a0 <UART_SetConfig+0x38c>)
 80030e4:	fba3 1302 	umull	r1, r3, r3, r2
 80030e8:	095b      	lsrs	r3, r3, #5
 80030ea:	2164      	movs	r1, #100	; 0x64
 80030ec:	fb01 f303 	mul.w	r3, r1, r3
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	3332      	adds	r3, #50	; 0x32
 80030f6:	4a2a      	ldr	r2, [pc, #168]	; (80031a0 <UART_SetConfig+0x38c>)
 80030f8:	fba2 2303 	umull	r2, r3, r2, r3
 80030fc:	095b      	lsrs	r3, r3, #5
 80030fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003102:	441e      	add	r6, r3
 8003104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003106:	4618      	mov	r0, r3
 8003108:	f04f 0100 	mov.w	r1, #0
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	1894      	adds	r4, r2, r2
 8003112:	603c      	str	r4, [r7, #0]
 8003114:	415b      	adcs	r3, r3
 8003116:	607b      	str	r3, [r7, #4]
 8003118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800311c:	1812      	adds	r2, r2, r0
 800311e:	eb41 0303 	adc.w	r3, r1, r3
 8003122:	f04f 0400 	mov.w	r4, #0
 8003126:	f04f 0500 	mov.w	r5, #0
 800312a:	00dd      	lsls	r5, r3, #3
 800312c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003130:	00d4      	lsls	r4, r2, #3
 8003132:	4622      	mov	r2, r4
 8003134:	462b      	mov	r3, r5
 8003136:	eb12 0a00 	adds.w	sl, r2, r0
 800313a:	eb43 0b01 	adc.w	fp, r3, r1
 800313e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4618      	mov	r0, r3
 8003144:	f04f 0100 	mov.w	r1, #0
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	008b      	lsls	r3, r1, #2
 8003152:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003156:	0082      	lsls	r2, r0, #2
 8003158:	4650      	mov	r0, sl
 800315a:	4659      	mov	r1, fp
 800315c:	f7fd fbee 	bl	800093c <__aeabi_uldivmod>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4b0e      	ldr	r3, [pc, #56]	; (80031a0 <UART_SetConfig+0x38c>)
 8003166:	fba3 1302 	umull	r1, r3, r3, r2
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	2164      	movs	r1, #100	; 0x64
 800316e:	fb01 f303 	mul.w	r3, r1, r3
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	3332      	adds	r3, #50	; 0x32
 8003178:	4a09      	ldr	r2, [pc, #36]	; (80031a0 <UART_SetConfig+0x38c>)
 800317a:	fba2 2303 	umull	r2, r3, r2, r3
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	f003 020f 	and.w	r2, r3, #15
 8003184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4432      	add	r2, r6
 800318a:	609a      	str	r2, [r3, #8]
}
 800318c:	bf00      	nop
 800318e:	377c      	adds	r7, #124	; 0x7c
 8003190:	46bd      	mov	sp, r7
 8003192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003196:	bf00      	nop
 8003198:	40011000 	.word	0x40011000
 800319c:	40011400 	.word	0x40011400
 80031a0:	51eb851f 	.word	0x51eb851f

080031a4 <__NVIC_SetPriority>:
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	6039      	str	r1, [r7, #0]
 80031ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	db0a      	blt.n	80031ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	490c      	ldr	r1, [pc, #48]	; (80031f0 <__NVIC_SetPriority+0x4c>)
 80031be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c2:	0112      	lsls	r2, r2, #4
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	440b      	add	r3, r1
 80031c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80031cc:	e00a      	b.n	80031e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	4908      	ldr	r1, [pc, #32]	; (80031f4 <__NVIC_SetPriority+0x50>)
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	3b04      	subs	r3, #4
 80031dc:	0112      	lsls	r2, r2, #4
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	440b      	add	r3, r1
 80031e2:	761a      	strb	r2, [r3, #24]
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	e000e100 	.word	0xe000e100
 80031f4:	e000ed00 	.word	0xe000ed00

080031f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80031fc:	2100      	movs	r1, #0
 80031fe:	f06f 0004 	mvn.w	r0, #4
 8003202:	f7ff ffcf 	bl	80031a4 <__NVIC_SetPriority>
#endif
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003212:	f3ef 8305 	mrs	r3, IPSR
 8003216:	603b      	str	r3, [r7, #0]
  return(result);
 8003218:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800321e:	f06f 0305 	mvn.w	r3, #5
 8003222:	607b      	str	r3, [r7, #4]
 8003224:	e00c      	b.n	8003240 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003226:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <osKernelInitialize+0x44>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d105      	bne.n	800323a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800322e:	4b08      	ldr	r3, [pc, #32]	; (8003250 <osKernelInitialize+0x44>)
 8003230:	2201      	movs	r2, #1
 8003232:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003234:	2300      	movs	r3, #0
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	e002      	b.n	8003240 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800323a:	f04f 33ff 	mov.w	r3, #4294967295
 800323e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003240:	687b      	ldr	r3, [r7, #4]
}
 8003242:	4618      	mov	r0, r3
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	2000009c 	.word	0x2000009c

08003254 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800325a:	f3ef 8305 	mrs	r3, IPSR
 800325e:	603b      	str	r3, [r7, #0]
  return(result);
 8003260:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003266:	f06f 0305 	mvn.w	r3, #5
 800326a:	607b      	str	r3, [r7, #4]
 800326c:	e010      	b.n	8003290 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800326e:	4b0b      	ldr	r3, [pc, #44]	; (800329c <osKernelStart+0x48>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d109      	bne.n	800328a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003276:	f7ff ffbf 	bl	80031f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800327a:	4b08      	ldr	r3, [pc, #32]	; (800329c <osKernelStart+0x48>)
 800327c:	2202      	movs	r2, #2
 800327e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003280:	f001 f816 	bl	80042b0 <vTaskStartScheduler>
      stat = osOK;
 8003284:	2300      	movs	r3, #0
 8003286:	607b      	str	r3, [r7, #4]
 8003288:	e002      	b.n	8003290 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800328a:	f04f 33ff 	mov.w	r3, #4294967295
 800328e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003290:	687b      	ldr	r3, [r7, #4]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	2000009c 	.word	0x2000009c

080032a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08e      	sub	sp, #56	; 0x38
 80032a4:	af04      	add	r7, sp, #16
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80032ac:	2300      	movs	r3, #0
 80032ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032b0:	f3ef 8305 	mrs	r3, IPSR
 80032b4:	617b      	str	r3, [r7, #20]
  return(result);
 80032b6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d17e      	bne.n	80033ba <osThreadNew+0x11a>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d07b      	beq.n	80033ba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80032c6:	2318      	movs	r3, #24
 80032c8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80032ce:	f04f 33ff 	mov.w	r3, #4294967295
 80032d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d045      	beq.n	8003366 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <osThreadNew+0x48>
        name = attr->name;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <osThreadNew+0x6e>
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	2b38      	cmp	r3, #56	; 0x38
 8003300:	d805      	bhi.n	800330e <osThreadNew+0x6e>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <osThreadNew+0x72>
        return (NULL);
 800330e:	2300      	movs	r3, #0
 8003310:	e054      	b.n	80033bc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	089b      	lsrs	r3, r3, #2
 8003320:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00e      	beq.n	8003348 <osThreadNew+0xa8>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	2b5b      	cmp	r3, #91	; 0x5b
 8003330:	d90a      	bls.n	8003348 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003336:	2b00      	cmp	r3, #0
 8003338:	d006      	beq.n	8003348 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <osThreadNew+0xa8>
        mem = 1;
 8003342:	2301      	movs	r3, #1
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	e010      	b.n	800336a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10c      	bne.n	800336a <osThreadNew+0xca>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d108      	bne.n	800336a <osThreadNew+0xca>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d104      	bne.n	800336a <osThreadNew+0xca>
          mem = 0;
 8003360:	2300      	movs	r3, #0
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	e001      	b.n	800336a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d110      	bne.n	8003392 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003378:	9202      	str	r2, [sp, #8]
 800337a:	9301      	str	r3, [sp, #4]
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	6a3a      	ldr	r2, [r7, #32]
 8003384:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 fdf0 	bl	8003f6c <xTaskCreateStatic>
 800338c:	4603      	mov	r3, r0
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	e013      	b.n	80033ba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d110      	bne.n	80033ba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	b29a      	uxth	r2, r3
 800339c:	f107 0310 	add.w	r3, r7, #16
 80033a0:	9301      	str	r3, [sp, #4]
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 fe3b 	bl	8004026 <xTaskCreate>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d001      	beq.n	80033ba <osThreadNew+0x11a>
            hTask = NULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80033ba:	693b      	ldr	r3, [r7, #16]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3728      	adds	r7, #40	; 0x28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4a07      	ldr	r2, [pc, #28]	; (80033f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80033d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	4a06      	ldr	r2, [pc, #24]	; (80033f4 <vApplicationGetIdleTaskMemory+0x30>)
 80033da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2280      	movs	r2, #128	; 0x80
 80033e0:	601a      	str	r2, [r3, #0]
}
 80033e2:	bf00      	nop
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	200000a0 	.word	0x200000a0
 80033f4:	200000fc 	.word	0x200000fc

080033f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4a07      	ldr	r2, [pc, #28]	; (8003424 <vApplicationGetTimerTaskMemory+0x2c>)
 8003408:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	4a06      	ldr	r2, [pc, #24]	; (8003428 <vApplicationGetTimerTaskMemory+0x30>)
 800340e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003416:	601a      	str	r2, [r3, #0]
}
 8003418:	bf00      	nop
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	200002fc 	.word	0x200002fc
 8003428:	20000358 	.word	0x20000358

0800342c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f103 0208 	add.w	r2, r3, #8
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f04f 32ff 	mov.w	r2, #4294967295
 8003444:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f103 0208 	add.w	r2, r3, #8
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f103 0208 	add.w	r2, r3, #8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003486:	b480      	push	{r7}
 8003488:	b085      	sub	sp, #20
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	601a      	str	r2, [r3, #0]
}
 80034c2:	bf00      	nop
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034ce:	b480      	push	{r7}
 80034d0:	b085      	sub	sp, #20
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e4:	d103      	bne.n	80034ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	e00c      	b.n	8003508 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3308      	adds	r3, #8
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	e002      	b.n	80034fc <vListInsert+0x2e>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	429a      	cmp	r2, r3
 8003506:	d2f6      	bcs.n	80034f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	601a      	str	r2, [r3, #0]
}
 8003534:	bf00      	nop
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6892      	ldr	r2, [r2, #8]
 8003556:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6852      	ldr	r2, [r2, #4]
 8003560:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	429a      	cmp	r2, r3
 800356a:	d103      	bne.n	8003574 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	1e5a      	subs	r2, r3, #1
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10a      	bne.n	80035be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80035ba:	bf00      	nop
 80035bc:	e7fe      	b.n	80035bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80035be:	f002 f819 	bl	80055f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ca:	68f9      	ldr	r1, [r7, #12]
 80035cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80035ce:	fb01 f303 	mul.w	r3, r1, r3
 80035d2:	441a      	add	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ee:	3b01      	subs	r3, #1
 80035f0:	68f9      	ldr	r1, [r7, #12]
 80035f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80035f4:	fb01 f303 	mul.w	r3, r1, r3
 80035f8:	441a      	add	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	22ff      	movs	r2, #255	; 0xff
 8003602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	22ff      	movs	r2, #255	; 0xff
 800360a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d114      	bne.n	800363e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d01a      	beq.n	8003652 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	3310      	adds	r3, #16
 8003620:	4618      	mov	r0, r3
 8003622:	f001 f8cf 	bl	80047c4 <xTaskRemoveFromEventList>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d012      	beq.n	8003652 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800362c:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <xQueueGenericReset+0xcc>)
 800362e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	e009      	b.n	8003652 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	3310      	adds	r3, #16
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fef2 	bl	800342c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3324      	adds	r3, #36	; 0x24
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff feed 	bl	800342c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003652:	f001 ffff 	bl	8005654 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003656:	2301      	movs	r3, #1
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	e000ed04 	.word	0xe000ed04

08003664 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08e      	sub	sp, #56	; 0x38
 8003668:	af02      	add	r7, sp, #8
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10a      	bne.n	800368e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800368a:	bf00      	nop
 800368c:	e7fe      	b.n	800368c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10a      	bne.n	80036aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80036a6:	bf00      	nop
 80036a8:	e7fe      	b.n	80036a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d002      	beq.n	80036b6 <xQueueGenericCreateStatic+0x52>
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <xQueueGenericCreateStatic+0x56>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <xQueueGenericCreateStatic+0x58>
 80036ba:	2300      	movs	r3, #0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10a      	bne.n	80036d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80036c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	623b      	str	r3, [r7, #32]
}
 80036d2:	bf00      	nop
 80036d4:	e7fe      	b.n	80036d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d102      	bne.n	80036e2 <xQueueGenericCreateStatic+0x7e>
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <xQueueGenericCreateStatic+0x82>
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <xQueueGenericCreateStatic+0x84>
 80036e6:	2300      	movs	r3, #0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10a      	bne.n	8003702 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80036ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f0:	f383 8811 	msr	BASEPRI, r3
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	61fb      	str	r3, [r7, #28]
}
 80036fe:	bf00      	nop
 8003700:	e7fe      	b.n	8003700 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003702:	2350      	movs	r3, #80	; 0x50
 8003704:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2b50      	cmp	r3, #80	; 0x50
 800370a:	d00a      	beq.n	8003722 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800370c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003710:	f383 8811 	msr	BASEPRI, r3
 8003714:	f3bf 8f6f 	isb	sy
 8003718:	f3bf 8f4f 	dsb	sy
 800371c:	61bb      	str	r3, [r7, #24]
}
 800371e:	bf00      	nop
 8003720:	e7fe      	b.n	8003720 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003722:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00d      	beq.n	800374a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800372e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003736:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800373a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	4613      	mov	r3, r2
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	68b9      	ldr	r1, [r7, #8]
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 f805 	bl	8003754 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800374a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800374c:	4618      	mov	r0, r3
 800374e:	3730      	adds	r7, #48	; 0x30
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d103      	bne.n	8003770 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	e002      	b.n	8003776 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003782:	2101      	movs	r1, #1
 8003784:	69b8      	ldr	r0, [r7, #24]
 8003786:	f7ff ff05 	bl	8003594 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003792:	bf00      	nop
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08e      	sub	sp, #56	; 0x38
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037aa:	2300      	movs	r3, #0
 80037ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10a      	bne.n	80037ce <xQueueGenericSend+0x32>
	__asm volatile
 80037b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f3bf 8f6f 	isb	sy
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037ca:	bf00      	nop
 80037cc:	e7fe      	b.n	80037cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d103      	bne.n	80037dc <xQueueGenericSend+0x40>
 80037d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <xQueueGenericSend+0x44>
 80037dc:	2301      	movs	r3, #1
 80037de:	e000      	b.n	80037e2 <xQueueGenericSend+0x46>
 80037e0:	2300      	movs	r3, #0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10a      	bne.n	80037fc <xQueueGenericSend+0x60>
	__asm volatile
 80037e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ea:	f383 8811 	msr	BASEPRI, r3
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f3bf 8f4f 	dsb	sy
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037f8:	bf00      	nop
 80037fa:	e7fe      	b.n	80037fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d103      	bne.n	800380a <xQueueGenericSend+0x6e>
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <xQueueGenericSend+0x72>
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <xQueueGenericSend+0x74>
 800380e:	2300      	movs	r3, #0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10a      	bne.n	800382a <xQueueGenericSend+0x8e>
	__asm volatile
 8003814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003818:	f383 8811 	msr	BASEPRI, r3
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	623b      	str	r3, [r7, #32]
}
 8003826:	bf00      	nop
 8003828:	e7fe      	b.n	8003828 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800382a:	f001 f989 	bl	8004b40 <xTaskGetSchedulerState>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d102      	bne.n	800383a <xQueueGenericSend+0x9e>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <xQueueGenericSend+0xa2>
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <xQueueGenericSend+0xa4>
 800383e:	2300      	movs	r3, #0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10a      	bne.n	800385a <xQueueGenericSend+0xbe>
	__asm volatile
 8003844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003848:	f383 8811 	msr	BASEPRI, r3
 800384c:	f3bf 8f6f 	isb	sy
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	61fb      	str	r3, [r7, #28]
}
 8003856:	bf00      	nop
 8003858:	e7fe      	b.n	8003858 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800385a:	f001 fecb 	bl	80055f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003866:	429a      	cmp	r2, r3
 8003868:	d302      	bcc.n	8003870 <xQueueGenericSend+0xd4>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b02      	cmp	r3, #2
 800386e:	d129      	bne.n	80038c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	68b9      	ldr	r1, [r7, #8]
 8003874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003876:	f000 fa0b 	bl	8003c90 <prvCopyDataToQueue>
 800387a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	2b00      	cmp	r3, #0
 8003882:	d010      	beq.n	80038a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003886:	3324      	adds	r3, #36	; 0x24
 8003888:	4618      	mov	r0, r3
 800388a:	f000 ff9b 	bl	80047c4 <xTaskRemoveFromEventList>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d013      	beq.n	80038bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003894:	4b3f      	ldr	r3, [pc, #252]	; (8003994 <xQueueGenericSend+0x1f8>)
 8003896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	f3bf 8f6f 	isb	sy
 80038a4:	e00a      	b.n	80038bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80038a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d007      	beq.n	80038bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80038ac:	4b39      	ldr	r3, [pc, #228]	; (8003994 <xQueueGenericSend+0x1f8>)
 80038ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80038bc:	f001 feca 	bl	8005654 <vPortExitCritical>
				return pdPASS;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e063      	b.n	800398c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d103      	bne.n	80038d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038ca:	f001 fec3 	bl	8005654 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e05c      	b.n	800398c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d106      	bne.n	80038e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038d8:	f107 0314 	add.w	r3, r7, #20
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 ffd5 	bl	800488c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038e2:	2301      	movs	r3, #1
 80038e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038e6:	f001 feb5 	bl	8005654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038ea:	f000 fd47 	bl	800437c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038ee:	f001 fe81 	bl	80055f4 <vPortEnterCritical>
 80038f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038f8:	b25b      	sxtb	r3, r3
 80038fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fe:	d103      	bne.n	8003908 <xQueueGenericSend+0x16c>
 8003900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800390e:	b25b      	sxtb	r3, r3
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003914:	d103      	bne.n	800391e <xQueueGenericSend+0x182>
 8003916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800391e:	f001 fe99 	bl	8005654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003922:	1d3a      	adds	r2, r7, #4
 8003924:	f107 0314 	add.w	r3, r7, #20
 8003928:	4611      	mov	r1, r2
 800392a:	4618      	mov	r0, r3
 800392c:	f000 ffc4 	bl	80048b8 <xTaskCheckForTimeOut>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d124      	bne.n	8003980 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003936:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003938:	f000 faa2 	bl	8003e80 <prvIsQueueFull>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d018      	beq.n	8003974 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003944:	3310      	adds	r3, #16
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	4611      	mov	r1, r2
 800394a:	4618      	mov	r0, r3
 800394c:	f000 feea 	bl	8004724 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003950:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003952:	f000 fa2d 	bl	8003db0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003956:	f000 fd1f 	bl	8004398 <xTaskResumeAll>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	f47f af7c 	bne.w	800385a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003962:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <xQueueGenericSend+0x1f8>)
 8003964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	f3bf 8f6f 	isb	sy
 8003972:	e772      	b.n	800385a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003976:	f000 fa1b 	bl	8003db0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800397a:	f000 fd0d 	bl	8004398 <xTaskResumeAll>
 800397e:	e76c      	b.n	800385a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003980:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003982:	f000 fa15 	bl	8003db0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003986:	f000 fd07 	bl	8004398 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800398a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800398c:	4618      	mov	r0, r3
 800398e:	3738      	adds	r7, #56	; 0x38
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	e000ed04 	.word	0xe000ed04

08003998 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b090      	sub	sp, #64	; 0x40
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80039aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10a      	bne.n	80039c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80039b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039c2:	bf00      	nop
 80039c4:	e7fe      	b.n	80039c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d103      	bne.n	80039d4 <xQueueGenericSendFromISR+0x3c>
 80039cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <xQueueGenericSendFromISR+0x40>
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <xQueueGenericSendFromISR+0x42>
 80039d8:	2300      	movs	r3, #0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10a      	bne.n	80039f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80039de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e2:	f383 8811 	msr	BASEPRI, r3
 80039e6:	f3bf 8f6f 	isb	sy
 80039ea:	f3bf 8f4f 	dsb	sy
 80039ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039f0:	bf00      	nop
 80039f2:	e7fe      	b.n	80039f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d103      	bne.n	8003a02 <xQueueGenericSendFromISR+0x6a>
 80039fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <xQueueGenericSendFromISR+0x6e>
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <xQueueGenericSendFromISR+0x70>
 8003a06:	2300      	movs	r3, #0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	623b      	str	r3, [r7, #32]
}
 8003a1e:	bf00      	nop
 8003a20:	e7fe      	b.n	8003a20 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a22:	f001 fec9 	bl	80057b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a26:	f3ef 8211 	mrs	r2, BASEPRI
 8003a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2e:	f383 8811 	msr	BASEPRI, r3
 8003a32:	f3bf 8f6f 	isb	sy
 8003a36:	f3bf 8f4f 	dsb	sy
 8003a3a:	61fa      	str	r2, [r7, #28]
 8003a3c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a3e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a40:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d302      	bcc.n	8003a54 <xQueueGenericSendFromISR+0xbc>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d12f      	bne.n	8003ab4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a62:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	68b9      	ldr	r1, [r7, #8]
 8003a68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a6a:	f000 f911 	bl	8003c90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a6e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a76:	d112      	bne.n	8003a9e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d016      	beq.n	8003aae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a82:	3324      	adds	r3, #36	; 0x24
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 fe9d 	bl	80047c4 <xTaskRemoveFromEventList>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00e      	beq.n	8003aae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	e007      	b.n	8003aae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	b25a      	sxtb	r2, r3
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003ab2:	e001      	b.n	8003ab8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003ac2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3740      	adds	r7, #64	; 0x40
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08c      	sub	sp, #48	; 0x30
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003adc:	2300      	movs	r3, #0
 8003ade:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10a      	bne.n	8003b00 <xQueueReceive+0x30>
	__asm volatile
 8003aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	623b      	str	r3, [r7, #32]
}
 8003afc:	bf00      	nop
 8003afe:	e7fe      	b.n	8003afe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d103      	bne.n	8003b0e <xQueueReceive+0x3e>
 8003b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <xQueueReceive+0x42>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <xQueueReceive+0x44>
 8003b12:	2300      	movs	r3, #0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10a      	bne.n	8003b2e <xQueueReceive+0x5e>
	__asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	61fb      	str	r3, [r7, #28]
}
 8003b2a:	bf00      	nop
 8003b2c:	e7fe      	b.n	8003b2c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b2e:	f001 f807 	bl	8004b40 <xTaskGetSchedulerState>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d102      	bne.n	8003b3e <xQueueReceive+0x6e>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <xQueueReceive+0x72>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <xQueueReceive+0x74>
 8003b42:	2300      	movs	r3, #0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10a      	bne.n	8003b5e <xQueueReceive+0x8e>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	61bb      	str	r3, [r7, #24]
}
 8003b5a:	bf00      	nop
 8003b5c:	e7fe      	b.n	8003b5c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b5e:	f001 fd49 	bl	80055f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01f      	beq.n	8003bae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b6e:	68b9      	ldr	r1, [r7, #8]
 8003b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b72:	f000 f8f7 	bl	8003d64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	1e5a      	subs	r2, r3, #1
 8003b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00f      	beq.n	8003ba6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b88:	3310      	adds	r3, #16
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 fe1a 	bl	80047c4 <xTaskRemoveFromEventList>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d007      	beq.n	8003ba6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b96:	4b3d      	ldr	r3, [pc, #244]	; (8003c8c <xQueueReceive+0x1bc>)
 8003b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ba6:	f001 fd55 	bl	8005654 <vPortExitCritical>
				return pdPASS;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e069      	b.n	8003c82 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d103      	bne.n	8003bbc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bb4:	f001 fd4e 	bl	8005654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	e062      	b.n	8003c82 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bc2:	f107 0310 	add.w	r3, r7, #16
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 fe60 	bl	800488c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bd0:	f001 fd40 	bl	8005654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bd4:	f000 fbd2 	bl	800437c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bd8:	f001 fd0c 	bl	80055f4 <vPortEnterCritical>
 8003bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003be2:	b25b      	sxtb	r3, r3
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be8:	d103      	bne.n	8003bf2 <xQueueReceive+0x122>
 8003bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bf8:	b25b      	sxtb	r3, r3
 8003bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfe:	d103      	bne.n	8003c08 <xQueueReceive+0x138>
 8003c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c08:	f001 fd24 	bl	8005654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c0c:	1d3a      	adds	r2, r7, #4
 8003c0e:	f107 0310 	add.w	r3, r7, #16
 8003c12:	4611      	mov	r1, r2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fe4f 	bl	80048b8 <xTaskCheckForTimeOut>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d123      	bne.n	8003c68 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c22:	f000 f917 	bl	8003e54 <prvIsQueueEmpty>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d017      	beq.n	8003c5c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2e:	3324      	adds	r3, #36	; 0x24
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	4611      	mov	r1, r2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fd75 	bl	8004724 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c3c:	f000 f8b8 	bl	8003db0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c40:	f000 fbaa 	bl	8004398 <xTaskResumeAll>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d189      	bne.n	8003b5e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003c4a:	4b10      	ldr	r3, [pc, #64]	; (8003c8c <xQueueReceive+0x1bc>)
 8003c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	f3bf 8f6f 	isb	sy
 8003c5a:	e780      	b.n	8003b5e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c5e:	f000 f8a7 	bl	8003db0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c62:	f000 fb99 	bl	8004398 <xTaskResumeAll>
 8003c66:	e77a      	b.n	8003b5e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c6a:	f000 f8a1 	bl	8003db0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c6e:	f000 fb93 	bl	8004398 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c74:	f000 f8ee 	bl	8003e54 <prvIsQueueEmpty>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f43f af6f 	beq.w	8003b5e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3730      	adds	r7, #48	; 0x30
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	e000ed04 	.word	0xe000ed04

08003c90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10d      	bne.n	8003cca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d14d      	bne.n	8003d52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 ff5e 	bl	8004b7c <xTaskPriorityDisinherit>
 8003cc0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	609a      	str	r2, [r3, #8]
 8003cc8:	e043      	b.n	8003d52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d119      	bne.n	8003d04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6858      	ldr	r0, [r3, #4]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	461a      	mov	r2, r3
 8003cda:	68b9      	ldr	r1, [r7, #8]
 8003cdc:	f002 fe4e 	bl	800697c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	441a      	add	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d32b      	bcc.n	8003d52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	605a      	str	r2, [r3, #4]
 8003d02:	e026      	b.n	8003d52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	68d8      	ldr	r0, [r3, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	68b9      	ldr	r1, [r7, #8]
 8003d10:	f002 fe34 	bl	800697c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	425b      	negs	r3, r3
 8003d1e:	441a      	add	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d207      	bcs.n	8003d40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	425b      	negs	r3, r3
 8003d3a:	441a      	add	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d105      	bne.n	8003d52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1c5a      	adds	r2, r3, #1
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003d5a:	697b      	ldr	r3, [r7, #20]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d018      	beq.n	8003da8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	441a      	add	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d303      	bcc.n	8003d98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68d9      	ldr	r1, [r3, #12]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	461a      	mov	r2, r3
 8003da2:	6838      	ldr	r0, [r7, #0]
 8003da4:	f002 fdea 	bl	800697c <memcpy>
	}
}
 8003da8:	bf00      	nop
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003db8:	f001 fc1c 	bl	80055f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003dc4:	e011      	b.n	8003dea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d012      	beq.n	8003df4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3324      	adds	r3, #36	; 0x24
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fcf6 	bl	80047c4 <xTaskRemoveFromEventList>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003dde:	f000 fdcd 	bl	800497c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	dce9      	bgt.n	8003dc6 <prvUnlockQueue+0x16>
 8003df2:	e000      	b.n	8003df6 <prvUnlockQueue+0x46>
					break;
 8003df4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	22ff      	movs	r2, #255	; 0xff
 8003dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003dfe:	f001 fc29 	bl	8005654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e02:	f001 fbf7 	bl	80055f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e0e:	e011      	b.n	8003e34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d012      	beq.n	8003e3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3310      	adds	r3, #16
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fcd1 	bl	80047c4 <xTaskRemoveFromEventList>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e28:	f000 fda8 	bl	800497c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e2c:	7bbb      	ldrb	r3, [r7, #14]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	dce9      	bgt.n	8003e10 <prvUnlockQueue+0x60>
 8003e3c:	e000      	b.n	8003e40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	22ff      	movs	r2, #255	; 0xff
 8003e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003e48:	f001 fc04 	bl	8005654 <vPortExitCritical>
}
 8003e4c:	bf00      	nop
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e5c:	f001 fbca 	bl	80055f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d102      	bne.n	8003e6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	e001      	b.n	8003e72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e72:	f001 fbef 	bl	8005654 <vPortExitCritical>

	return xReturn;
 8003e76:	68fb      	ldr	r3, [r7, #12]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e88:	f001 fbb4 	bl	80055f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d102      	bne.n	8003e9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	e001      	b.n	8003ea2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ea2:	f001 fbd7 	bl	8005654 <vPortExitCritical>

	return xReturn;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	e014      	b.n	8003eea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ec0:	4a0f      	ldr	r2, [pc, #60]	; (8003f00 <vQueueAddToRegistry+0x50>)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10b      	bne.n	8003ee4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ecc:	490c      	ldr	r1, [pc, #48]	; (8003f00 <vQueueAddToRegistry+0x50>)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003ed6:	4a0a      	ldr	r2, [pc, #40]	; (8003f00 <vQueueAddToRegistry+0x50>)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4413      	add	r3, r2
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003ee2:	e006      	b.n	8003ef2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b07      	cmp	r3, #7
 8003eee:	d9e7      	bls.n	8003ec0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ef0:	bf00      	nop
 8003ef2:	bf00      	nop
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	20004a50 	.word	0x20004a50

08003f04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003f14:	f001 fb6e 	bl	80055f4 <vPortEnterCritical>
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f1e:	b25b      	sxtb	r3, r3
 8003f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f24:	d103      	bne.n	8003f2e <vQueueWaitForMessageRestricted+0x2a>
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f34:	b25b      	sxtb	r3, r3
 8003f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3a:	d103      	bne.n	8003f44 <vQueueWaitForMessageRestricted+0x40>
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f44:	f001 fb86 	bl	8005654 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d106      	bne.n	8003f5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	3324      	adds	r3, #36	; 0x24
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	68b9      	ldr	r1, [r7, #8]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fc07 	bl	800476c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003f5e:	6978      	ldr	r0, [r7, #20]
 8003f60:	f7ff ff26 	bl	8003db0 <prvUnlockQueue>
	}
 8003f64:	bf00      	nop
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08e      	sub	sp, #56	; 0x38
 8003f70:	af04      	add	r7, sp, #16
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10a      	bne.n	8003f96 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f84:	f383 8811 	msr	BASEPRI, r3
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	623b      	str	r3, [r7, #32]
}
 8003f92:	bf00      	nop
 8003f94:	e7fe      	b.n	8003f94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10a      	bne.n	8003fb2 <xTaskCreateStatic+0x46>
	__asm volatile
 8003f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa0:	f383 8811 	msr	BASEPRI, r3
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	61fb      	str	r3, [r7, #28]
}
 8003fae:	bf00      	nop
 8003fb0:	e7fe      	b.n	8003fb0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003fb2:	235c      	movs	r3, #92	; 0x5c
 8003fb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	2b5c      	cmp	r3, #92	; 0x5c
 8003fba:	d00a      	beq.n	8003fd2 <xTaskCreateStatic+0x66>
	__asm volatile
 8003fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc0:	f383 8811 	msr	BASEPRI, r3
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	61bb      	str	r3, [r7, #24]
}
 8003fce:	bf00      	nop
 8003fd0:	e7fe      	b.n	8003fd0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003fd2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d01e      	beq.n	8004018 <xTaskCreateStatic+0xac>
 8003fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d01b      	beq.n	8004018 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	2202      	movs	r2, #2
 8003fee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	9303      	str	r3, [sp, #12]
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	9302      	str	r3, [sp, #8]
 8003ffa:	f107 0314 	add.w	r3, r7, #20
 8003ffe:	9301      	str	r3, [sp, #4]
 8004000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	68b9      	ldr	r1, [r7, #8]
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 f850 	bl	80040b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004012:	f000 f8dd 	bl	80041d0 <prvAddNewTaskToReadyList>
 8004016:	e001      	b.n	800401c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800401c:	697b      	ldr	r3, [r7, #20]
	}
 800401e:	4618      	mov	r0, r3
 8004020:	3728      	adds	r7, #40	; 0x28
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004026:	b580      	push	{r7, lr}
 8004028:	b08c      	sub	sp, #48	; 0x30
 800402a:	af04      	add	r7, sp, #16
 800402c:	60f8      	str	r0, [r7, #12]
 800402e:	60b9      	str	r1, [r7, #8]
 8004030:	603b      	str	r3, [r7, #0]
 8004032:	4613      	mov	r3, r2
 8004034:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004036:	88fb      	ldrh	r3, [r7, #6]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4618      	mov	r0, r3
 800403c:	f001 fbfc 	bl	8005838 <pvPortMalloc>
 8004040:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00e      	beq.n	8004066 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004048:	205c      	movs	r0, #92	; 0x5c
 800404a:	f001 fbf5 	bl	8005838 <pvPortMalloc>
 800404e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	631a      	str	r2, [r3, #48]	; 0x30
 800405c:	e005      	b.n	800406a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800405e:	6978      	ldr	r0, [r7, #20]
 8004060:	f001 fcb6 	bl	80059d0 <vPortFree>
 8004064:	e001      	b.n	800406a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004066:	2300      	movs	r3, #0
 8004068:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d017      	beq.n	80040a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004078:	88fa      	ldrh	r2, [r7, #6]
 800407a:	2300      	movs	r3, #0
 800407c:	9303      	str	r3, [sp, #12]
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	9302      	str	r3, [sp, #8]
 8004082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68b9      	ldr	r1, [r7, #8]
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 f80e 	bl	80040b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004094:	69f8      	ldr	r0, [r7, #28]
 8004096:	f000 f89b 	bl	80041d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800409a:	2301      	movs	r3, #1
 800409c:	61bb      	str	r3, [r7, #24]
 800409e:	e002      	b.n	80040a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040a0:	f04f 33ff 	mov.w	r3, #4294967295
 80040a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040a6:	69bb      	ldr	r3, [r7, #24]
	}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3720      	adds	r7, #32
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80040be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	461a      	mov	r2, r3
 80040c8:	21a5      	movs	r1, #165	; 0xa5
 80040ca:	f002 fc65 	bl	8006998 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80040ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040d8:	3b01      	subs	r3, #1
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	f023 0307 	bic.w	r3, r3, #7
 80040e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <prvInitialiseNewTask+0x58>
	__asm volatile
 80040f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f6:	f383 8811 	msr	BASEPRI, r3
 80040fa:	f3bf 8f6f 	isb	sy
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	617b      	str	r3, [r7, #20]
}
 8004104:	bf00      	nop
 8004106:	e7fe      	b.n	8004106 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d01f      	beq.n	800414e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800410e:	2300      	movs	r3, #0
 8004110:	61fb      	str	r3, [r7, #28]
 8004112:	e012      	b.n	800413a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	4413      	add	r3, r2
 800411a:	7819      	ldrb	r1, [r3, #0]
 800411c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	4413      	add	r3, r2
 8004122:	3334      	adds	r3, #52	; 0x34
 8004124:	460a      	mov	r2, r1
 8004126:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	4413      	add	r3, r2
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d006      	beq.n	8004142 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	3301      	adds	r3, #1
 8004138:	61fb      	str	r3, [r7, #28]
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	2b0f      	cmp	r3, #15
 800413e:	d9e9      	bls.n	8004114 <prvInitialiseNewTask+0x64>
 8004140:	e000      	b.n	8004144 <prvInitialiseNewTask+0x94>
			{
				break;
 8004142:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800414c:	e003      	b.n	8004156 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800414e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004158:	2b37      	cmp	r3, #55	; 0x37
 800415a:	d901      	bls.n	8004160 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800415c:	2337      	movs	r3, #55	; 0x37
 800415e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004164:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800416a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800416c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416e:	2200      	movs	r2, #0
 8004170:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004174:	3304      	adds	r3, #4
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff f978 	bl	800346c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800417c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417e:	3318      	adds	r3, #24
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff f973 	bl	800346c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800418a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800418c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004194:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800419a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419e:	2200      	movs	r2, #0
 80041a0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	68f9      	ldr	r1, [r7, #12]
 80041ae:	69b8      	ldr	r0, [r7, #24]
 80041b0:	f001 f8f4 	bl	800539c <pxPortInitialiseStack>
 80041b4:	4602      	mov	r2, r0
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80041ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041c6:	bf00      	nop
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041d8:	f001 fa0c 	bl	80055f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041dc:	4b2d      	ldr	r3, [pc, #180]	; (8004294 <prvAddNewTaskToReadyList+0xc4>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3301      	adds	r3, #1
 80041e2:	4a2c      	ldr	r2, [pc, #176]	; (8004294 <prvAddNewTaskToReadyList+0xc4>)
 80041e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80041e6:	4b2c      	ldr	r3, [pc, #176]	; (8004298 <prvAddNewTaskToReadyList+0xc8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80041ee:	4a2a      	ldr	r2, [pc, #168]	; (8004298 <prvAddNewTaskToReadyList+0xc8>)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041f4:	4b27      	ldr	r3, [pc, #156]	; (8004294 <prvAddNewTaskToReadyList+0xc4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d110      	bne.n	800421e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80041fc:	f000 fbe2 	bl	80049c4 <prvInitialiseTaskLists>
 8004200:	e00d      	b.n	800421e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004202:	4b26      	ldr	r3, [pc, #152]	; (800429c <prvAddNewTaskToReadyList+0xcc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d109      	bne.n	800421e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800420a:	4b23      	ldr	r3, [pc, #140]	; (8004298 <prvAddNewTaskToReadyList+0xc8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	429a      	cmp	r2, r3
 8004216:	d802      	bhi.n	800421e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004218:	4a1f      	ldr	r2, [pc, #124]	; (8004298 <prvAddNewTaskToReadyList+0xc8>)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800421e:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <prvAddNewTaskToReadyList+0xd0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3301      	adds	r3, #1
 8004224:	4a1e      	ldr	r2, [pc, #120]	; (80042a0 <prvAddNewTaskToReadyList+0xd0>)
 8004226:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004228:	4b1d      	ldr	r3, [pc, #116]	; (80042a0 <prvAddNewTaskToReadyList+0xd0>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004234:	4b1b      	ldr	r3, [pc, #108]	; (80042a4 <prvAddNewTaskToReadyList+0xd4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d903      	bls.n	8004244 <prvAddNewTaskToReadyList+0x74>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	4a18      	ldr	r2, [pc, #96]	; (80042a4 <prvAddNewTaskToReadyList+0xd4>)
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004248:	4613      	mov	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4a15      	ldr	r2, [pc, #84]	; (80042a8 <prvAddNewTaskToReadyList+0xd8>)
 8004252:	441a      	add	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3304      	adds	r3, #4
 8004258:	4619      	mov	r1, r3
 800425a:	4610      	mov	r0, r2
 800425c:	f7ff f913 	bl	8003486 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004260:	f001 f9f8 	bl	8005654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004264:	4b0d      	ldr	r3, [pc, #52]	; (800429c <prvAddNewTaskToReadyList+0xcc>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00e      	beq.n	800428a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800426c:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <prvAddNewTaskToReadyList+0xc8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004276:	429a      	cmp	r2, r3
 8004278:	d207      	bcs.n	800428a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800427a:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <prvAddNewTaskToReadyList+0xdc>)
 800427c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800428a:	bf00      	nop
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20000c2c 	.word	0x20000c2c
 8004298:	20000758 	.word	0x20000758
 800429c:	20000c38 	.word	0x20000c38
 80042a0:	20000c48 	.word	0x20000c48
 80042a4:	20000c34 	.word	0x20000c34
 80042a8:	2000075c 	.word	0x2000075c
 80042ac:	e000ed04 	.word	0xe000ed04

080042b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08a      	sub	sp, #40	; 0x28
 80042b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042be:	463a      	mov	r2, r7
 80042c0:	1d39      	adds	r1, r7, #4
 80042c2:	f107 0308 	add.w	r3, r7, #8
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff f87c 	bl	80033c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80042cc:	6839      	ldr	r1, [r7, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	9202      	str	r2, [sp, #8]
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	2300      	movs	r3, #0
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	2300      	movs	r3, #0
 80042dc:	460a      	mov	r2, r1
 80042de:	4921      	ldr	r1, [pc, #132]	; (8004364 <vTaskStartScheduler+0xb4>)
 80042e0:	4821      	ldr	r0, [pc, #132]	; (8004368 <vTaskStartScheduler+0xb8>)
 80042e2:	f7ff fe43 	bl	8003f6c <xTaskCreateStatic>
 80042e6:	4603      	mov	r3, r0
 80042e8:	4a20      	ldr	r2, [pc, #128]	; (800436c <vTaskStartScheduler+0xbc>)
 80042ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042ec:	4b1f      	ldr	r3, [pc, #124]	; (800436c <vTaskStartScheduler+0xbc>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042f4:	2301      	movs	r3, #1
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	e001      	b.n	80042fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d102      	bne.n	800430a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004304:	f000 fcfc 	bl	8004d00 <xTimerCreateTimerTask>
 8004308:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d116      	bne.n	800433e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	613b      	str	r3, [r7, #16]
}
 8004322:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004324:	4b12      	ldr	r3, [pc, #72]	; (8004370 <vTaskStartScheduler+0xc0>)
 8004326:	f04f 32ff 	mov.w	r2, #4294967295
 800432a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800432c:	4b11      	ldr	r3, [pc, #68]	; (8004374 <vTaskStartScheduler+0xc4>)
 800432e:	2201      	movs	r2, #1
 8004330:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004332:	4b11      	ldr	r3, [pc, #68]	; (8004378 <vTaskStartScheduler+0xc8>)
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004338:	f001 f8ba 	bl	80054b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800433c:	e00e      	b.n	800435c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004344:	d10a      	bne.n	800435c <vTaskStartScheduler+0xac>
	__asm volatile
 8004346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	60fb      	str	r3, [r7, #12]
}
 8004358:	bf00      	nop
 800435a:	e7fe      	b.n	800435a <vTaskStartScheduler+0xaa>
}
 800435c:	bf00      	nop
 800435e:	3718      	adds	r7, #24
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	08007228 	.word	0x08007228
 8004368:	08004995 	.word	0x08004995
 800436c:	20000c50 	.word	0x20000c50
 8004370:	20000c4c 	.word	0x20000c4c
 8004374:	20000c38 	.word	0x20000c38
 8004378:	20000c30 	.word	0x20000c30

0800437c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004380:	4b04      	ldr	r3, [pc, #16]	; (8004394 <vTaskSuspendAll+0x18>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3301      	adds	r3, #1
 8004386:	4a03      	ldr	r2, [pc, #12]	; (8004394 <vTaskSuspendAll+0x18>)
 8004388:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800438a:	bf00      	nop
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	20000c54 	.word	0x20000c54

08004398 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043a6:	4b42      	ldr	r3, [pc, #264]	; (80044b0 <xTaskResumeAll+0x118>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10a      	bne.n	80043c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	603b      	str	r3, [r7, #0]
}
 80043c0:	bf00      	nop
 80043c2:	e7fe      	b.n	80043c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043c4:	f001 f916 	bl	80055f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043c8:	4b39      	ldr	r3, [pc, #228]	; (80044b0 <xTaskResumeAll+0x118>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	4a38      	ldr	r2, [pc, #224]	; (80044b0 <xTaskResumeAll+0x118>)
 80043d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043d2:	4b37      	ldr	r3, [pc, #220]	; (80044b0 <xTaskResumeAll+0x118>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d162      	bne.n	80044a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043da:	4b36      	ldr	r3, [pc, #216]	; (80044b4 <xTaskResumeAll+0x11c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d05e      	beq.n	80044a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043e2:	e02f      	b.n	8004444 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043e4:	4b34      	ldr	r3, [pc, #208]	; (80044b8 <xTaskResumeAll+0x120>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	3318      	adds	r3, #24
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff f8a5 	bl	8003540 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	3304      	adds	r3, #4
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff f8a0 	bl	8003540 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004404:	4b2d      	ldr	r3, [pc, #180]	; (80044bc <xTaskResumeAll+0x124>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	d903      	bls.n	8004414 <xTaskResumeAll+0x7c>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004410:	4a2a      	ldr	r2, [pc, #168]	; (80044bc <xTaskResumeAll+0x124>)
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4a27      	ldr	r2, [pc, #156]	; (80044c0 <xTaskResumeAll+0x128>)
 8004422:	441a      	add	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	3304      	adds	r3, #4
 8004428:	4619      	mov	r1, r3
 800442a:	4610      	mov	r0, r2
 800442c:	f7ff f82b 	bl	8003486 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004434:	4b23      	ldr	r3, [pc, #140]	; (80044c4 <xTaskResumeAll+0x12c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	429a      	cmp	r2, r3
 800443c:	d302      	bcc.n	8004444 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800443e:	4b22      	ldr	r3, [pc, #136]	; (80044c8 <xTaskResumeAll+0x130>)
 8004440:	2201      	movs	r2, #1
 8004442:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004444:	4b1c      	ldr	r3, [pc, #112]	; (80044b8 <xTaskResumeAll+0x120>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1cb      	bne.n	80043e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004452:	f000 fb55 	bl	8004b00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004456:	4b1d      	ldr	r3, [pc, #116]	; (80044cc <xTaskResumeAll+0x134>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d010      	beq.n	8004484 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004462:	f000 f847 	bl	80044f4 <xTaskIncrementTick>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800446c:	4b16      	ldr	r3, [pc, #88]	; (80044c8 <xTaskResumeAll+0x130>)
 800446e:	2201      	movs	r2, #1
 8004470:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3b01      	subs	r3, #1
 8004476:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f1      	bne.n	8004462 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800447e:	4b13      	ldr	r3, [pc, #76]	; (80044cc <xTaskResumeAll+0x134>)
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004484:	4b10      	ldr	r3, [pc, #64]	; (80044c8 <xTaskResumeAll+0x130>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d009      	beq.n	80044a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800448c:	2301      	movs	r3, #1
 800448e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004490:	4b0f      	ldr	r3, [pc, #60]	; (80044d0 <xTaskResumeAll+0x138>)
 8004492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044a0:	f001 f8d8 	bl	8005654 <vPortExitCritical>

	return xAlreadyYielded;
 80044a4:	68bb      	ldr	r3, [r7, #8]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20000c54 	.word	0x20000c54
 80044b4:	20000c2c 	.word	0x20000c2c
 80044b8:	20000bec 	.word	0x20000bec
 80044bc:	20000c34 	.word	0x20000c34
 80044c0:	2000075c 	.word	0x2000075c
 80044c4:	20000758 	.word	0x20000758
 80044c8:	20000c40 	.word	0x20000c40
 80044cc:	20000c3c 	.word	0x20000c3c
 80044d0:	e000ed04 	.word	0xe000ed04

080044d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80044da:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <xTaskGetTickCount+0x1c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80044e0:	687b      	ldr	r3, [r7, #4]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	20000c30 	.word	0x20000c30

080044f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044fe:	4b4f      	ldr	r3, [pc, #316]	; (800463c <xTaskIncrementTick+0x148>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f040 808f 	bne.w	8004626 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004508:	4b4d      	ldr	r3, [pc, #308]	; (8004640 <xTaskIncrementTick+0x14c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3301      	adds	r3, #1
 800450e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004510:	4a4b      	ldr	r2, [pc, #300]	; (8004640 <xTaskIncrementTick+0x14c>)
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d120      	bne.n	800455e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800451c:	4b49      	ldr	r3, [pc, #292]	; (8004644 <xTaskIncrementTick+0x150>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <xTaskIncrementTick+0x48>
	__asm volatile
 8004526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	603b      	str	r3, [r7, #0]
}
 8004538:	bf00      	nop
 800453a:	e7fe      	b.n	800453a <xTaskIncrementTick+0x46>
 800453c:	4b41      	ldr	r3, [pc, #260]	; (8004644 <xTaskIncrementTick+0x150>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	4b41      	ldr	r3, [pc, #260]	; (8004648 <xTaskIncrementTick+0x154>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a3f      	ldr	r2, [pc, #252]	; (8004644 <xTaskIncrementTick+0x150>)
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	4a3f      	ldr	r2, [pc, #252]	; (8004648 <xTaskIncrementTick+0x154>)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	4b3e      	ldr	r3, [pc, #248]	; (800464c <xTaskIncrementTick+0x158>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3301      	adds	r3, #1
 8004556:	4a3d      	ldr	r2, [pc, #244]	; (800464c <xTaskIncrementTick+0x158>)
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	f000 fad1 	bl	8004b00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800455e:	4b3c      	ldr	r3, [pc, #240]	; (8004650 <xTaskIncrementTick+0x15c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	429a      	cmp	r2, r3
 8004566:	d349      	bcc.n	80045fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004568:	4b36      	ldr	r3, [pc, #216]	; (8004644 <xTaskIncrementTick+0x150>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d104      	bne.n	800457c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004572:	4b37      	ldr	r3, [pc, #220]	; (8004650 <xTaskIncrementTick+0x15c>)
 8004574:	f04f 32ff 	mov.w	r2, #4294967295
 8004578:	601a      	str	r2, [r3, #0]
					break;
 800457a:	e03f      	b.n	80045fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800457c:	4b31      	ldr	r3, [pc, #196]	; (8004644 <xTaskIncrementTick+0x150>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	429a      	cmp	r2, r3
 8004592:	d203      	bcs.n	800459c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004594:	4a2e      	ldr	r2, [pc, #184]	; (8004650 <xTaskIncrementTick+0x15c>)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800459a:	e02f      	b.n	80045fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	3304      	adds	r3, #4
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fe ffcd 	bl	8003540 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d004      	beq.n	80045b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	3318      	adds	r3, #24
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fe ffc4 	bl	8003540 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045bc:	4b25      	ldr	r3, [pc, #148]	; (8004654 <xTaskIncrementTick+0x160>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d903      	bls.n	80045cc <xTaskIncrementTick+0xd8>
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c8:	4a22      	ldr	r2, [pc, #136]	; (8004654 <xTaskIncrementTick+0x160>)
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d0:	4613      	mov	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4a1f      	ldr	r2, [pc, #124]	; (8004658 <xTaskIncrementTick+0x164>)
 80045da:	441a      	add	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	3304      	adds	r3, #4
 80045e0:	4619      	mov	r1, r3
 80045e2:	4610      	mov	r0, r2
 80045e4:	f7fe ff4f 	bl	8003486 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ec:	4b1b      	ldr	r3, [pc, #108]	; (800465c <xTaskIncrementTick+0x168>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d3b8      	bcc.n	8004568 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80045f6:	2301      	movs	r3, #1
 80045f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045fa:	e7b5      	b.n	8004568 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045fc:	4b17      	ldr	r3, [pc, #92]	; (800465c <xTaskIncrementTick+0x168>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004602:	4915      	ldr	r1, [pc, #84]	; (8004658 <xTaskIncrementTick+0x164>)
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	440b      	add	r3, r1
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d901      	bls.n	8004618 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004614:	2301      	movs	r3, #1
 8004616:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004618:	4b11      	ldr	r3, [pc, #68]	; (8004660 <xTaskIncrementTick+0x16c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d007      	beq.n	8004630 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004620:	2301      	movs	r3, #1
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e004      	b.n	8004630 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004626:	4b0f      	ldr	r3, [pc, #60]	; (8004664 <xTaskIncrementTick+0x170>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3301      	adds	r3, #1
 800462c:	4a0d      	ldr	r2, [pc, #52]	; (8004664 <xTaskIncrementTick+0x170>)
 800462e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004630:	697b      	ldr	r3, [r7, #20]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3718      	adds	r7, #24
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	20000c54 	.word	0x20000c54
 8004640:	20000c30 	.word	0x20000c30
 8004644:	20000be4 	.word	0x20000be4
 8004648:	20000be8 	.word	0x20000be8
 800464c:	20000c44 	.word	0x20000c44
 8004650:	20000c4c 	.word	0x20000c4c
 8004654:	20000c34 	.word	0x20000c34
 8004658:	2000075c 	.word	0x2000075c
 800465c:	20000758 	.word	0x20000758
 8004660:	20000c40 	.word	0x20000c40
 8004664:	20000c3c 	.word	0x20000c3c

08004668 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800466e:	4b28      	ldr	r3, [pc, #160]	; (8004710 <vTaskSwitchContext+0xa8>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004676:	4b27      	ldr	r3, [pc, #156]	; (8004714 <vTaskSwitchContext+0xac>)
 8004678:	2201      	movs	r2, #1
 800467a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800467c:	e041      	b.n	8004702 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800467e:	4b25      	ldr	r3, [pc, #148]	; (8004714 <vTaskSwitchContext+0xac>)
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004684:	4b24      	ldr	r3, [pc, #144]	; (8004718 <vTaskSwitchContext+0xb0>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	e010      	b.n	80046ae <vTaskSwitchContext+0x46>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10a      	bne.n	80046a8 <vTaskSwitchContext+0x40>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	607b      	str	r3, [r7, #4]
}
 80046a4:	bf00      	nop
 80046a6:	e7fe      	b.n	80046a6 <vTaskSwitchContext+0x3e>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	491b      	ldr	r1, [pc, #108]	; (800471c <vTaskSwitchContext+0xb4>)
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	4613      	mov	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	440b      	add	r3, r1
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0e4      	beq.n	800468c <vTaskSwitchContext+0x24>
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4a13      	ldr	r2, [pc, #76]	; (800471c <vTaskSwitchContext+0xb4>)
 80046ce:	4413      	add	r3, r2
 80046d0:	60bb      	str	r3, [r7, #8]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	605a      	str	r2, [r3, #4]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	3308      	adds	r3, #8
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d104      	bne.n	80046f2 <vTaskSwitchContext+0x8a>
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	605a      	str	r2, [r3, #4]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	4a09      	ldr	r2, [pc, #36]	; (8004720 <vTaskSwitchContext+0xb8>)
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	4a06      	ldr	r2, [pc, #24]	; (8004718 <vTaskSwitchContext+0xb0>)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6013      	str	r3, [r2, #0]
}
 8004702:	bf00      	nop
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	20000c54 	.word	0x20000c54
 8004714:	20000c40 	.word	0x20000c40
 8004718:	20000c34 	.word	0x20000c34
 800471c:	2000075c 	.word	0x2000075c
 8004720:	20000758 	.word	0x20000758

08004724 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10a      	bne.n	800474a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	60fb      	str	r3, [r7, #12]
}
 8004746:	bf00      	nop
 8004748:	e7fe      	b.n	8004748 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800474a:	4b07      	ldr	r3, [pc, #28]	; (8004768 <vTaskPlaceOnEventList+0x44>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3318      	adds	r3, #24
 8004750:	4619      	mov	r1, r3
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fe febb 	bl	80034ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004758:	2101      	movs	r1, #1
 800475a:	6838      	ldr	r0, [r7, #0]
 800475c:	f000 fa7c 	bl	8004c58 <prvAddCurrentTaskToDelayedList>
}
 8004760:	bf00      	nop
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	20000758 	.word	0x20000758

0800476c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10a      	bne.n	8004794 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	617b      	str	r3, [r7, #20]
}
 8004790:	bf00      	nop
 8004792:	e7fe      	b.n	8004792 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004794:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3318      	adds	r3, #24
 800479a:	4619      	mov	r1, r3
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f7fe fe72 	bl	8003486 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80047a8:	f04f 33ff 	mov.w	r3, #4294967295
 80047ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	68b8      	ldr	r0, [r7, #8]
 80047b2:	f000 fa51 	bl	8004c58 <prvAddCurrentTaskToDelayedList>
	}
 80047b6:	bf00      	nop
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	20000758 	.word	0x20000758

080047c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10a      	bne.n	80047f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	60fb      	str	r3, [r7, #12]
}
 80047ec:	bf00      	nop
 80047ee:	e7fe      	b.n	80047ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	3318      	adds	r3, #24
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7fe fea3 	bl	8003540 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047fa:	4b1e      	ldr	r3, [pc, #120]	; (8004874 <xTaskRemoveFromEventList+0xb0>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d11d      	bne.n	800483e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	3304      	adds	r3, #4
 8004806:	4618      	mov	r0, r3
 8004808:	f7fe fe9a 	bl	8003540 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004810:	4b19      	ldr	r3, [pc, #100]	; (8004878 <xTaskRemoveFromEventList+0xb4>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	429a      	cmp	r2, r3
 8004816:	d903      	bls.n	8004820 <xTaskRemoveFromEventList+0x5c>
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	4a16      	ldr	r2, [pc, #88]	; (8004878 <xTaskRemoveFromEventList+0xb4>)
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4a13      	ldr	r2, [pc, #76]	; (800487c <xTaskRemoveFromEventList+0xb8>)
 800482e:	441a      	add	r2, r3
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	3304      	adds	r3, #4
 8004834:	4619      	mov	r1, r3
 8004836:	4610      	mov	r0, r2
 8004838:	f7fe fe25 	bl	8003486 <vListInsertEnd>
 800483c:	e005      	b.n	800484a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	3318      	adds	r3, #24
 8004842:	4619      	mov	r1, r3
 8004844:	480e      	ldr	r0, [pc, #56]	; (8004880 <xTaskRemoveFromEventList+0xbc>)
 8004846:	f7fe fe1e 	bl	8003486 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484e:	4b0d      	ldr	r3, [pc, #52]	; (8004884 <xTaskRemoveFromEventList+0xc0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	429a      	cmp	r2, r3
 8004856:	d905      	bls.n	8004864 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004858:	2301      	movs	r3, #1
 800485a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800485c:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <xTaskRemoveFromEventList+0xc4>)
 800485e:	2201      	movs	r2, #1
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	e001      	b.n	8004868 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004864:	2300      	movs	r3, #0
 8004866:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004868:	697b      	ldr	r3, [r7, #20]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20000c54 	.word	0x20000c54
 8004878:	20000c34 	.word	0x20000c34
 800487c:	2000075c 	.word	0x2000075c
 8004880:	20000bec 	.word	0x20000bec
 8004884:	20000758 	.word	0x20000758
 8004888:	20000c40 	.word	0x20000c40

0800488c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004894:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <vTaskInternalSetTimeOutState+0x24>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800489c:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <vTaskInternalSetTimeOutState+0x28>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	605a      	str	r2, [r3, #4]
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	20000c44 	.word	0x20000c44
 80048b4:	20000c30 	.word	0x20000c30

080048b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b088      	sub	sp, #32
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10a      	bne.n	80048de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	613b      	str	r3, [r7, #16]
}
 80048da:	bf00      	nop
 80048dc:	e7fe      	b.n	80048dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10a      	bne.n	80048fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80048e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e8:	f383 8811 	msr	BASEPRI, r3
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	60fb      	str	r3, [r7, #12]
}
 80048f6:	bf00      	nop
 80048f8:	e7fe      	b.n	80048f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80048fa:	f000 fe7b 	bl	80055f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80048fe:	4b1d      	ldr	r3, [pc, #116]	; (8004974 <xTaskCheckForTimeOut+0xbc>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004916:	d102      	bne.n	800491e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004918:	2300      	movs	r3, #0
 800491a:	61fb      	str	r3, [r7, #28]
 800491c:	e023      	b.n	8004966 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4b15      	ldr	r3, [pc, #84]	; (8004978 <xTaskCheckForTimeOut+0xc0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d007      	beq.n	800493a <xTaskCheckForTimeOut+0x82>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	429a      	cmp	r2, r3
 8004932:	d302      	bcc.n	800493a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004934:	2301      	movs	r3, #1
 8004936:	61fb      	str	r3, [r7, #28]
 8004938:	e015      	b.n	8004966 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	429a      	cmp	r2, r3
 8004942:	d20b      	bcs.n	800495c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	1ad2      	subs	r2, r2, r3
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7ff ff9b 	bl	800488c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004956:	2300      	movs	r3, #0
 8004958:	61fb      	str	r3, [r7, #28]
 800495a:	e004      	b.n	8004966 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004962:	2301      	movs	r3, #1
 8004964:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004966:	f000 fe75 	bl	8005654 <vPortExitCritical>

	return xReturn;
 800496a:	69fb      	ldr	r3, [r7, #28]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3720      	adds	r7, #32
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	20000c30 	.word	0x20000c30
 8004978:	20000c44 	.word	0x20000c44

0800497c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004980:	4b03      	ldr	r3, [pc, #12]	; (8004990 <vTaskMissedYield+0x14>)
 8004982:	2201      	movs	r2, #1
 8004984:	601a      	str	r2, [r3, #0]
}
 8004986:	bf00      	nop
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	20000c40 	.word	0x20000c40

08004994 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800499c:	f000 f852 	bl	8004a44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80049a0:	4b06      	ldr	r3, [pc, #24]	; (80049bc <prvIdleTask+0x28>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d9f9      	bls.n	800499c <prvIdleTask+0x8>
			{
				taskYIELD();
 80049a8:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <prvIdleTask+0x2c>)
 80049aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80049b8:	e7f0      	b.n	800499c <prvIdleTask+0x8>
 80049ba:	bf00      	nop
 80049bc:	2000075c 	.word	0x2000075c
 80049c0:	e000ed04 	.word	0xe000ed04

080049c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049ca:	2300      	movs	r3, #0
 80049cc:	607b      	str	r3, [r7, #4]
 80049ce:	e00c      	b.n	80049ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4a12      	ldr	r2, [pc, #72]	; (8004a24 <prvInitialiseTaskLists+0x60>)
 80049dc:	4413      	add	r3, r2
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fe fd24 	bl	800342c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3301      	adds	r3, #1
 80049e8:	607b      	str	r3, [r7, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b37      	cmp	r3, #55	; 0x37
 80049ee:	d9ef      	bls.n	80049d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049f0:	480d      	ldr	r0, [pc, #52]	; (8004a28 <prvInitialiseTaskLists+0x64>)
 80049f2:	f7fe fd1b 	bl	800342c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049f6:	480d      	ldr	r0, [pc, #52]	; (8004a2c <prvInitialiseTaskLists+0x68>)
 80049f8:	f7fe fd18 	bl	800342c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80049fc:	480c      	ldr	r0, [pc, #48]	; (8004a30 <prvInitialiseTaskLists+0x6c>)
 80049fe:	f7fe fd15 	bl	800342c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a02:	480c      	ldr	r0, [pc, #48]	; (8004a34 <prvInitialiseTaskLists+0x70>)
 8004a04:	f7fe fd12 	bl	800342c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a08:	480b      	ldr	r0, [pc, #44]	; (8004a38 <prvInitialiseTaskLists+0x74>)
 8004a0a:	f7fe fd0f 	bl	800342c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a0e:	4b0b      	ldr	r3, [pc, #44]	; (8004a3c <prvInitialiseTaskLists+0x78>)
 8004a10:	4a05      	ldr	r2, [pc, #20]	; (8004a28 <prvInitialiseTaskLists+0x64>)
 8004a12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a14:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <prvInitialiseTaskLists+0x7c>)
 8004a16:	4a05      	ldr	r2, [pc, #20]	; (8004a2c <prvInitialiseTaskLists+0x68>)
 8004a18:	601a      	str	r2, [r3, #0]
}
 8004a1a:	bf00      	nop
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	2000075c 	.word	0x2000075c
 8004a28:	20000bbc 	.word	0x20000bbc
 8004a2c:	20000bd0 	.word	0x20000bd0
 8004a30:	20000bec 	.word	0x20000bec
 8004a34:	20000c00 	.word	0x20000c00
 8004a38:	20000c18 	.word	0x20000c18
 8004a3c:	20000be4 	.word	0x20000be4
 8004a40:	20000be8 	.word	0x20000be8

08004a44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a4a:	e019      	b.n	8004a80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a4c:	f000 fdd2 	bl	80055f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a50:	4b10      	ldr	r3, [pc, #64]	; (8004a94 <prvCheckTasksWaitingTermination+0x50>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fe fd6f 	bl	8003540 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a62:	4b0d      	ldr	r3, [pc, #52]	; (8004a98 <prvCheckTasksWaitingTermination+0x54>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	4a0b      	ldr	r2, [pc, #44]	; (8004a98 <prvCheckTasksWaitingTermination+0x54>)
 8004a6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <prvCheckTasksWaitingTermination+0x58>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3b01      	subs	r3, #1
 8004a72:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <prvCheckTasksWaitingTermination+0x58>)
 8004a74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a76:	f000 fded 	bl	8005654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f810 	bl	8004aa0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a80:	4b06      	ldr	r3, [pc, #24]	; (8004a9c <prvCheckTasksWaitingTermination+0x58>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e1      	bne.n	8004a4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a88:	bf00      	nop
 8004a8a:	bf00      	nop
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000c00 	.word	0x20000c00
 8004a98:	20000c2c 	.word	0x20000c2c
 8004a9c:	20000c14 	.word	0x20000c14

08004aa0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d108      	bne.n	8004ac4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 ff8a 	bl	80059d0 <vPortFree>
				vPortFree( pxTCB );
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 ff87 	bl	80059d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ac2:	e018      	b.n	8004af6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d103      	bne.n	8004ad6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 ff7e 	bl	80059d0 <vPortFree>
	}
 8004ad4:	e00f      	b.n	8004af6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d00a      	beq.n	8004af6 <prvDeleteTCB+0x56>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	60fb      	str	r3, [r7, #12]
}
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <prvDeleteTCB+0x54>
	}
 8004af6:	bf00      	nop
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b06:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <prvResetNextTaskUnblockTime+0x38>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d104      	bne.n	8004b1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b10:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <prvResetNextTaskUnblockTime+0x3c>)
 8004b12:	f04f 32ff 	mov.w	r2, #4294967295
 8004b16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b18:	e008      	b.n	8004b2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b1a:	4b07      	ldr	r3, [pc, #28]	; (8004b38 <prvResetNextTaskUnblockTime+0x38>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	4a04      	ldr	r2, [pc, #16]	; (8004b3c <prvResetNextTaskUnblockTime+0x3c>)
 8004b2a:	6013      	str	r3, [r2, #0]
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	20000be4 	.word	0x20000be4
 8004b3c:	20000c4c 	.word	0x20000c4c

08004b40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b46:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <xTaskGetSchedulerState+0x34>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d102      	bne.n	8004b54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	607b      	str	r3, [r7, #4]
 8004b52:	e008      	b.n	8004b66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b54:	4b08      	ldr	r3, [pc, #32]	; (8004b78 <xTaskGetSchedulerState+0x38>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d102      	bne.n	8004b62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	607b      	str	r3, [r7, #4]
 8004b60:	e001      	b.n	8004b66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b62:	2300      	movs	r3, #0
 8004b64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b66:	687b      	ldr	r3, [r7, #4]
	}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	20000c38 	.word	0x20000c38
 8004b78:	20000c54 	.word	0x20000c54

08004b7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d056      	beq.n	8004c40 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b92:	4b2e      	ldr	r3, [pc, #184]	; (8004c4c <xTaskPriorityDisinherit+0xd0>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d00a      	beq.n	8004bb2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba0:	f383 8811 	msr	BASEPRI, r3
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	60fb      	str	r3, [r7, #12]
}
 8004bae:	bf00      	nop
 8004bb0:	e7fe      	b.n	8004bb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10a      	bne.n	8004bd0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	60bb      	str	r3, [r7, #8]
}
 8004bcc:	bf00      	nop
 8004bce:	e7fe      	b.n	8004bce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd4:	1e5a      	subs	r2, r3, #1
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d02c      	beq.n	8004c40 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d128      	bne.n	8004c40 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fe fca4 	bl	8003540 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c10:	4b0f      	ldr	r3, [pc, #60]	; (8004c50 <xTaskPriorityDisinherit+0xd4>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d903      	bls.n	8004c20 <xTaskPriorityDisinherit+0xa4>
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	4a0c      	ldr	r2, [pc, #48]	; (8004c50 <xTaskPriorityDisinherit+0xd4>)
 8004c1e:	6013      	str	r3, [r2, #0]
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c24:	4613      	mov	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4a09      	ldr	r2, [pc, #36]	; (8004c54 <xTaskPriorityDisinherit+0xd8>)
 8004c2e:	441a      	add	r2, r3
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	3304      	adds	r3, #4
 8004c34:	4619      	mov	r1, r3
 8004c36:	4610      	mov	r0, r2
 8004c38:	f7fe fc25 	bl	8003486 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c40:	697b      	ldr	r3, [r7, #20]
	}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20000758 	.word	0x20000758
 8004c50:	20000c34 	.word	0x20000c34
 8004c54:	2000075c 	.word	0x2000075c

08004c58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c62:	4b21      	ldr	r3, [pc, #132]	; (8004ce8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c68:	4b20      	ldr	r3, [pc, #128]	; (8004cec <prvAddCurrentTaskToDelayedList+0x94>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fe fc66 	bl	8003540 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7a:	d10a      	bne.n	8004c92 <prvAddCurrentTaskToDelayedList+0x3a>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d007      	beq.n	8004c92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c82:	4b1a      	ldr	r3, [pc, #104]	; (8004cec <prvAddCurrentTaskToDelayedList+0x94>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3304      	adds	r3, #4
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4819      	ldr	r0, [pc, #100]	; (8004cf0 <prvAddCurrentTaskToDelayedList+0x98>)
 8004c8c:	f7fe fbfb 	bl	8003486 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c90:	e026      	b.n	8004ce0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4413      	add	r3, r2
 8004c98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c9a:	4b14      	ldr	r3, [pc, #80]	; (8004cec <prvAddCurrentTaskToDelayedList+0x94>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d209      	bcs.n	8004cbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004caa:	4b12      	ldr	r3, [pc, #72]	; (8004cf4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	4b0f      	ldr	r3, [pc, #60]	; (8004cec <prvAddCurrentTaskToDelayedList+0x94>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	f7fe fc09 	bl	80034ce <vListInsert>
}
 8004cbc:	e010      	b.n	8004ce0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cbe:	4b0e      	ldr	r3, [pc, #56]	; (8004cf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <prvAddCurrentTaskToDelayedList+0x94>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4610      	mov	r0, r2
 8004ccc:	f7fe fbff 	bl	80034ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004cd0:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d202      	bcs.n	8004ce0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004cda:	4a08      	ldr	r2, [pc, #32]	; (8004cfc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	6013      	str	r3, [r2, #0]
}
 8004ce0:	bf00      	nop
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20000c30 	.word	0x20000c30
 8004cec:	20000758 	.word	0x20000758
 8004cf0:	20000c18 	.word	0x20000c18
 8004cf4:	20000be8 	.word	0x20000be8
 8004cf8:	20000be4 	.word	0x20000be4
 8004cfc:	20000c4c 	.word	0x20000c4c

08004d00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b08a      	sub	sp, #40	; 0x28
 8004d04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d0a:	f000 fb07 	bl	800531c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d0e:	4b1c      	ldr	r3, [pc, #112]	; (8004d80 <xTimerCreateTimerTask+0x80>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d021      	beq.n	8004d5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d1e:	1d3a      	adds	r2, r7, #4
 8004d20:	f107 0108 	add.w	r1, r7, #8
 8004d24:	f107 030c 	add.w	r3, r7, #12
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fe fb65 	bl	80033f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	9202      	str	r2, [sp, #8]
 8004d36:	9301      	str	r3, [sp, #4]
 8004d38:	2302      	movs	r3, #2
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	460a      	mov	r2, r1
 8004d40:	4910      	ldr	r1, [pc, #64]	; (8004d84 <xTimerCreateTimerTask+0x84>)
 8004d42:	4811      	ldr	r0, [pc, #68]	; (8004d88 <xTimerCreateTimerTask+0x88>)
 8004d44:	f7ff f912 	bl	8003f6c <xTaskCreateStatic>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	4a10      	ldr	r2, [pc, #64]	; (8004d8c <xTimerCreateTimerTask+0x8c>)
 8004d4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d4e:	4b0f      	ldr	r3, [pc, #60]	; (8004d8c <xTimerCreateTimerTask+0x8c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004d56:	2301      	movs	r3, #1
 8004d58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	613b      	str	r3, [r7, #16]
}
 8004d72:	bf00      	nop
 8004d74:	e7fe      	b.n	8004d74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004d76:	697b      	ldr	r3, [r7, #20]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3718      	adds	r7, #24
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	20000c88 	.word	0x20000c88
 8004d84:	08007230 	.word	0x08007230
 8004d88:	08004ec5 	.word	0x08004ec5
 8004d8c:	20000c8c 	.word	0x20000c8c

08004d90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08a      	sub	sp, #40	; 0x28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
 8004d9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10a      	bne.n	8004dbe <xTimerGenericCommand+0x2e>
	__asm volatile
 8004da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	623b      	str	r3, [r7, #32]
}
 8004dba:	bf00      	nop
 8004dbc:	e7fe      	b.n	8004dbc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004dbe:	4b1a      	ldr	r3, [pc, #104]	; (8004e28 <xTimerGenericCommand+0x98>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d02a      	beq.n	8004e1c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b05      	cmp	r3, #5
 8004dd6:	dc18      	bgt.n	8004e0a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004dd8:	f7ff feb2 	bl	8004b40 <xTaskGetSchedulerState>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d109      	bne.n	8004df6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004de2:	4b11      	ldr	r3, [pc, #68]	; (8004e28 <xTimerGenericCommand+0x98>)
 8004de4:	6818      	ldr	r0, [r3, #0]
 8004de6:	f107 0110 	add.w	r1, r7, #16
 8004dea:	2300      	movs	r3, #0
 8004dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dee:	f7fe fcd5 	bl	800379c <xQueueGenericSend>
 8004df2:	6278      	str	r0, [r7, #36]	; 0x24
 8004df4:	e012      	b.n	8004e1c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004df6:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <xTimerGenericCommand+0x98>)
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	f107 0110 	add.w	r1, r7, #16
 8004dfe:	2300      	movs	r3, #0
 8004e00:	2200      	movs	r2, #0
 8004e02:	f7fe fccb 	bl	800379c <xQueueGenericSend>
 8004e06:	6278      	str	r0, [r7, #36]	; 0x24
 8004e08:	e008      	b.n	8004e1c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e0a:	4b07      	ldr	r3, [pc, #28]	; (8004e28 <xTimerGenericCommand+0x98>)
 8004e0c:	6818      	ldr	r0, [r3, #0]
 8004e0e:	f107 0110 	add.w	r1, r7, #16
 8004e12:	2300      	movs	r3, #0
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	f7fe fdbf 	bl	8003998 <xQueueGenericSendFromISR>
 8004e1a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3728      	adds	r7, #40	; 0x28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000c88 	.word	0x20000c88

08004e2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af02      	add	r7, sp, #8
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e36:	4b22      	ldr	r3, [pc, #136]	; (8004ec0 <prvProcessExpiredTimer+0x94>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	3304      	adds	r3, #4
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fe fb7b 	bl	8003540 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d022      	beq.n	8004e9e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	699a      	ldr	r2, [r3, #24]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	18d1      	adds	r1, r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	6978      	ldr	r0, [r7, #20]
 8004e66:	f000 f8d1 	bl	800500c <prvInsertTimerInActiveList>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d01f      	beq.n	8004eb0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e70:	2300      	movs	r3, #0
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	2300      	movs	r3, #0
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	2100      	movs	r1, #0
 8004e7a:	6978      	ldr	r0, [r7, #20]
 8004e7c:	f7ff ff88 	bl	8004d90 <xTimerGenericCommand>
 8004e80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d113      	bne.n	8004eb0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8c:	f383 8811 	msr	BASEPRI, r3
 8004e90:	f3bf 8f6f 	isb	sy
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	60fb      	str	r3, [r7, #12]
}
 8004e9a:	bf00      	nop
 8004e9c:	e7fe      	b.n	8004e9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ea4:	f023 0301 	bic.w	r3, r3, #1
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	6978      	ldr	r0, [r7, #20]
 8004eb6:	4798      	blx	r3
}
 8004eb8:	bf00      	nop
 8004eba:	3718      	adds	r7, #24
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	20000c80 	.word	0x20000c80

08004ec4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ecc:	f107 0308 	add.w	r3, r7, #8
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 f857 	bl	8004f84 <prvGetNextExpireTime>
 8004ed6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4619      	mov	r1, r3
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f000 f803 	bl	8004ee8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004ee2:	f000 f8d5 	bl	8005090 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ee6:	e7f1      	b.n	8004ecc <prvTimerTask+0x8>

08004ee8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004ef2:	f7ff fa43 	bl	800437c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ef6:	f107 0308 	add.w	r3, r7, #8
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 f866 	bl	8004fcc <prvSampleTimeNow>
 8004f00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d130      	bne.n	8004f6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10a      	bne.n	8004f24 <prvProcessTimerOrBlockTask+0x3c>
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d806      	bhi.n	8004f24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004f16:	f7ff fa3f 	bl	8004398 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f1a:	68f9      	ldr	r1, [r7, #12]
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7ff ff85 	bl	8004e2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f22:	e024      	b.n	8004f6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d008      	beq.n	8004f3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f2a:	4b13      	ldr	r3, [pc, #76]	; (8004f78 <prvProcessTimerOrBlockTask+0x90>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <prvProcessTimerOrBlockTask+0x50>
 8004f34:	2301      	movs	r3, #1
 8004f36:	e000      	b.n	8004f3a <prvProcessTimerOrBlockTask+0x52>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f3c:	4b0f      	ldr	r3, [pc, #60]	; (8004f7c <prvProcessTimerOrBlockTask+0x94>)
 8004f3e:	6818      	ldr	r0, [r3, #0]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	4619      	mov	r1, r3
 8004f4a:	f7fe ffdb 	bl	8003f04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f4e:	f7ff fa23 	bl	8004398 <xTaskResumeAll>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10a      	bne.n	8004f6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004f58:	4b09      	ldr	r3, [pc, #36]	; (8004f80 <prvProcessTimerOrBlockTask+0x98>)
 8004f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	f3bf 8f6f 	isb	sy
}
 8004f68:	e001      	b.n	8004f6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004f6a:	f7ff fa15 	bl	8004398 <xTaskResumeAll>
}
 8004f6e:	bf00      	nop
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	20000c84 	.word	0x20000c84
 8004f7c:	20000c88 	.word	0x20000c88
 8004f80:	e000ed04 	.word	0xe000ed04

08004f84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f8c:	4b0e      	ldr	r3, [pc, #56]	; (8004fc8 <prvGetNextExpireTime+0x44>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <prvGetNextExpireTime+0x16>
 8004f96:	2201      	movs	r2, #1
 8004f98:	e000      	b.n	8004f9c <prvGetNextExpireTime+0x18>
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d105      	bne.n	8004fb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fa8:	4b07      	ldr	r3, [pc, #28]	; (8004fc8 <prvGetNextExpireTime+0x44>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	e001      	b.n	8004fb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	20000c80 	.word	0x20000c80

08004fcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004fd4:	f7ff fa7e 	bl	80044d4 <xTaskGetTickCount>
 8004fd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004fda:	4b0b      	ldr	r3, [pc, #44]	; (8005008 <prvSampleTimeNow+0x3c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d205      	bcs.n	8004ff0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004fe4:	f000 f936 	bl	8005254 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	e002      	b.n	8004ff6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004ff6:	4a04      	ldr	r2, [pc, #16]	; (8005008 <prvSampleTimeNow+0x3c>)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	20000c90 	.word	0x20000c90

0800500c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800501a:	2300      	movs	r3, #0
 800501c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	429a      	cmp	r2, r3
 8005030:	d812      	bhi.n	8005058 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	1ad2      	subs	r2, r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	429a      	cmp	r2, r3
 800503e:	d302      	bcc.n	8005046 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005040:	2301      	movs	r3, #1
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	e01b      	b.n	800507e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005046:	4b10      	ldr	r3, [pc, #64]	; (8005088 <prvInsertTimerInActiveList+0x7c>)
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	3304      	adds	r3, #4
 800504e:	4619      	mov	r1, r3
 8005050:	4610      	mov	r0, r2
 8005052:	f7fe fa3c 	bl	80034ce <vListInsert>
 8005056:	e012      	b.n	800507e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d206      	bcs.n	800506e <prvInsertTimerInActiveList+0x62>
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	429a      	cmp	r2, r3
 8005066:	d302      	bcc.n	800506e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005068:	2301      	movs	r3, #1
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	e007      	b.n	800507e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800506e:	4b07      	ldr	r3, [pc, #28]	; (800508c <prvInsertTimerInActiveList+0x80>)
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	3304      	adds	r3, #4
 8005076:	4619      	mov	r1, r3
 8005078:	4610      	mov	r0, r2
 800507a:	f7fe fa28 	bl	80034ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800507e:	697b      	ldr	r3, [r7, #20]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3718      	adds	r7, #24
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	20000c84 	.word	0x20000c84
 800508c:	20000c80 	.word	0x20000c80

08005090 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b08e      	sub	sp, #56	; 0x38
 8005094:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005096:	e0ca      	b.n	800522e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	da18      	bge.n	80050d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800509e:	1d3b      	adds	r3, r7, #4
 80050a0:	3304      	adds	r3, #4
 80050a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80050a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10a      	bne.n	80050c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	61fb      	str	r3, [r7, #28]
}
 80050bc:	bf00      	nop
 80050be:	e7fe      	b.n	80050be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80050c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050c6:	6850      	ldr	r0, [r2, #4]
 80050c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050ca:	6892      	ldr	r2, [r2, #8]
 80050cc:	4611      	mov	r1, r2
 80050ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f2c0 80aa 	blt.w	800522c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80050dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d004      	beq.n	80050ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	3304      	adds	r3, #4
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fe fa29 	bl	8003540 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050ee:	463b      	mov	r3, r7
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff ff6b 	bl	8004fcc <prvSampleTimeNow>
 80050f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b09      	cmp	r3, #9
 80050fc:	f200 8097 	bhi.w	800522e <prvProcessReceivedCommands+0x19e>
 8005100:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <prvProcessReceivedCommands+0x78>)
 8005102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005106:	bf00      	nop
 8005108:	08005131 	.word	0x08005131
 800510c:	08005131 	.word	0x08005131
 8005110:	08005131 	.word	0x08005131
 8005114:	080051a5 	.word	0x080051a5
 8005118:	080051b9 	.word	0x080051b9
 800511c:	08005203 	.word	0x08005203
 8005120:	08005131 	.word	0x08005131
 8005124:	08005131 	.word	0x08005131
 8005128:	080051a5 	.word	0x080051a5
 800512c:	080051b9 	.word	0x080051b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005136:	f043 0301 	orr.w	r3, r3, #1
 800513a:	b2da      	uxtb	r2, r3
 800513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	18d1      	adds	r1, r2, r3
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800514e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005150:	f7ff ff5c 	bl	800500c <prvInsertTimerInActiveList>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d069      	beq.n	800522e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005160:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d05e      	beq.n	800522e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	441a      	add	r2, r3
 8005178:	2300      	movs	r3, #0
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	2300      	movs	r3, #0
 800517e:	2100      	movs	r1, #0
 8005180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005182:	f7ff fe05 	bl	8004d90 <xTimerGenericCommand>
 8005186:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d14f      	bne.n	800522e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	61bb      	str	r3, [r7, #24]
}
 80051a0:	bf00      	nop
 80051a2:	e7fe      	b.n	80051a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051aa:	f023 0301 	bic.w	r3, r3, #1
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80051b6:	e03a      	b.n	800522e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051be:	f043 0301 	orr.w	r3, r3, #1
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10a      	bne.n	80051ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	617b      	str	r3, [r7, #20]
}
 80051ea:	bf00      	nop
 80051ec:	e7fe      	b.n	80051ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	699a      	ldr	r2, [r3, #24]
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	18d1      	adds	r1, r2, r3
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051fc:	f7ff ff06 	bl	800500c <prvInsertTimerInActiveList>
					break;
 8005200:	e015      	b.n	800522e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d103      	bne.n	8005218 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005212:	f000 fbdd 	bl	80059d0 <vPortFree>
 8005216:	e00a      	b.n	800522e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800521e:	f023 0301 	bic.w	r3, r3, #1
 8005222:	b2da      	uxtb	r2, r3
 8005224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800522a:	e000      	b.n	800522e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800522c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800522e:	4b08      	ldr	r3, [pc, #32]	; (8005250 <prvProcessReceivedCommands+0x1c0>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	1d39      	adds	r1, r7, #4
 8005234:	2200      	movs	r2, #0
 8005236:	4618      	mov	r0, r3
 8005238:	f7fe fc4a 	bl	8003ad0 <xQueueReceive>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	f47f af2a 	bne.w	8005098 <prvProcessReceivedCommands+0x8>
	}
}
 8005244:	bf00      	nop
 8005246:	bf00      	nop
 8005248:	3730      	adds	r7, #48	; 0x30
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	20000c88 	.word	0x20000c88

08005254 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800525a:	e048      	b.n	80052ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800525c:	4b2d      	ldr	r3, [pc, #180]	; (8005314 <prvSwitchTimerLists+0xc0>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005266:	4b2b      	ldr	r3, [pc, #172]	; (8005314 <prvSwitchTimerLists+0xc0>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	3304      	adds	r3, #4
 8005274:	4618      	mov	r0, r3
 8005276:	f7fe f963 	bl	8003540 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d02e      	beq.n	80052ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	4413      	add	r3, r2
 8005298:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d90e      	bls.n	80052c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052ae:	4b19      	ldr	r3, [pc, #100]	; (8005314 <prvSwitchTimerLists+0xc0>)
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	3304      	adds	r3, #4
 80052b6:	4619      	mov	r1, r3
 80052b8:	4610      	mov	r0, r2
 80052ba:	f7fe f908 	bl	80034ce <vListInsert>
 80052be:	e016      	b.n	80052ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052c0:	2300      	movs	r3, #0
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	2300      	movs	r3, #0
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	2100      	movs	r1, #0
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f7ff fd60 	bl	8004d90 <xTimerGenericCommand>
 80052d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10a      	bne.n	80052ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 80052d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	603b      	str	r3, [r7, #0]
}
 80052ea:	bf00      	nop
 80052ec:	e7fe      	b.n	80052ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052ee:	4b09      	ldr	r3, [pc, #36]	; (8005314 <prvSwitchTimerLists+0xc0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1b1      	bne.n	800525c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80052f8:	4b06      	ldr	r3, [pc, #24]	; (8005314 <prvSwitchTimerLists+0xc0>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80052fe:	4b06      	ldr	r3, [pc, #24]	; (8005318 <prvSwitchTimerLists+0xc4>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a04      	ldr	r2, [pc, #16]	; (8005314 <prvSwitchTimerLists+0xc0>)
 8005304:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005306:	4a04      	ldr	r2, [pc, #16]	; (8005318 <prvSwitchTimerLists+0xc4>)
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	6013      	str	r3, [r2, #0]
}
 800530c:	bf00      	nop
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	20000c80 	.word	0x20000c80
 8005318:	20000c84 	.word	0x20000c84

0800531c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005322:	f000 f967 	bl	80055f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005326:	4b15      	ldr	r3, [pc, #84]	; (800537c <prvCheckForValidListAndQueue+0x60>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d120      	bne.n	8005370 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800532e:	4814      	ldr	r0, [pc, #80]	; (8005380 <prvCheckForValidListAndQueue+0x64>)
 8005330:	f7fe f87c 	bl	800342c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005334:	4813      	ldr	r0, [pc, #76]	; (8005384 <prvCheckForValidListAndQueue+0x68>)
 8005336:	f7fe f879 	bl	800342c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800533a:	4b13      	ldr	r3, [pc, #76]	; (8005388 <prvCheckForValidListAndQueue+0x6c>)
 800533c:	4a10      	ldr	r2, [pc, #64]	; (8005380 <prvCheckForValidListAndQueue+0x64>)
 800533e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005340:	4b12      	ldr	r3, [pc, #72]	; (800538c <prvCheckForValidListAndQueue+0x70>)
 8005342:	4a10      	ldr	r2, [pc, #64]	; (8005384 <prvCheckForValidListAndQueue+0x68>)
 8005344:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005346:	2300      	movs	r3, #0
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	4b11      	ldr	r3, [pc, #68]	; (8005390 <prvCheckForValidListAndQueue+0x74>)
 800534c:	4a11      	ldr	r2, [pc, #68]	; (8005394 <prvCheckForValidListAndQueue+0x78>)
 800534e:	2110      	movs	r1, #16
 8005350:	200a      	movs	r0, #10
 8005352:	f7fe f987 	bl	8003664 <xQueueGenericCreateStatic>
 8005356:	4603      	mov	r3, r0
 8005358:	4a08      	ldr	r2, [pc, #32]	; (800537c <prvCheckForValidListAndQueue+0x60>)
 800535a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800535c:	4b07      	ldr	r3, [pc, #28]	; (800537c <prvCheckForValidListAndQueue+0x60>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005364:	4b05      	ldr	r3, [pc, #20]	; (800537c <prvCheckForValidListAndQueue+0x60>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	490b      	ldr	r1, [pc, #44]	; (8005398 <prvCheckForValidListAndQueue+0x7c>)
 800536a:	4618      	mov	r0, r3
 800536c:	f7fe fda0 	bl	8003eb0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005370:	f000 f970 	bl	8005654 <vPortExitCritical>
}
 8005374:	bf00      	nop
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	20000c88 	.word	0x20000c88
 8005380:	20000c58 	.word	0x20000c58
 8005384:	20000c6c 	.word	0x20000c6c
 8005388:	20000c80 	.word	0x20000c80
 800538c:	20000c84 	.word	0x20000c84
 8005390:	20000d34 	.word	0x20000d34
 8005394:	20000c94 	.word	0x20000c94
 8005398:	08007238 	.word	0x08007238

0800539c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	3b04      	subs	r3, #4
 80053ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	3b04      	subs	r3, #4
 80053ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f023 0201 	bic.w	r2, r3, #1
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	3b04      	subs	r3, #4
 80053ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053cc:	4a0c      	ldr	r2, [pc, #48]	; (8005400 <pxPortInitialiseStack+0x64>)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	3b14      	subs	r3, #20
 80053d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	3b04      	subs	r3, #4
 80053e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f06f 0202 	mvn.w	r2, #2
 80053ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	3b20      	subs	r3, #32
 80053f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80053f2:	68fb      	ldr	r3, [r7, #12]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	08005405 	.word	0x08005405

08005404 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800540a:	2300      	movs	r3, #0
 800540c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800540e:	4b12      	ldr	r3, [pc, #72]	; (8005458 <prvTaskExitError+0x54>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005416:	d00a      	beq.n	800542e <prvTaskExitError+0x2a>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	60fb      	str	r3, [r7, #12]
}
 800542a:	bf00      	nop
 800542c:	e7fe      	b.n	800542c <prvTaskExitError+0x28>
	__asm volatile
 800542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	60bb      	str	r3, [r7, #8]
}
 8005440:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005442:	bf00      	nop
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d0fc      	beq.n	8005444 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800544a:	bf00      	nop
 800544c:	bf00      	nop
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	20000008 	.word	0x20000008
 800545c:	00000000 	.word	0x00000000

08005460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005460:	4b07      	ldr	r3, [pc, #28]	; (8005480 <pxCurrentTCBConst2>)
 8005462:	6819      	ldr	r1, [r3, #0]
 8005464:	6808      	ldr	r0, [r1, #0]
 8005466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800546a:	f380 8809 	msr	PSP, r0
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f04f 0000 	mov.w	r0, #0
 8005476:	f380 8811 	msr	BASEPRI, r0
 800547a:	4770      	bx	lr
 800547c:	f3af 8000 	nop.w

08005480 <pxCurrentTCBConst2>:
 8005480:	20000758 	.word	0x20000758
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop

08005488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005488:	4808      	ldr	r0, [pc, #32]	; (80054ac <prvPortStartFirstTask+0x24>)
 800548a:	6800      	ldr	r0, [r0, #0]
 800548c:	6800      	ldr	r0, [r0, #0]
 800548e:	f380 8808 	msr	MSP, r0
 8005492:	f04f 0000 	mov.w	r0, #0
 8005496:	f380 8814 	msr	CONTROL, r0
 800549a:	b662      	cpsie	i
 800549c:	b661      	cpsie	f
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	df00      	svc	0
 80054a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80054aa:	bf00      	nop
 80054ac:	e000ed08 	.word	0xe000ed08

080054b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80054b6:	4b46      	ldr	r3, [pc, #280]	; (80055d0 <xPortStartScheduler+0x120>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a46      	ldr	r2, [pc, #280]	; (80055d4 <xPortStartScheduler+0x124>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d10a      	bne.n	80054d6 <xPortStartScheduler+0x26>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	613b      	str	r3, [r7, #16]
}
 80054d2:	bf00      	nop
 80054d4:	e7fe      	b.n	80054d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80054d6:	4b3e      	ldr	r3, [pc, #248]	; (80055d0 <xPortStartScheduler+0x120>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a3f      	ldr	r2, [pc, #252]	; (80055d8 <xPortStartScheduler+0x128>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d10a      	bne.n	80054f6 <xPortStartScheduler+0x46>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	60fb      	str	r3, [r7, #12]
}
 80054f2:	bf00      	nop
 80054f4:	e7fe      	b.n	80054f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80054f6:	4b39      	ldr	r3, [pc, #228]	; (80055dc <xPortStartScheduler+0x12c>)
 80054f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	22ff      	movs	r2, #255	; 0xff
 8005506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	b2db      	uxtb	r3, r3
 800550e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005510:	78fb      	ldrb	r3, [r7, #3]
 8005512:	b2db      	uxtb	r3, r3
 8005514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005518:	b2da      	uxtb	r2, r3
 800551a:	4b31      	ldr	r3, [pc, #196]	; (80055e0 <xPortStartScheduler+0x130>)
 800551c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800551e:	4b31      	ldr	r3, [pc, #196]	; (80055e4 <xPortStartScheduler+0x134>)
 8005520:	2207      	movs	r2, #7
 8005522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005524:	e009      	b.n	800553a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005526:	4b2f      	ldr	r3, [pc, #188]	; (80055e4 <xPortStartScheduler+0x134>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3b01      	subs	r3, #1
 800552c:	4a2d      	ldr	r2, [pc, #180]	; (80055e4 <xPortStartScheduler+0x134>)
 800552e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005530:	78fb      	ldrb	r3, [r7, #3]
 8005532:	b2db      	uxtb	r3, r3
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	b2db      	uxtb	r3, r3
 8005538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800553a:	78fb      	ldrb	r3, [r7, #3]
 800553c:	b2db      	uxtb	r3, r3
 800553e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005542:	2b80      	cmp	r3, #128	; 0x80
 8005544:	d0ef      	beq.n	8005526 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005546:	4b27      	ldr	r3, [pc, #156]	; (80055e4 <xPortStartScheduler+0x134>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f1c3 0307 	rsb	r3, r3, #7
 800554e:	2b04      	cmp	r3, #4
 8005550:	d00a      	beq.n	8005568 <xPortStartScheduler+0xb8>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	60bb      	str	r3, [r7, #8]
}
 8005564:	bf00      	nop
 8005566:	e7fe      	b.n	8005566 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005568:	4b1e      	ldr	r3, [pc, #120]	; (80055e4 <xPortStartScheduler+0x134>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	4a1d      	ldr	r2, [pc, #116]	; (80055e4 <xPortStartScheduler+0x134>)
 8005570:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005572:	4b1c      	ldr	r3, [pc, #112]	; (80055e4 <xPortStartScheduler+0x134>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800557a:	4a1a      	ldr	r2, [pc, #104]	; (80055e4 <xPortStartScheduler+0x134>)
 800557c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	b2da      	uxtb	r2, r3
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005586:	4b18      	ldr	r3, [pc, #96]	; (80055e8 <xPortStartScheduler+0x138>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a17      	ldr	r2, [pc, #92]	; (80055e8 <xPortStartScheduler+0x138>)
 800558c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005592:	4b15      	ldr	r3, [pc, #84]	; (80055e8 <xPortStartScheduler+0x138>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a14      	ldr	r2, [pc, #80]	; (80055e8 <xPortStartScheduler+0x138>)
 8005598:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800559c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800559e:	f000 f8dd 	bl	800575c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80055a2:	4b12      	ldr	r3, [pc, #72]	; (80055ec <xPortStartScheduler+0x13c>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80055a8:	f000 f8fc 	bl	80057a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80055ac:	4b10      	ldr	r3, [pc, #64]	; (80055f0 <xPortStartScheduler+0x140>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a0f      	ldr	r2, [pc, #60]	; (80055f0 <xPortStartScheduler+0x140>)
 80055b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80055b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80055b8:	f7ff ff66 	bl	8005488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055bc:	f7ff f854 	bl	8004668 <vTaskSwitchContext>
	prvTaskExitError();
 80055c0:	f7ff ff20 	bl	8005404 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	e000ed00 	.word	0xe000ed00
 80055d4:	410fc271 	.word	0x410fc271
 80055d8:	410fc270 	.word	0x410fc270
 80055dc:	e000e400 	.word	0xe000e400
 80055e0:	20000d84 	.word	0x20000d84
 80055e4:	20000d88 	.word	0x20000d88
 80055e8:	e000ed20 	.word	0xe000ed20
 80055ec:	20000008 	.word	0x20000008
 80055f0:	e000ef34 	.word	0xe000ef34

080055f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	607b      	str	r3, [r7, #4]
}
 800560c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800560e:	4b0f      	ldr	r3, [pc, #60]	; (800564c <vPortEnterCritical+0x58>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3301      	adds	r3, #1
 8005614:	4a0d      	ldr	r2, [pc, #52]	; (800564c <vPortEnterCritical+0x58>)
 8005616:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005618:	4b0c      	ldr	r3, [pc, #48]	; (800564c <vPortEnterCritical+0x58>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d10f      	bne.n	8005640 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005620:	4b0b      	ldr	r3, [pc, #44]	; (8005650 <vPortEnterCritical+0x5c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00a      	beq.n	8005640 <vPortEnterCritical+0x4c>
	__asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	603b      	str	r3, [r7, #0]
}
 800563c:	bf00      	nop
 800563e:	e7fe      	b.n	800563e <vPortEnterCritical+0x4a>
	}
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	20000008 	.word	0x20000008
 8005650:	e000ed04 	.word	0xe000ed04

08005654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800565a:	4b12      	ldr	r3, [pc, #72]	; (80056a4 <vPortExitCritical+0x50>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10a      	bne.n	8005678 <vPortExitCritical+0x24>
	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	607b      	str	r3, [r7, #4]
}
 8005674:	bf00      	nop
 8005676:	e7fe      	b.n	8005676 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005678:	4b0a      	ldr	r3, [pc, #40]	; (80056a4 <vPortExitCritical+0x50>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3b01      	subs	r3, #1
 800567e:	4a09      	ldr	r2, [pc, #36]	; (80056a4 <vPortExitCritical+0x50>)
 8005680:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005682:	4b08      	ldr	r3, [pc, #32]	; (80056a4 <vPortExitCritical+0x50>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d105      	bne.n	8005696 <vPortExitCritical+0x42>
 800568a:	2300      	movs	r3, #0
 800568c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	f383 8811 	msr	BASEPRI, r3
}
 8005694:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005696:	bf00      	nop
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	20000008 	.word	0x20000008
	...

080056b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80056b0:	f3ef 8009 	mrs	r0, PSP
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	4b15      	ldr	r3, [pc, #84]	; (8005710 <pxCurrentTCBConst>)
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	f01e 0f10 	tst.w	lr, #16
 80056c0:	bf08      	it	eq
 80056c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80056c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ca:	6010      	str	r0, [r2, #0]
 80056cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80056d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80056d4:	f380 8811 	msr	BASEPRI, r0
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f7fe ffc2 	bl	8004668 <vTaskSwitchContext>
 80056e4:	f04f 0000 	mov.w	r0, #0
 80056e8:	f380 8811 	msr	BASEPRI, r0
 80056ec:	bc09      	pop	{r0, r3}
 80056ee:	6819      	ldr	r1, [r3, #0]
 80056f0:	6808      	ldr	r0, [r1, #0]
 80056f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f6:	f01e 0f10 	tst.w	lr, #16
 80056fa:	bf08      	it	eq
 80056fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005700:	f380 8809 	msr	PSP, r0
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	f3af 8000 	nop.w

08005710 <pxCurrentTCBConst>:
 8005710:	20000758 	.word	0x20000758
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005714:	bf00      	nop
 8005716:	bf00      	nop

08005718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
	__asm volatile
 800571e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	607b      	str	r3, [r7, #4]
}
 8005730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005732:	f7fe fedf 	bl	80044f4 <xTaskIncrementTick>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800573c:	4b06      	ldr	r3, [pc, #24]	; (8005758 <xPortSysTickHandler+0x40>)
 800573e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	2300      	movs	r3, #0
 8005746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	f383 8811 	msr	BASEPRI, r3
}
 800574e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005750:	bf00      	nop
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	e000ed04 	.word	0xe000ed04

0800575c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005760:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <vPortSetupTimerInterrupt+0x34>)
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005766:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <vPortSetupTimerInterrupt+0x38>)
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800576c:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <vPortSetupTimerInterrupt+0x3c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a0a      	ldr	r2, [pc, #40]	; (800579c <vPortSetupTimerInterrupt+0x40>)
 8005772:	fba2 2303 	umull	r2, r3, r2, r3
 8005776:	099b      	lsrs	r3, r3, #6
 8005778:	4a09      	ldr	r2, [pc, #36]	; (80057a0 <vPortSetupTimerInterrupt+0x44>)
 800577a:	3b01      	subs	r3, #1
 800577c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800577e:	4b04      	ldr	r3, [pc, #16]	; (8005790 <vPortSetupTimerInterrupt+0x34>)
 8005780:	2207      	movs	r2, #7
 8005782:	601a      	str	r2, [r3, #0]
}
 8005784:	bf00      	nop
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	e000e010 	.word	0xe000e010
 8005794:	e000e018 	.word	0xe000e018
 8005798:	20000014 	.word	0x20000014
 800579c:	10624dd3 	.word	0x10624dd3
 80057a0:	e000e014 	.word	0xe000e014

080057a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80057a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80057b4 <vPortEnableVFP+0x10>
 80057a8:	6801      	ldr	r1, [r0, #0]
 80057aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80057ae:	6001      	str	r1, [r0, #0]
 80057b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80057b2:	bf00      	nop
 80057b4:	e000ed88 	.word	0xe000ed88

080057b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80057be:	f3ef 8305 	mrs	r3, IPSR
 80057c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2b0f      	cmp	r3, #15
 80057c8:	d914      	bls.n	80057f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80057ca:	4a17      	ldr	r2, [pc, #92]	; (8005828 <vPortValidateInterruptPriority+0x70>)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80057d4:	4b15      	ldr	r3, [pc, #84]	; (800582c <vPortValidateInterruptPriority+0x74>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	7afa      	ldrb	r2, [r7, #11]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d20a      	bcs.n	80057f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	607b      	str	r3, [r7, #4]
}
 80057f0:	bf00      	nop
 80057f2:	e7fe      	b.n	80057f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80057f4:	4b0e      	ldr	r3, [pc, #56]	; (8005830 <vPortValidateInterruptPriority+0x78>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80057fc:	4b0d      	ldr	r3, [pc, #52]	; (8005834 <vPortValidateInterruptPriority+0x7c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d90a      	bls.n	800581a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	603b      	str	r3, [r7, #0]
}
 8005816:	bf00      	nop
 8005818:	e7fe      	b.n	8005818 <vPortValidateInterruptPriority+0x60>
	}
 800581a:	bf00      	nop
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	e000e3f0 	.word	0xe000e3f0
 800582c:	20000d84 	.word	0x20000d84
 8005830:	e000ed0c 	.word	0xe000ed0c
 8005834:	20000d88 	.word	0x20000d88

08005838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08a      	sub	sp, #40	; 0x28
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005840:	2300      	movs	r3, #0
 8005842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005844:	f7fe fd9a 	bl	800437c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005848:	4b5b      	ldr	r3, [pc, #364]	; (80059b8 <pvPortMalloc+0x180>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005850:	f000 f920 	bl	8005a94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005854:	4b59      	ldr	r3, [pc, #356]	; (80059bc <pvPortMalloc+0x184>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4013      	ands	r3, r2
 800585c:	2b00      	cmp	r3, #0
 800585e:	f040 8093 	bne.w	8005988 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d01d      	beq.n	80058a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005868:	2208      	movs	r2, #8
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4413      	add	r3, r2
 800586e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	2b00      	cmp	r3, #0
 8005878:	d014      	beq.n	80058a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f023 0307 	bic.w	r3, r3, #7
 8005880:	3308      	adds	r3, #8
 8005882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <pvPortMalloc+0x6c>
	__asm volatile
 800588e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005892:	f383 8811 	msr	BASEPRI, r3
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	617b      	str	r3, [r7, #20]
}
 80058a0:	bf00      	nop
 80058a2:	e7fe      	b.n	80058a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d06e      	beq.n	8005988 <pvPortMalloc+0x150>
 80058aa:	4b45      	ldr	r3, [pc, #276]	; (80059c0 <pvPortMalloc+0x188>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d869      	bhi.n	8005988 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80058b4:	4b43      	ldr	r3, [pc, #268]	; (80059c4 <pvPortMalloc+0x18c>)
 80058b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80058b8:	4b42      	ldr	r3, [pc, #264]	; (80059c4 <pvPortMalloc+0x18c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058be:	e004      	b.n	80058ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d903      	bls.n	80058dc <pvPortMalloc+0xa4>
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1f1      	bne.n	80058c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80058dc:	4b36      	ldr	r3, [pc, #216]	; (80059b8 <pvPortMalloc+0x180>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d050      	beq.n	8005988 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2208      	movs	r2, #8
 80058ec:	4413      	add	r3, r2
 80058ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	1ad2      	subs	r2, r2, r3
 8005900:	2308      	movs	r3, #8
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	429a      	cmp	r2, r3
 8005906:	d91f      	bls.n	8005948 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4413      	add	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00a      	beq.n	8005930 <pvPortMalloc+0xf8>
	__asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	613b      	str	r3, [r7, #16]
}
 800592c:	bf00      	nop
 800592e:	e7fe      	b.n	800592e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	1ad2      	subs	r2, r2, r3
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005942:	69b8      	ldr	r0, [r7, #24]
 8005944:	f000 f908 	bl	8005b58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005948:	4b1d      	ldr	r3, [pc, #116]	; (80059c0 <pvPortMalloc+0x188>)
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	4a1b      	ldr	r2, [pc, #108]	; (80059c0 <pvPortMalloc+0x188>)
 8005954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005956:	4b1a      	ldr	r3, [pc, #104]	; (80059c0 <pvPortMalloc+0x188>)
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	4b1b      	ldr	r3, [pc, #108]	; (80059c8 <pvPortMalloc+0x190>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	429a      	cmp	r2, r3
 8005960:	d203      	bcs.n	800596a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005962:	4b17      	ldr	r3, [pc, #92]	; (80059c0 <pvPortMalloc+0x188>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a18      	ldr	r2, [pc, #96]	; (80059c8 <pvPortMalloc+0x190>)
 8005968:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	4b13      	ldr	r3, [pc, #76]	; (80059bc <pvPortMalloc+0x184>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	431a      	orrs	r2, r3
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800597e:	4b13      	ldr	r3, [pc, #76]	; (80059cc <pvPortMalloc+0x194>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3301      	adds	r3, #1
 8005984:	4a11      	ldr	r2, [pc, #68]	; (80059cc <pvPortMalloc+0x194>)
 8005986:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005988:	f7fe fd06 	bl	8004398 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	f003 0307 	and.w	r3, r3, #7
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <pvPortMalloc+0x174>
	__asm volatile
 8005996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	60fb      	str	r3, [r7, #12]
}
 80059a8:	bf00      	nop
 80059aa:	e7fe      	b.n	80059aa <pvPortMalloc+0x172>
	return pvReturn;
 80059ac:	69fb      	ldr	r3, [r7, #28]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3728      	adds	r7, #40	; 0x28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20004994 	.word	0x20004994
 80059bc:	200049a8 	.word	0x200049a8
 80059c0:	20004998 	.word	0x20004998
 80059c4:	2000498c 	.word	0x2000498c
 80059c8:	2000499c 	.word	0x2000499c
 80059cc:	200049a0 	.word	0x200049a0

080059d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d04d      	beq.n	8005a7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80059e2:	2308      	movs	r3, #8
 80059e4:	425b      	negs	r3, r3
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4413      	add	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	4b24      	ldr	r3, [pc, #144]	; (8005a88 <vPortFree+0xb8>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4013      	ands	r3, r2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10a      	bne.n	8005a14 <vPortFree+0x44>
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	60fb      	str	r3, [r7, #12]
}
 8005a10:	bf00      	nop
 8005a12:	e7fe      	b.n	8005a12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <vPortFree+0x62>
	__asm volatile
 8005a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	60bb      	str	r3, [r7, #8]
}
 8005a2e:	bf00      	nop
 8005a30:	e7fe      	b.n	8005a30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	4b14      	ldr	r3, [pc, #80]	; (8005a88 <vPortFree+0xb8>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d01e      	beq.n	8005a7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d11a      	bne.n	8005a7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	4b0e      	ldr	r3, [pc, #56]	; (8005a88 <vPortFree+0xb8>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	43db      	mvns	r3, r3
 8005a52:	401a      	ands	r2, r3
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a58:	f7fe fc90 	bl	800437c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	4b0a      	ldr	r3, [pc, #40]	; (8005a8c <vPortFree+0xbc>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4413      	add	r3, r2
 8005a66:	4a09      	ldr	r2, [pc, #36]	; (8005a8c <vPortFree+0xbc>)
 8005a68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a6a:	6938      	ldr	r0, [r7, #16]
 8005a6c:	f000 f874 	bl	8005b58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005a70:	4b07      	ldr	r3, [pc, #28]	; (8005a90 <vPortFree+0xc0>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3301      	adds	r3, #1
 8005a76:	4a06      	ldr	r2, [pc, #24]	; (8005a90 <vPortFree+0xc0>)
 8005a78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005a7a:	f7fe fc8d 	bl	8004398 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a7e:	bf00      	nop
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	200049a8 	.word	0x200049a8
 8005a8c:	20004998 	.word	0x20004998
 8005a90:	200049a4 	.word	0x200049a4

08005a94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005a9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005aa0:	4b27      	ldr	r3, [pc, #156]	; (8005b40 <prvHeapInit+0xac>)
 8005aa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00c      	beq.n	8005ac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	3307      	adds	r3, #7
 8005ab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0307 	bic.w	r3, r3, #7
 8005aba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	4a1f      	ldr	r2, [pc, #124]	; (8005b40 <prvHeapInit+0xac>)
 8005ac4:	4413      	add	r3, r2
 8005ac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005acc:	4a1d      	ldr	r2, [pc, #116]	; (8005b44 <prvHeapInit+0xb0>)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ad2:	4b1c      	ldr	r3, [pc, #112]	; (8005b44 <prvHeapInit+0xb0>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	4413      	add	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ae0:	2208      	movs	r2, #8
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	1a9b      	subs	r3, r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0307 	bic.w	r3, r3, #7
 8005aee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4a15      	ldr	r2, [pc, #84]	; (8005b48 <prvHeapInit+0xb4>)
 8005af4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005af6:	4b14      	ldr	r3, [pc, #80]	; (8005b48 <prvHeapInit+0xb4>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2200      	movs	r2, #0
 8005afc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005afe:	4b12      	ldr	r3, [pc, #72]	; (8005b48 <prvHeapInit+0xb4>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	1ad2      	subs	r2, r2, r3
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b14:	4b0c      	ldr	r3, [pc, #48]	; (8005b48 <prvHeapInit+0xb4>)
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	4a0a      	ldr	r2, [pc, #40]	; (8005b4c <prvHeapInit+0xb8>)
 8005b22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	4a09      	ldr	r2, [pc, #36]	; (8005b50 <prvHeapInit+0xbc>)
 8005b2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b2c:	4b09      	ldr	r3, [pc, #36]	; (8005b54 <prvHeapInit+0xc0>)
 8005b2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b32:	601a      	str	r2, [r3, #0]
}
 8005b34:	bf00      	nop
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	20000d8c 	.word	0x20000d8c
 8005b44:	2000498c 	.word	0x2000498c
 8005b48:	20004994 	.word	0x20004994
 8005b4c:	2000499c 	.word	0x2000499c
 8005b50:	20004998 	.word	0x20004998
 8005b54:	200049a8 	.word	0x200049a8

08005b58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b60:	4b28      	ldr	r3, [pc, #160]	; (8005c04 <prvInsertBlockIntoFreeList+0xac>)
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	e002      	b.n	8005b6c <prvInsertBlockIntoFreeList+0x14>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d8f7      	bhi.n	8005b66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	4413      	add	r3, r2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d108      	bne.n	8005b9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	441a      	add	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	441a      	add	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d118      	bne.n	8005be0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	4b15      	ldr	r3, [pc, #84]	; (8005c08 <prvInsertBlockIntoFreeList+0xb0>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d00d      	beq.n	8005bd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	441a      	add	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	601a      	str	r2, [r3, #0]
 8005bd4:	e008      	b.n	8005be8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005bd6:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <prvInsertBlockIntoFreeList+0xb0>)
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	e003      	b.n	8005be8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d002      	beq.n	8005bf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bf6:	bf00      	nop
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	2000498c 	.word	0x2000498c
 8005c08:	20004994 	.word	0x20004994

08005c0c <debug>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void debug(char * string) {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
	uint32_t length = strlen(string);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7fa fae3 	bl	80001e0 <strlen>
 8005c1a:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(&huart2,(uint8_t *) string, length, 100);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	2364      	movs	r3, #100	; 0x64
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	4803      	ldr	r0, [pc, #12]	; (8005c34 <debug+0x28>)
 8005c26:	f7fc ff76 	bl	8002b16 <HAL_UART_Transmit>
}
 8005c2a:	bf00      	nop
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	20004c04 	.word	0x20004c04

08005c38 <pmSlaveUartTx>:
/*static*/pmProtocolContext_t master_uart;
static pmProtocolDriver_t master_uart_drivers = { .tx = pmMasterUartTx, .rx =
		pmMasterUartRx };
#endif

static int pmSlaveUartTx(uint8_t * data, uint8_t numBytes) {
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	460b      	mov	r3, r1
 8005c42:	70fb      	strb	r3, [r7, #3]
	if ((HAL_UART_Transmit(&huart1, data, numBytes, 100) == HAL_OK)) {
 8005c44:	78fb      	ldrb	r3, [r7, #3]
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	2364      	movs	r3, #100	; 0x64
 8005c4a:	6879      	ldr	r1, [r7, #4]
 8005c4c:	4806      	ldr	r0, [pc, #24]	; (8005c68 <pmSlaveUartTx+0x30>)
 8005c4e:	f7fc ff62 	bl	8002b16 <HAL_UART_Transmit>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <pmSlaveUartTx+0x24>
		return numBytes;
 8005c58:	78fb      	ldrb	r3, [r7, #3]
 8005c5a:	e000      	b.n	8005c5e <pmSlaveUartTx+0x26>
	}
	return 0;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	20004b7c 	.word	0x20004b7c

08005c6c <pmSlaveUartRx>:

static int pmSlaveUartRx(uint8_t * data, uint8_t numBytes) {
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	460b      	mov	r3, r1
 8005c76:	70fb      	strb	r3, [r7, #3]
	if ((HAL_UART_Receive(&huart1, data, numBytes,100) == HAL_OK)) {
 8005c78:	78fb      	ldrb	r3, [r7, #3]
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	2364      	movs	r3, #100	; 0x64
 8005c7e:	6879      	ldr	r1, [r7, #4]
 8005c80:	4806      	ldr	r0, [pc, #24]	; (8005c9c <pmSlaveUartRx+0x30>)
 8005c82:	f7fc ffda 	bl	8002c3a <HAL_UART_Receive>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <pmSlaveUartRx+0x24>
		return numBytes;
 8005c8c:	78fb      	ldrb	r3, [r7, #3]
 8005c8e:	e000      	b.n	8005c92 <pmSlaveUartRx+0x26>
	}
	return 0;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20004b7c 	.word	0x20004b7c

08005ca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8005ca4:	f7fa ffc6 	bl	8000c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005ca8:	f000 f82e 	bl	8005d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005cac:	f000 f944 	bl	8005f38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8005cb0:	f000 f8ee 	bl	8005e90 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8005cb4:	f000 f8c2 	bl	8005e3c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8005cb8:	f000 f914 	bl	8005ee4 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8005cbc:	f000 f890 	bl	8005de0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	if (PM_PROTOCOL_SUCCESS
			!= pmProtocolInit(&slave_uart_drivers, &slave_uart)) {
 8005cc0:	490b      	ldr	r1, [pc, #44]	; (8005cf0 <main+0x50>)
 8005cc2:	480c      	ldr	r0, [pc, #48]	; (8005cf4 <main+0x54>)
 8005cc4:	f000 fa0e 	bl	80060e4 <pmProtocolInit>
 8005cc8:	4603      	mov	r3, r0
	if (PM_PROTOCOL_SUCCESS
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <main+0x34>
		debug("Error! PM protocol initialized failed\n");
 8005cce:	480a      	ldr	r0, [pc, #40]	; (8005cf8 <main+0x58>)
 8005cd0:	f7ff ff9c 	bl	8005c0c <debug>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8005cd4:	f7fd fa9a 	bl	800320c <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8005cd8:	4a08      	ldr	r2, [pc, #32]	; (8005cfc <main+0x5c>)
 8005cda:	2100      	movs	r1, #0
 8005cdc:	4808      	ldr	r0, [pc, #32]	; (8005d00 <main+0x60>)
 8005cde:	f7fd fadf 	bl	80032a0 <osThreadNew>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	4a07      	ldr	r2, [pc, #28]	; (8005d04 <main+0x64>)
 8005ce6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8005ce8:	f7fd fab4 	bl	8003254 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


	while (1) {
 8005cec:	e7fe      	b.n	8005cec <main+0x4c>
 8005cee:	bf00      	nop
 8005cf0:	20004a94 	.word	0x20004a94
 8005cf4:	2000000c 	.word	0x2000000c
 8005cf8:	0800724c 	.word	0x0800724c
 8005cfc:	0800729c 	.word	0x0800729c
 8005d00:	08006049 	.word	0x08006049
 8005d04:	20004a90 	.word	0x20004a90

08005d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b094      	sub	sp, #80	; 0x50
 8005d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005d0e:	f107 0320 	add.w	r3, r7, #32
 8005d12:	2230      	movs	r2, #48	; 0x30
 8005d14:	2100      	movs	r1, #0
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 fe3e 	bl	8006998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005d1c:	f107 030c 	add.w	r3, r7, #12
 8005d20:	2200      	movs	r2, #0
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	605a      	str	r2, [r3, #4]
 8005d26:	609a      	str	r2, [r3, #8]
 8005d28:	60da      	str	r2, [r3, #12]
 8005d2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60bb      	str	r3, [r7, #8]
 8005d30:	4b29      	ldr	r3, [pc, #164]	; (8005dd8 <SystemClock_Config+0xd0>)
 8005d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d34:	4a28      	ldr	r2, [pc, #160]	; (8005dd8 <SystemClock_Config+0xd0>)
 8005d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8005d3c:	4b26      	ldr	r3, [pc, #152]	; (8005dd8 <SystemClock_Config+0xd0>)
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d44:	60bb      	str	r3, [r7, #8]
 8005d46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d48:	2300      	movs	r3, #0
 8005d4a:	607b      	str	r3, [r7, #4]
 8005d4c:	4b23      	ldr	r3, [pc, #140]	; (8005ddc <SystemClock_Config+0xd4>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005d54:	4a21      	ldr	r2, [pc, #132]	; (8005ddc <SystemClock_Config+0xd4>)
 8005d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d5a:	6013      	str	r3, [r2, #0]
 8005d5c:	4b1f      	ldr	r3, [pc, #124]	; (8005ddc <SystemClock_Config+0xd4>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d64:	607b      	str	r3, [r7, #4]
 8005d66:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005d68:	2302      	movs	r3, #2
 8005d6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005d70:	2310      	movs	r3, #16
 8005d72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d74:	2302      	movs	r3, #2
 8005d76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8005d7c:	2310      	movs	r3, #16
 8005d7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005d80:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8005d84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8005d86:	2304      	movs	r3, #4
 8005d88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005d8a:	2307      	movs	r3, #7
 8005d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d8e:	f107 0320 	add.w	r3, r7, #32
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fc f9fe 	bl	8002194 <HAL_RCC_OscConfig>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005d9e:	f000 f999 	bl	80060d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005da2:	230f      	movs	r3, #15
 8005da4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005da6:	2302      	movs	r3, #2
 8005da8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005daa:	2300      	movs	r3, #0
 8005dac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005db2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005db4:	2300      	movs	r3, #0
 8005db6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005db8:	f107 030c 	add.w	r3, r7, #12
 8005dbc:	2102      	movs	r1, #2
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fc fc60 	bl	8002684 <HAL_RCC_ClockConfig>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8005dca:	f000 f983 	bl	80060d4 <Error_Handler>
  }
}
 8005dce:	bf00      	nop
 8005dd0:	3750      	adds	r7, #80	; 0x50
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	40023800 	.word	0x40023800
 8005ddc:	40007000 	.word	0x40007000

08005de0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005de4:	4b12      	ldr	r3, [pc, #72]	; (8005e30 <MX_I2C1_Init+0x50>)
 8005de6:	4a13      	ldr	r2, [pc, #76]	; (8005e34 <MX_I2C1_Init+0x54>)
 8005de8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005dea:	4b11      	ldr	r3, [pc, #68]	; (8005e30 <MX_I2C1_Init+0x50>)
 8005dec:	4a12      	ldr	r2, [pc, #72]	; (8005e38 <MX_I2C1_Init+0x58>)
 8005dee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005df0:	4b0f      	ldr	r3, [pc, #60]	; (8005e30 <MX_I2C1_Init+0x50>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005df6:	4b0e      	ldr	r3, [pc, #56]	; (8005e30 <MX_I2C1_Init+0x50>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005dfc:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <MX_I2C1_Init+0x50>)
 8005dfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005e02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005e04:	4b0a      	ldr	r3, [pc, #40]	; (8005e30 <MX_I2C1_Init+0x50>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005e0a:	4b09      	ldr	r3, [pc, #36]	; (8005e30 <MX_I2C1_Init+0x50>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005e10:	4b07      	ldr	r3, [pc, #28]	; (8005e30 <MX_I2C1_Init+0x50>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005e16:	4b06      	ldr	r3, [pc, #24]	; (8005e30 <MX_I2C1_Init+0x50>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005e1c:	4804      	ldr	r0, [pc, #16]	; (8005e30 <MX_I2C1_Init+0x50>)
 8005e1e:	f7fb fa23 	bl	8001268 <HAL_I2C_Init>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005e28:	f000 f954 	bl	80060d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005e2c:	bf00      	nop
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	20004b28 	.word	0x20004b28
 8005e34:	40005400 	.word	0x40005400
 8005e38:	000186a0 	.word	0x000186a0

08005e3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005e40:	4b11      	ldr	r3, [pc, #68]	; (8005e88 <MX_USART1_UART_Init+0x4c>)
 8005e42:	4a12      	ldr	r2, [pc, #72]	; (8005e8c <MX_USART1_UART_Init+0x50>)
 8005e44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005e46:	4b10      	ldr	r3, [pc, #64]	; (8005e88 <MX_USART1_UART_Init+0x4c>)
 8005e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005e4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005e4e:	4b0e      	ldr	r3, [pc, #56]	; (8005e88 <MX_USART1_UART_Init+0x4c>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005e54:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <MX_USART1_UART_Init+0x4c>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005e5a:	4b0b      	ldr	r3, [pc, #44]	; (8005e88 <MX_USART1_UART_Init+0x4c>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005e60:	4b09      	ldr	r3, [pc, #36]	; (8005e88 <MX_USART1_UART_Init+0x4c>)
 8005e62:	220c      	movs	r2, #12
 8005e64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e66:	4b08      	ldr	r3, [pc, #32]	; (8005e88 <MX_USART1_UART_Init+0x4c>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e6c:	4b06      	ldr	r3, [pc, #24]	; (8005e88 <MX_USART1_UART_Init+0x4c>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005e72:	4805      	ldr	r0, [pc, #20]	; (8005e88 <MX_USART1_UART_Init+0x4c>)
 8005e74:	f7fc fe02 	bl	8002a7c <HAL_UART_Init>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005e7e:	f000 f929 	bl	80060d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005e82:	bf00      	nop
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20004b7c 	.word	0x20004b7c
 8005e8c:	40011000 	.word	0x40011000

08005e90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005e94:	4b11      	ldr	r3, [pc, #68]	; (8005edc <MX_USART2_UART_Init+0x4c>)
 8005e96:	4a12      	ldr	r2, [pc, #72]	; (8005ee0 <MX_USART2_UART_Init+0x50>)
 8005e98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005e9a:	4b10      	ldr	r3, [pc, #64]	; (8005edc <MX_USART2_UART_Init+0x4c>)
 8005e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005ea0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005ea2:	4b0e      	ldr	r3, [pc, #56]	; (8005edc <MX_USART2_UART_Init+0x4c>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005ea8:	4b0c      	ldr	r3, [pc, #48]	; (8005edc <MX_USART2_UART_Init+0x4c>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005eae:	4b0b      	ldr	r3, [pc, #44]	; (8005edc <MX_USART2_UART_Init+0x4c>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005eb4:	4b09      	ldr	r3, [pc, #36]	; (8005edc <MX_USART2_UART_Init+0x4c>)
 8005eb6:	220c      	movs	r2, #12
 8005eb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005eba:	4b08      	ldr	r3, [pc, #32]	; (8005edc <MX_USART2_UART_Init+0x4c>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ec0:	4b06      	ldr	r3, [pc, #24]	; (8005edc <MX_USART2_UART_Init+0x4c>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005ec6:	4805      	ldr	r0, [pc, #20]	; (8005edc <MX_USART2_UART_Init+0x4c>)
 8005ec8:	f7fc fdd8 	bl	8002a7c <HAL_UART_Init>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005ed2:	f000 f8ff 	bl	80060d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005ed6:	bf00      	nop
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	20004c04 	.word	0x20004c04
 8005ee0:	40004400 	.word	0x40004400

08005ee4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005ee8:	4b11      	ldr	r3, [pc, #68]	; (8005f30 <MX_USART6_UART_Init+0x4c>)
 8005eea:	4a12      	ldr	r2, [pc, #72]	; (8005f34 <MX_USART6_UART_Init+0x50>)
 8005eec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005eee:	4b10      	ldr	r3, [pc, #64]	; (8005f30 <MX_USART6_UART_Init+0x4c>)
 8005ef0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005ef4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005ef6:	4b0e      	ldr	r3, [pc, #56]	; (8005f30 <MX_USART6_UART_Init+0x4c>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005efc:	4b0c      	ldr	r3, [pc, #48]	; (8005f30 <MX_USART6_UART_Init+0x4c>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005f02:	4b0b      	ldr	r3, [pc, #44]	; (8005f30 <MX_USART6_UART_Init+0x4c>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005f08:	4b09      	ldr	r3, [pc, #36]	; (8005f30 <MX_USART6_UART_Init+0x4c>)
 8005f0a:	220c      	movs	r2, #12
 8005f0c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f0e:	4b08      	ldr	r3, [pc, #32]	; (8005f30 <MX_USART6_UART_Init+0x4c>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f14:	4b06      	ldr	r3, [pc, #24]	; (8005f30 <MX_USART6_UART_Init+0x4c>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005f1a:	4805      	ldr	r0, [pc, #20]	; (8005f30 <MX_USART6_UART_Init+0x4c>)
 8005f1c:	f7fc fdae 	bl	8002a7c <HAL_UART_Init>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8005f26:	f000 f8d5 	bl	80060d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005f2a:	bf00      	nop
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	20004bc0 	.word	0x20004bc0
 8005f34:	40011400 	.word	0x40011400

08005f38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b08a      	sub	sp, #40	; 0x28
 8005f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f3e:	f107 0314 	add.w	r3, r7, #20
 8005f42:	2200      	movs	r2, #0
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	605a      	str	r2, [r3, #4]
 8005f48:	609a      	str	r2, [r3, #8]
 8005f4a:	60da      	str	r2, [r3, #12]
 8005f4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f4e:	2300      	movs	r3, #0
 8005f50:	613b      	str	r3, [r7, #16]
 8005f52:	4b39      	ldr	r3, [pc, #228]	; (8006038 <MX_GPIO_Init+0x100>)
 8005f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f56:	4a38      	ldr	r2, [pc, #224]	; (8006038 <MX_GPIO_Init+0x100>)
 8005f58:	f043 0304 	orr.w	r3, r3, #4
 8005f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f5e:	4b36      	ldr	r3, [pc, #216]	; (8006038 <MX_GPIO_Init+0x100>)
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	613b      	str	r3, [r7, #16]
 8005f68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	4b32      	ldr	r3, [pc, #200]	; (8006038 <MX_GPIO_Init+0x100>)
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	4a31      	ldr	r2, [pc, #196]	; (8006038 <MX_GPIO_Init+0x100>)
 8005f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f78:	6313      	str	r3, [r2, #48]	; 0x30
 8005f7a:	4b2f      	ldr	r3, [pc, #188]	; (8006038 <MX_GPIO_Init+0x100>)
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f86:	2300      	movs	r3, #0
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	4b2b      	ldr	r3, [pc, #172]	; (8006038 <MX_GPIO_Init+0x100>)
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	4a2a      	ldr	r2, [pc, #168]	; (8006038 <MX_GPIO_Init+0x100>)
 8005f90:	f043 0301 	orr.w	r3, r3, #1
 8005f94:	6313      	str	r3, [r2, #48]	; 0x30
 8005f96:	4b28      	ldr	r3, [pc, #160]	; (8006038 <MX_GPIO_Init+0x100>)
 8005f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	60bb      	str	r3, [r7, #8]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	607b      	str	r3, [r7, #4]
 8005fa6:	4b24      	ldr	r3, [pc, #144]	; (8006038 <MX_GPIO_Init+0x100>)
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005faa:	4a23      	ldr	r2, [pc, #140]	; (8006038 <MX_GPIO_Init+0x100>)
 8005fac:	f043 0302 	orr.w	r3, r3, #2
 8005fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8005fb2:	4b21      	ldr	r3, [pc, #132]	; (8006038 <MX_GPIO_Init+0x100>)
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	607b      	str	r3, [r7, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	2120      	movs	r1, #32
 8005fc2:	481e      	ldr	r0, [pc, #120]	; (800603c <MX_GPIO_Init+0x104>)
 8005fc4:	f7fb f936 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005fc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005fce:	4b1c      	ldr	r3, [pc, #112]	; (8006040 <MX_GPIO_Init+0x108>)
 8005fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005fd6:	f107 0314 	add.w	r3, r7, #20
 8005fda:	4619      	mov	r1, r3
 8005fdc:	4819      	ldr	r0, [pc, #100]	; (8006044 <MX_GPIO_Init+0x10c>)
 8005fde:	f7fa ffa5 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8005fe2:	2320      	movs	r3, #32
 8005fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8005ff2:	f107 0314 	add.w	r3, r7, #20
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4810      	ldr	r0, [pc, #64]	; (800603c <MX_GPIO_Init+0x104>)
 8005ffa:	f7fa ff97 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005ffe:	2330      	movs	r3, #48	; 0x30
 8006000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006002:	2300      	movs	r3, #0
 8006004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006006:	2300      	movs	r3, #0
 8006008:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800600a:	f107 0314 	add.w	r3, r7, #20
 800600e:	4619      	mov	r1, r3
 8006010:	480c      	ldr	r0, [pc, #48]	; (8006044 <MX_GPIO_Init+0x10c>)
 8006012:	f7fa ff8b 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800601a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800601c:	2300      	movs	r3, #0
 800601e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006020:	2300      	movs	r3, #0
 8006022:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006024:	f107 0314 	add.w	r3, r7, #20
 8006028:	4619      	mov	r1, r3
 800602a:	4804      	ldr	r0, [pc, #16]	; (800603c <MX_GPIO_Init+0x104>)
 800602c:	f7fa ff7e 	bl	8000f2c <HAL_GPIO_Init>

}
 8006030:	bf00      	nop
 8006032:	3728      	adds	r7, #40	; 0x28
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	40023800 	.word	0x40023800
 800603c:	40020000 	.word	0x40020000
 8006040:	10210000 	.word	0x10210000
 8006044:	40020800 	.word	0x40020800

08006048 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8006048:	b580      	push	{r7, lr}
 800604a:	b0c8      	sub	sp, #288	; 0x120
 800604c:	af02      	add	r7, sp, #8
 800604e:	1d3b      	adds	r3, r7, #4
 8006050:	6018      	str	r0, [r3, #0]

	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		TickType_t nowTicks = xTaskGetTickCount();
 8006052:	f7fe fa3f 	bl	80044d4 <xTaskGetTickCount>
 8006056:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
		uint32_t nowTicks_ms = nowTicks * 1000 / configTICK_RATE_HZ;
 800605a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800605e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006062:	fb02 f303 	mul.w	r3, r2, r3
 8006066:	4a18      	ldr	r2, [pc, #96]	; (80060c8 <StartDefaultTask+0x80>)
 8006068:	fba2 2303 	umull	r2, r3, r2, r3
 800606c:	099b      	lsrs	r3, r3, #6
 800606e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		pmProtocolPeriodic(nowTicks_ms, &slave_uart);
 8006072:	4916      	ldr	r1, [pc, #88]	; (80060cc <StartDefaultTask+0x84>)
 8006074:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8006078:	f000 f85e 	bl	8006138 <pmProtocolPeriodic>
		uint32_t result_co2 = 0;
 800607c:	2300      	movs	r3, #0
 800607e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		uint32_t result_voc = 0;
 8006082:	2300      	movs	r3, #0
 8006084:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		getSensorReading_co2level(&result_co2,0,HW_I2C1,NULL);
 8006088:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 800608c:	2300      	movs	r3, #0
 800608e:	2200      	movs	r2, #0
 8006090:	2100      	movs	r1, #0
 8006092:	f000 fb79 	bl	8006788 <getSensorReading_co2level>
		getSensorReadingvoclevel(&result_voc,0,HW_I2C1,NULL);
 8006096:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800609a:	2300      	movs	r3, #0
 800609c:	2200      	movs	r2, #0
 800609e:	2100      	movs	r1, #0
 80060a0:	f000 fbce 	bl	8006840 <getSensorReadingvoclevel>
		char msg[250];
		snprintf(msg,sizeof(msg),"CO2_level is : %d VOC level is %d \r\n",result_co2,result_voc);
 80060a4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80060a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060ac:	f107 000c 	add.w	r0, r7, #12
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	4613      	mov	r3, r2
 80060b4:	4a06      	ldr	r2, [pc, #24]	; (80060d0 <StartDefaultTask+0x88>)
 80060b6:	21fa      	movs	r1, #250	; 0xfa
 80060b8:	f000 fc76 	bl	80069a8 <sniprintf>
		debug(msg);
 80060bc:	f107 030c 	add.w	r3, r7, #12
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff fda3 	bl	8005c0c <debug>
	for (;;) {
 80060c6:	e7c4      	b.n	8006052 <StartDefaultTask+0xa>
 80060c8:	10624dd3 	.word	0x10624dd3
 80060cc:	20004a94 	.word	0x20004a94
 80060d0:	08007274 	.word	0x08007274

080060d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80060d4:	b480      	push	{r7}
 80060d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80060d8:	bf00      	nop
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
	...

080060e4 <pmProtocolInit>:

// --------------------------------------------------------------------------------------------------------------------
// FUNCTIONS
// --------------------------------------------------------------------------------------------------------------------
int pmProtocolInit(const pmProtocolDriver_t * driver, pmProtocolContext_t * context)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
    int rc = PM_PROTOCOL_FAILURE;
 80060ee:	2301      	movs	r3, #1
 80060f0:	60fb      	str	r3, [r7, #12]
    if (   (NULL != context)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d018      	beq.n	800612a <pmProtocolInit+0x46>
        && (NULL == context->driver) // If the driver is null, we can assume the module has not yet been initialized.
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d114      	bne.n	800612a <pmProtocolInit+0x46>
        && (NULL != driver)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d011      	beq.n	800612a <pmProtocolInit+0x46>
        && (NULL != driver->rx)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00d      	beq.n	800612a <pmProtocolInit+0x46>
        && (NULL != driver->tx))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d009      	beq.n	800612a <pmProtocolInit+0x46>
    {
        context->driver = driver;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	601a      	str	r2, [r3, #0]

        (void)memset(&g_pmProtocolContext, 0, sizeof(g_pmProtocolContext));
 800611c:	2294      	movs	r2, #148	; 0x94
 800611e:	2100      	movs	r1, #0
 8006120:	4804      	ldr	r0, [pc, #16]	; (8006134 <pmProtocolInit+0x50>)
 8006122:	f000 fc39 	bl	8006998 <memset>

        rc = PM_PROTOCOL_SUCCESS;
 8006126:	2300      	movs	r3, #0
 8006128:	60fb      	str	r3, [r7, #12]
    }

    return rc;
 800612a:	68fb      	ldr	r3, [r7, #12]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	200049ac 	.word	0x200049ac

08006138 <pmProtocolPeriodic>:
    return rc;
}

// --------------------------------------------------------------------------------------------------------------------
void pmProtocolPeriodic(uint32_t ticks_ms, pmProtocolContext_t * context)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
    if (NULL != context->driver)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 80ec 	beq.w	8006324 <pmProtocolPeriodic+0x1ec>
    {
        // Handle transmits.
        if (context->txInProgress)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	791b      	ldrb	r3, [r3, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d035      	beq.n	80061c0 <pmProtocolPeriodic+0x88>
        {
        	if (!context->txWaitingForAck)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	795b      	ldrb	r3, [r3, #5]
 8006158:	f083 0301 	eor.w	r3, r3, #1
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00e      	beq.n	8006180 <pmProtocolPeriodic+0x48>
        	{
        		// Transmit the first two bytes.
				if (0 < context->driver->tx(context->txBuffer, LEN_BYTE_OFFSET + 1))
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	3206      	adds	r2, #6
 800616c:	2102      	movs	r1, #2
 800616e:	4610      	mov	r0, r2
 8006170:	4798      	blx	r3
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	dd23      	ble.n	80061c0 <pmProtocolPeriodic+0x88>
				{
					context->txWaitingForAck = true;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2201      	movs	r2, #1
 800617c:	715a      	strb	r2, [r3, #5]
 800617e:	e01f      	b.n	80061c0 <pmProtocolPeriodic+0x88>
				}
        	}
        	else
        	{
        		uint8_t ack;
        		if (1 == context->driver->rx(&ack, 1))
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f107 020b 	add.w	r2, r7, #11
 800618a:	2101      	movs	r1, #1
 800618c:	4610      	mov	r0, r2
 800618e:	4798      	blx	r3
 8006190:	4603      	mov	r3, r0
 8006192:	2b01      	cmp	r3, #1
 8006194:	d114      	bne.n	80061c0 <pmProtocolPeriodic+0x88>
        		{
        			// Ack received, send the rest of the bytes.
        			context->txWaitingForAck = false;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2200      	movs	r2, #0
 800619a:	715a      	strb	r2, [r3, #5]
        			if (0 < context->driver->tx(&context->txBuffer[LEN_BYTE_OFFSET + 1], context->txBuffer[LEN_BYTE_OFFSET] - 2))
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	f102 0008 	add.w	r0, r2, #8
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	79d2      	ldrb	r2, [r2, #7]
 80061ac:	3a02      	subs	r2, #2
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	4611      	mov	r1, r2
 80061b2:	4798      	blx	r3
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	dd02      	ble.n	80061c0 <pmProtocolPeriodic+0x88>
        			{
        				context->txInProgress = false; // Transmit completed.
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2200      	movs	r2, #0
 80061be:	711a      	strb	r2, [r3, #4]
        		}
        	}
        }

        // Handle receives.
        switch(context->rxState)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d002      	beq.n	80061d0 <pmProtocolPeriodic+0x98>
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d05a      	beq.n	8006284 <pmProtocolPeriodic+0x14c>
            }
            case PAYLOAD_READY:    // Pass through
            case TIMEOUT_OCCURRED: // Pass through
            case CHECKSUM_ERROR:   // Pass through
            default:
                break;
 80061ce:	e0ae      	b.n	800632e <pmProtocolPeriodic+0x1f6>
                if (2 == context->driver->rx(context->rxBuffer, 2))
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	3250      	adds	r2, #80	; 0x50
 80061da:	2102      	movs	r1, #2
 80061dc:	4610      	mov	r0, r2
 80061de:	4798      	blx	r3
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	f040 80a0 	bne.w	8006328 <pmProtocolPeriodic+0x1f0>
                    if (context->rxBuffer[START_BYTE_OFFSET] == START_BYTE)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	f040 809a 	bne.w	8006328 <pmProtocolPeriodic+0x1f0>
                        context->rxStartTicks = ticks_ms;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	64da      	str	r2, [r3, #76]	; 0x4c
                        context->rxBytes = 1;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
                        context->rxLen = context->rxBuffer[LEN_BYTE_OFFSET];
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
						if (context->rxLen <= MAX_RX_BYTES)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8006214:	2b43      	cmp	r3, #67	; 0x43
 8006216:	d830      	bhi.n	800627a <pmProtocolPeriodic+0x142>
							uint8_t ack = 0x40;
 8006218:	2340      	movs	r3, #64	; 0x40
 800621a:	72bb      	strb	r3, [r7, #10]
							context->driver->tx(&ack, 1);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f107 020a 	add.w	r2, r7, #10
 8006226:	2101      	movs	r1, #1
 8006228:	4610      	mov	r0, r2
 800622a:	4798      	blx	r3
							context->rxBytes = 2;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2202      	movs	r2, #2
 8006230:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
							context->rxState = WAITING_FOR_DATA;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
			                uint8_t rxBytes = context->driver->rx(&context->rxBuffer[context->rxBytes],
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	f892 204b 	ldrb.w	r2, [r2, #75]	; 0x4b
 8006248:	3250      	adds	r2, #80	; 0x50
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	1888      	adds	r0, r1, r2
			                    context->rxLen - context->rxBytes);
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	f892 104a 	ldrb.w	r1, [r2, #74]	; 0x4a
 8006254:	683a      	ldr	r2, [r7, #0]
 8006256:	f892 204b 	ldrb.w	r2, [r2, #75]	; 0x4b
			                uint8_t rxBytes = context->driver->rx(&context->rxBuffer[context->rxBytes],
 800625a:	1a8a      	subs	r2, r1, r2
 800625c:	b2d2      	uxtb	r2, r2
 800625e:	4611      	mov	r1, r2
 8006260:	4798      	blx	r3
 8006262:	4603      	mov	r3, r0
 8006264:	733b      	strb	r3, [r7, #12]
			                context->rxBytes += rxBytes;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800626c:	7b3b      	ldrb	r3, [r7, #12]
 800626e:	4413      	add	r3, r2
 8006270:	b2da      	uxtb	r2, r3
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
                break;
 8006278:	e056      	b.n	8006328 <pmProtocolPeriodic+0x1f0>
							context->rxState = CHECKSUM_ERROR;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2205      	movs	r2, #5
 800627e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                break;
 8006282:	e051      	b.n	8006328 <pmProtocolPeriodic+0x1f0>
                if (context->rxBytes >= context->rxLen)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8006290:	429a      	cmp	r2, r3
 8006292:	d322      	bcc.n	80062da <pmProtocolPeriodic+0x1a2>
                    uint8_t checksum = 0;
 8006294:	2300      	movs	r3, #0
 8006296:	73fb      	strb	r3, [r7, #15]
                    for (uint8_t ix = 0; ix < context->rxLen; ix++)
 8006298:	2300      	movs	r3, #0
 800629a:	73bb      	strb	r3, [r7, #14]
 800629c:	e00a      	b.n	80062b4 <pmProtocolPeriodic+0x17c>
                        checksum += context->rxBuffer[ix];
 800629e:	7bbb      	ldrb	r3, [r7, #14]
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	4413      	add	r3, r2
 80062a4:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
 80062aa:	4413      	add	r3, r2
 80062ac:	73fb      	strb	r3, [r7, #15]
                    for (uint8_t ix = 0; ix < context->rxLen; ix++)
 80062ae:	7bbb      	ldrb	r3, [r7, #14]
 80062b0:	3301      	adds	r3, #1
 80062b2:	73bb      	strb	r3, [r7, #14]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80062ba:	7bba      	ldrb	r2, [r7, #14]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d3ee      	bcc.n	800629e <pmProtocolPeriodic+0x166>
                    if (checksum == 0)
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d104      	bne.n	80062d0 <pmProtocolPeriodic+0x198>
                        context->rxState = PAYLOAD_READY;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2203      	movs	r2, #3
 80062ca:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                break;
 80062ce:	e02d      	b.n	800632c <pmProtocolPeriodic+0x1f4>
                        context->rxState = CHECKSUM_ERROR;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2205      	movs	r2, #5
 80062d4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                break;
 80062d8:	e028      	b.n	800632c <pmProtocolPeriodic+0x1f4>
					if ((ticks_ms - context->rxStartTicks) > END_OF_PACKET_TIMEOUT_ms)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2bfa      	cmp	r3, #250	; 0xfa
 80062e4:	d822      	bhi.n	800632c <pmProtocolPeriodic+0x1f4>
						uint8_t rxBytes = context->driver->rx(&context->rxBuffer[context->rxBytes],
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	f892 204b 	ldrb.w	r2, [r2, #75]	; 0x4b
 80062f2:	3250      	adds	r2, #80	; 0x50
 80062f4:	6839      	ldr	r1, [r7, #0]
 80062f6:	1888      	adds	r0, r1, r2
							context->rxLen - context->rxBytes);
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	f892 104a 	ldrb.w	r1, [r2, #74]	; 0x4a
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	f892 204b 	ldrb.w	r2, [r2, #75]	; 0x4b
						uint8_t rxBytes = context->driver->rx(&context->rxBuffer[context->rxBytes],
 8006304:	1a8a      	subs	r2, r1, r2
 8006306:	b2d2      	uxtb	r2, r2
 8006308:	4611      	mov	r1, r2
 800630a:	4798      	blx	r3
 800630c:	4603      	mov	r3, r0
 800630e:	737b      	strb	r3, [r7, #13]
						context->rxBytes += rxBytes;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8006316:	7b7b      	ldrb	r3, [r7, #13]
 8006318:	4413      	add	r3, r2
 800631a:	b2da      	uxtb	r2, r3
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
                break;
 8006322:	e003      	b.n	800632c <pmProtocolPeriodic+0x1f4>
        }
    }
 8006324:	bf00      	nop
 8006326:	e002      	b.n	800632e <pmProtocolPeriodic+0x1f6>
                break;
 8006328:	bf00      	nop
 800632a:	e000      	b.n	800632e <pmProtocolPeriodic+0x1f6>
                break;
 800632c:	bf00      	nop
}
 800632e:	bf00      	nop
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800633e:	2300      	movs	r3, #0
 8006340:	607b      	str	r3, [r7, #4]
 8006342:	4b12      	ldr	r3, [pc, #72]	; (800638c <HAL_MspInit+0x54>)
 8006344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006346:	4a11      	ldr	r2, [pc, #68]	; (800638c <HAL_MspInit+0x54>)
 8006348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800634c:	6453      	str	r3, [r2, #68]	; 0x44
 800634e:	4b0f      	ldr	r3, [pc, #60]	; (800638c <HAL_MspInit+0x54>)
 8006350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006356:	607b      	str	r3, [r7, #4]
 8006358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800635a:	2300      	movs	r3, #0
 800635c:	603b      	str	r3, [r7, #0]
 800635e:	4b0b      	ldr	r3, [pc, #44]	; (800638c <HAL_MspInit+0x54>)
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	4a0a      	ldr	r2, [pc, #40]	; (800638c <HAL_MspInit+0x54>)
 8006364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006368:	6413      	str	r3, [r2, #64]	; 0x40
 800636a:	4b08      	ldr	r3, [pc, #32]	; (800638c <HAL_MspInit+0x54>)
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006372:	603b      	str	r3, [r7, #0]
 8006374:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006376:	2200      	movs	r2, #0
 8006378:	210f      	movs	r1, #15
 800637a:	f06f 0001 	mvn.w	r0, #1
 800637e:	f7fa fdac 	bl	8000eda <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006382:	bf00      	nop
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	40023800 	.word	0x40023800

08006390 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b08a      	sub	sp, #40	; 0x28
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006398:	f107 0314 	add.w	r3, r7, #20
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	605a      	str	r2, [r3, #4]
 80063a2:	609a      	str	r2, [r3, #8]
 80063a4:	60da      	str	r2, [r3, #12]
 80063a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a19      	ldr	r2, [pc, #100]	; (8006414 <HAL_I2C_MspInit+0x84>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d12b      	bne.n	800640a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063b2:	2300      	movs	r3, #0
 80063b4:	613b      	str	r3, [r7, #16]
 80063b6:	4b18      	ldr	r3, [pc, #96]	; (8006418 <HAL_I2C_MspInit+0x88>)
 80063b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ba:	4a17      	ldr	r2, [pc, #92]	; (8006418 <HAL_I2C_MspInit+0x88>)
 80063bc:	f043 0302 	orr.w	r3, r3, #2
 80063c0:	6313      	str	r3, [r2, #48]	; 0x30
 80063c2:	4b15      	ldr	r3, [pc, #84]	; (8006418 <HAL_I2C_MspInit+0x88>)
 80063c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	613b      	str	r3, [r7, #16]
 80063cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80063ce:	23c0      	movs	r3, #192	; 0xc0
 80063d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80063d2:	2312      	movs	r3, #18
 80063d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80063d6:	2301      	movs	r3, #1
 80063d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063da:	2303      	movs	r3, #3
 80063dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80063de:	2304      	movs	r3, #4
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063e2:	f107 0314 	add.w	r3, r7, #20
 80063e6:	4619      	mov	r1, r3
 80063e8:	480c      	ldr	r0, [pc, #48]	; (800641c <HAL_I2C_MspInit+0x8c>)
 80063ea:	f7fa fd9f 	bl	8000f2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80063ee:	2300      	movs	r3, #0
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	4b09      	ldr	r3, [pc, #36]	; (8006418 <HAL_I2C_MspInit+0x88>)
 80063f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f6:	4a08      	ldr	r2, [pc, #32]	; (8006418 <HAL_I2C_MspInit+0x88>)
 80063f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063fc:	6413      	str	r3, [r2, #64]	; 0x40
 80063fe:	4b06      	ldr	r3, [pc, #24]	; (8006418 <HAL_I2C_MspInit+0x88>)
 8006400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800640a:	bf00      	nop
 800640c:	3728      	adds	r7, #40	; 0x28
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	40005400 	.word	0x40005400
 8006418:	40023800 	.word	0x40023800
 800641c:	40020400 	.word	0x40020400

08006420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b08e      	sub	sp, #56	; 0x38
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800642c:	2200      	movs	r2, #0
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	605a      	str	r2, [r3, #4]
 8006432:	609a      	str	r2, [r3, #8]
 8006434:	60da      	str	r2, [r3, #12]
 8006436:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a4b      	ldr	r2, [pc, #300]	; (800656c <HAL_UART_MspInit+0x14c>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d12d      	bne.n	800649e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006442:	2300      	movs	r3, #0
 8006444:	623b      	str	r3, [r7, #32]
 8006446:	4b4a      	ldr	r3, [pc, #296]	; (8006570 <HAL_UART_MspInit+0x150>)
 8006448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644a:	4a49      	ldr	r2, [pc, #292]	; (8006570 <HAL_UART_MspInit+0x150>)
 800644c:	f043 0310 	orr.w	r3, r3, #16
 8006450:	6453      	str	r3, [r2, #68]	; 0x44
 8006452:	4b47      	ldr	r3, [pc, #284]	; (8006570 <HAL_UART_MspInit+0x150>)
 8006454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006456:	f003 0310 	and.w	r3, r3, #16
 800645a:	623b      	str	r3, [r7, #32]
 800645c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800645e:	2300      	movs	r3, #0
 8006460:	61fb      	str	r3, [r7, #28]
 8006462:	4b43      	ldr	r3, [pc, #268]	; (8006570 <HAL_UART_MspInit+0x150>)
 8006464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006466:	4a42      	ldr	r2, [pc, #264]	; (8006570 <HAL_UART_MspInit+0x150>)
 8006468:	f043 0301 	orr.w	r3, r3, #1
 800646c:	6313      	str	r3, [r2, #48]	; 0x30
 800646e:	4b40      	ldr	r3, [pc, #256]	; (8006570 <HAL_UART_MspInit+0x150>)
 8006470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	61fb      	str	r3, [r7, #28]
 8006478:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800647a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800647e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006480:	2302      	movs	r3, #2
 8006482:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006484:	2300      	movs	r3, #0
 8006486:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006488:	2303      	movs	r3, #3
 800648a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800648c:	2307      	movs	r3, #7
 800648e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006494:	4619      	mov	r1, r3
 8006496:	4837      	ldr	r0, [pc, #220]	; (8006574 <HAL_UART_MspInit+0x154>)
 8006498:	f7fa fd48 	bl	8000f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800649c:	e062      	b.n	8006564 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART2)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a35      	ldr	r2, [pc, #212]	; (8006578 <HAL_UART_MspInit+0x158>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d12c      	bne.n	8006502 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80064a8:	2300      	movs	r3, #0
 80064aa:	61bb      	str	r3, [r7, #24]
 80064ac:	4b30      	ldr	r3, [pc, #192]	; (8006570 <HAL_UART_MspInit+0x150>)
 80064ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b0:	4a2f      	ldr	r2, [pc, #188]	; (8006570 <HAL_UART_MspInit+0x150>)
 80064b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064b6:	6413      	str	r3, [r2, #64]	; 0x40
 80064b8:	4b2d      	ldr	r3, [pc, #180]	; (8006570 <HAL_UART_MspInit+0x150>)
 80064ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c0:	61bb      	str	r3, [r7, #24]
 80064c2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064c4:	2300      	movs	r3, #0
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	4b29      	ldr	r3, [pc, #164]	; (8006570 <HAL_UART_MspInit+0x150>)
 80064ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064cc:	4a28      	ldr	r2, [pc, #160]	; (8006570 <HAL_UART_MspInit+0x150>)
 80064ce:	f043 0301 	orr.w	r3, r3, #1
 80064d2:	6313      	str	r3, [r2, #48]	; 0x30
 80064d4:	4b26      	ldr	r3, [pc, #152]	; (8006570 <HAL_UART_MspInit+0x150>)
 80064d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	617b      	str	r3, [r7, #20]
 80064de:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80064e0:	230c      	movs	r3, #12
 80064e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064e4:	2302      	movs	r3, #2
 80064e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064e8:	2300      	movs	r3, #0
 80064ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064ec:	2300      	movs	r3, #0
 80064ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80064f0:	2307      	movs	r3, #7
 80064f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064f8:	4619      	mov	r1, r3
 80064fa:	481e      	ldr	r0, [pc, #120]	; (8006574 <HAL_UART_MspInit+0x154>)
 80064fc:	f7fa fd16 	bl	8000f2c <HAL_GPIO_Init>
}
 8006500:	e030      	b.n	8006564 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a1d      	ldr	r2, [pc, #116]	; (800657c <HAL_UART_MspInit+0x15c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d12b      	bne.n	8006564 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 800650c:	2300      	movs	r3, #0
 800650e:	613b      	str	r3, [r7, #16]
 8006510:	4b17      	ldr	r3, [pc, #92]	; (8006570 <HAL_UART_MspInit+0x150>)
 8006512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006514:	4a16      	ldr	r2, [pc, #88]	; (8006570 <HAL_UART_MspInit+0x150>)
 8006516:	f043 0320 	orr.w	r3, r3, #32
 800651a:	6453      	str	r3, [r2, #68]	; 0x44
 800651c:	4b14      	ldr	r3, [pc, #80]	; (8006570 <HAL_UART_MspInit+0x150>)
 800651e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006520:	f003 0320 	and.w	r3, r3, #32
 8006524:	613b      	str	r3, [r7, #16]
 8006526:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006528:	2300      	movs	r3, #0
 800652a:	60fb      	str	r3, [r7, #12]
 800652c:	4b10      	ldr	r3, [pc, #64]	; (8006570 <HAL_UART_MspInit+0x150>)
 800652e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006530:	4a0f      	ldr	r2, [pc, #60]	; (8006570 <HAL_UART_MspInit+0x150>)
 8006532:	f043 0304 	orr.w	r3, r3, #4
 8006536:	6313      	str	r3, [r2, #48]	; 0x30
 8006538:	4b0d      	ldr	r3, [pc, #52]	; (8006570 <HAL_UART_MspInit+0x150>)
 800653a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	60fb      	str	r3, [r7, #12]
 8006542:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006544:	23c0      	movs	r3, #192	; 0xc0
 8006546:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006548:	2302      	movs	r3, #2
 800654a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800654c:	2300      	movs	r3, #0
 800654e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006550:	2303      	movs	r3, #3
 8006552:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006554:	2308      	movs	r3, #8
 8006556:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800655c:	4619      	mov	r1, r3
 800655e:	4808      	ldr	r0, [pc, #32]	; (8006580 <HAL_UART_MspInit+0x160>)
 8006560:	f7fa fce4 	bl	8000f2c <HAL_GPIO_Init>
}
 8006564:	bf00      	nop
 8006566:	3738      	adds	r7, #56	; 0x38
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	40011000 	.word	0x40011000
 8006570:	40023800 	.word	0x40023800
 8006574:	40020000 	.word	0x40020000
 8006578:	40004400 	.word	0x40004400
 800657c:	40011400 	.word	0x40011400
 8006580:	40020800 	.word	0x40020800

08006584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006584:	b480      	push	{r7}
 8006586:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006588:	bf00      	nop
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006592:	b480      	push	{r7}
 8006594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006596:	e7fe      	b.n	8006596 <HardFault_Handler+0x4>

08006598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006598:	b480      	push	{r7}
 800659a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800659c:	e7fe      	b.n	800659c <MemManage_Handler+0x4>

0800659e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800659e:	b480      	push	{r7}
 80065a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80065a2:	e7fe      	b.n	80065a2 <BusFault_Handler+0x4>

080065a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80065a4:	b480      	push	{r7}
 80065a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80065a8:	e7fe      	b.n	80065a8 <UsageFault_Handler+0x4>

080065aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80065aa:	b480      	push	{r7}
 80065ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80065ae:	bf00      	nop
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80065bc:	f7fa fb8c 	bl	8000cd8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80065c0:	f7fe fabe 	bl	8004b40 <xTaskGetSchedulerState>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d001      	beq.n	80065ce <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80065ca:	f7ff f8a5 	bl	8005718 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80065ce:	bf00      	nop
 80065d0:	bd80      	pop	{r7, pc}
	...

080065d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80065dc:	4b11      	ldr	r3, [pc, #68]	; (8006624 <_sbrk+0x50>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d102      	bne.n	80065ea <_sbrk+0x16>
		heap_end = &end;
 80065e4:	4b0f      	ldr	r3, [pc, #60]	; (8006624 <_sbrk+0x50>)
 80065e6:	4a10      	ldr	r2, [pc, #64]	; (8006628 <_sbrk+0x54>)
 80065e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80065ea:	4b0e      	ldr	r3, [pc, #56]	; (8006624 <_sbrk+0x50>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80065f0:	4b0c      	ldr	r3, [pc, #48]	; (8006624 <_sbrk+0x50>)
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4413      	add	r3, r2
 80065f8:	466a      	mov	r2, sp
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d907      	bls.n	800660e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80065fe:	f000 f993 	bl	8006928 <__errno>
 8006602:	4603      	mov	r3, r0
 8006604:	220c      	movs	r2, #12
 8006606:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8006608:	f04f 33ff 	mov.w	r3, #4294967295
 800660c:	e006      	b.n	800661c <_sbrk+0x48>
	}

	heap_end += incr;
 800660e:	4b05      	ldr	r3, [pc, #20]	; (8006624 <_sbrk+0x50>)
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4413      	add	r3, r2
 8006616:	4a03      	ldr	r2, [pc, #12]	; (8006624 <_sbrk+0x50>)
 8006618:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800661a:	68fb      	ldr	r3, [r7, #12]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	20004a40 	.word	0x20004a40
 8006628:	20004c60 	.word	0x20004c60

0800662c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006630:	4b16      	ldr	r3, [pc, #88]	; (800668c <SystemInit+0x60>)
 8006632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006636:	4a15      	ldr	r2, [pc, #84]	; (800668c <SystemInit+0x60>)
 8006638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800663c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006640:	4b13      	ldr	r3, [pc, #76]	; (8006690 <SystemInit+0x64>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a12      	ldr	r2, [pc, #72]	; (8006690 <SystemInit+0x64>)
 8006646:	f043 0301 	orr.w	r3, r3, #1
 800664a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800664c:	4b10      	ldr	r3, [pc, #64]	; (8006690 <SystemInit+0x64>)
 800664e:	2200      	movs	r2, #0
 8006650:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006652:	4b0f      	ldr	r3, [pc, #60]	; (8006690 <SystemInit+0x64>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a0e      	ldr	r2, [pc, #56]	; (8006690 <SystemInit+0x64>)
 8006658:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800665c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006660:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006662:	4b0b      	ldr	r3, [pc, #44]	; (8006690 <SystemInit+0x64>)
 8006664:	4a0b      	ldr	r2, [pc, #44]	; (8006694 <SystemInit+0x68>)
 8006666:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006668:	4b09      	ldr	r3, [pc, #36]	; (8006690 <SystemInit+0x64>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a08      	ldr	r2, [pc, #32]	; (8006690 <SystemInit+0x64>)
 800666e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006672:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006674:	4b06      	ldr	r3, [pc, #24]	; (8006690 <SystemInit+0x64>)
 8006676:	2200      	movs	r2, #0
 8006678:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800667a:	4b04      	ldr	r3, [pc, #16]	; (800668c <SystemInit+0x60>)
 800667c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006680:	609a      	str	r2, [r3, #8]
#endif
}
 8006682:	bf00      	nop
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	e000ed00 	.word	0xe000ed00
 8006690:	40023800 	.word	0x40023800
 8006694:	24003010 	.word	0x24003010

08006698 <mics_I2C_receive>:
 * 		true  - success
 * 		false - fail
 * @ info This function is for transmitting a command to the MICS and receive the data response
 --------------------------------------------------------------------------------------------------------------------*/
static uint8_t mics_I2C_receive(uint8_t dev_id, mics_commands_t command, uint8_t * rx_data, I2C_HandleTypeDef * i2c_handle)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b088      	sub	sp, #32
 800669c:	af02      	add	r7, sp, #8
 800669e:	60ba      	str	r2, [r7, #8]
 80066a0:	607b      	str	r3, [r7, #4]
 80066a2:	4603      	mov	r3, r0
 80066a4:	73fb      	strb	r3, [r7, #15]
 80066a6:	460b      	mov	r3, r1
 80066a8:	73bb      	strb	r3, [r7, #14]
	uint8_t tx_buffer[MICS_TX_BUFFER_SIZE] = {0};
 80066aa:	2300      	movs	r3, #0
 80066ac:	613b      	str	r3, [r7, #16]
 80066ae:	2300      	movs	r3, #0
 80066b0:	82bb      	strh	r3, [r7, #20]

	tx_buffer[0] = command;
 80066b2:	7bbb      	ldrb	r3, [r7, #14]
 80066b4:	743b      	strb	r3, [r7, #16]

	tx_buffer[5] = 0; ////to add CRC check here
 80066b6:	2300      	movs	r3, #0
 80066b8:	757b      	strb	r3, [r7, #21]

	uint8_t transmit_address =  (dev_id << 1);
 80066ba:	7bfb      	ldrb	r3, [r7, #15]
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	75fb      	strb	r3, [r7, #23]

	uint8_t receive_address	 =  (dev_id << 1) | 1;
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
 80066c2:	005b      	lsls	r3, r3, #1
 80066c4:	b25b      	sxtb	r3, r3
 80066c6:	f043 0301 	orr.w	r3, r3, #1
 80066ca:	b25b      	sxtb	r3, r3
 80066cc:	75bb      	strb	r3, [r7, #22]

	if (HAL_I2C_Master_Transmit(i2c_handle, transmit_address, tx_buffer, MICS_TX_BUFFER_SIZE,  I2C_TIMEOUT) == HAL_OK)
 80066ce:	7dfb      	ldrb	r3, [r7, #23]
 80066d0:	b299      	uxth	r1, r3
 80066d2:	f107 0210 	add.w	r2, r7, #16
 80066d6:	2364      	movs	r3, #100	; 0x64
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	2306      	movs	r3, #6
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f7fa ff07 	bl	80014f0 <HAL_I2C_Master_Transmit>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d110      	bne.n	800670a <mics_I2C_receive+0x72>
	{
		HAL_Delay(100);
 80066e8:	2064      	movs	r0, #100	; 0x64
 80066ea:	f7fa fb15 	bl	8000d18 <HAL_Delay>

		if (HAL_I2C_Master_Receive(i2c_handle,receive_address, rx_data, MICS_RX_BUFFER_SIZE, I2C_TIMEOUT) == HAL_OK)
 80066ee:	7dbb      	ldrb	r3, [r7, #22]
 80066f0:	b299      	uxth	r1, r3
 80066f2:	2364      	movs	r3, #100	; 0x64
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	2307      	movs	r3, #7
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7fa fff6 	bl	80016ec <HAL_I2C_Master_Receive>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <mics_I2C_receive+0x72>
		{
			return true;
 8006706:	2301      	movs	r3, #1
 8006708:	e000      	b.n	800670c <mics_I2C_receive+0x74>
		}
    }
	return false;
 800670a:	2300      	movs	r3, #0
};
 800670c:	4618      	mov	r0, r3
 800670e:	3718      	adds	r7, #24
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <getSensorReading>:
 * 		true  - success
 * 		false - fail
 * @ info Gets the MICS values based on command sent.
 --------------------------------------------------------------------------------------------------------------------*/
uint8_t getSensorReading(mics_commands_t command, interface_selection_t interface)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	4603      	mov	r3, r0
 800671c:	460a      	mov	r2, r1
 800671e:	71fb      	strb	r3, [r7, #7]
 8006720:	4613      	mov	r3, r2
 8006722:	71bb      	strb	r3, [r7, #6]

	uint8_t result =  MICS_COMMAND_FAIL;
 8006724:	2300      	movs	r3, #0
 8006726:	73fb      	strb	r3, [r7, #15]
	uint8_t data[7];

	result = mics_I2C_receive(MICS_PRIAMRY_I2C_ADDRESS, command, data, I2C_arrayss[interface]);
 8006728:	79bb      	ldrb	r3, [r7, #6]
 800672a:	4a14      	ldr	r2, [pc, #80]	; (800677c <getSensorReading+0x68>)
 800672c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006730:	f107 0208 	add.w	r2, r7, #8
 8006734:	79f9      	ldrb	r1, [r7, #7]
 8006736:	2070      	movs	r0, #112	; 0x70
 8006738:	f7ff ffae 	bl	8006698 <mics_I2C_receive>
 800673c:	4603      	mov	r3, r0
 800673e:	73fb      	strb	r3, [r7, #15]

	if (result == MICS_COMMAND_SUCESS)
 8006740:	7bfb      	ldrb	r3, [r7, #15]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d114      	bne.n	8006770 <getSensorReading+0x5c>
	{
		local_sensor_data.voc_value       = data[0];
 8006746:	7a3a      	ldrb	r2, [r7, #8]
 8006748:	4b0d      	ldr	r3, [pc, #52]	; (8006780 <getSensorReading+0x6c>)
 800674a:	701a      	strb	r2, [r3, #0]
		local_sensor_data.co2_level_value = data[1];
 800674c:	7a7a      	ldrb	r2, [r7, #9]
 800674e:	4b0c      	ldr	r3, [pc, #48]	; (8006780 <getSensorReading+0x6c>)
 8006750:	705a      	strb	r2, [r3, #1]
		local_sensor_data.raw_val_msb     = data[2];
 8006752:	7aba      	ldrb	r2, [r7, #10]
 8006754:	4b0a      	ldr	r3, [pc, #40]	; (8006780 <getSensorReading+0x6c>)
 8006756:	709a      	strb	r2, [r3, #2]
		local_sensor_data.raw_value       = data[3];
 8006758:	7afa      	ldrb	r2, [r7, #11]
 800675a:	4b09      	ldr	r3, [pc, #36]	; (8006780 <getSensorReading+0x6c>)
 800675c:	70da      	strb	r2, [r3, #3]
		local_sensor_data.raw_val_lsb     = data[4];
 800675e:	7b3a      	ldrb	r2, [r7, #12]
 8006760:	4b07      	ldr	r3, [pc, #28]	; (8006780 <getSensorReading+0x6c>)
 8006762:	711a      	strb	r2, [r3, #4]
		local_sensor_data.error_value     = data[5];
 8006764:	7b7a      	ldrb	r2, [r7, #13]
 8006766:	4b06      	ldr	r3, [pc, #24]	; (8006780 <getSensorReading+0x6c>)
 8006768:	715a      	strb	r2, [r3, #5]
		local_sensor_data.crc_val         = data[6];
 800676a:	7bba      	ldrb	r2, [r7, #14]
 800676c:	4b04      	ldr	r3, [pc, #16]	; (8006780 <getSensorReading+0x6c>)
 800676e:	719a      	strb	r2, [r3, #6]
	};

	return result;
 8006770:	7bfb      	ldrb	r3, [r7, #15]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	20000018 	.word	0x20000018
 8006780:	20004c48 	.word	0x20004c48
 8006784:	00000000 	.word	0x00000000

08006788 <getSensorReading_co2level>:

// --------------------------------------------------------------------------------------------------------------------
// This function triggers a new value read and get the CO2 value
// --------------------------------------------------------------------------------------------------------------------
unsigned int getSensorReading_co2level (void (*resultPtr), int resultSize, int slot,sensorParamsPtr params)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
 8006794:	603b      	str	r3, [r7, #0]
	uint8_t result = MICS_COMMAND_FAIL;
 8006796:	2300      	movs	r3, #0
 8006798:	75fb      	strb	r3, [r7, #23]
	result = getSensorReading(MICS_VZ_89TE_CMD_GET_SENSOR_VALS, HW_I2C1);
 800679a:	2100      	movs	r1, #0
 800679c:	200c      	movs	r0, #12
 800679e:	f7ff ffb9 	bl	8006714 <getSensorReading>
 80067a2:	4603      	mov	r3, r0
 80067a4:	75fb      	strb	r3, [r7, #23]
	//*((uint32_t *)resultPtr) = local_sensor_data.co2_level_value;
	float co2_ppm = (((float)local_sensor_data.co2_level_value - 13.0) * ((float)1600/(float)229)) + (float)(400);
 80067a6:	4b22      	ldr	r3, [pc, #136]	; (8006830 <getSensorReading_co2level+0xa8>)
 80067a8:	785b      	ldrb	r3, [r3, #1]
 80067aa:	ee07 3a90 	vmov	s15, r3
 80067ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b2:	ee17 0a90 	vmov	r0, s15
 80067b6:	f7f9 fff9 	bl	80007ac <__aeabi_f2d>
 80067ba:	f04f 0200 	mov.w	r2, #0
 80067be:	4b1d      	ldr	r3, [pc, #116]	; (8006834 <getSensorReading_co2level+0xac>)
 80067c0:	f7f9 fe94 	bl	80004ec <__aeabi_dsub>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	4610      	mov	r0, r2
 80067ca:	4619      	mov	r1, r3
 80067cc:	a316      	add	r3, pc, #88	; (adr r3, 8006828 <getSensorReading_co2level+0xa0>)
 80067ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d2:	f7f9 fd5d 	bl	8000290 <__aeabi_dmul>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	4610      	mov	r0, r2
 80067dc:	4619      	mov	r1, r3
 80067de:	f04f 0200 	mov.w	r2, #0
 80067e2:	4b15      	ldr	r3, [pc, #84]	; (8006838 <getSensorReading_co2level+0xb0>)
 80067e4:	f7f9 fe84 	bl	80004f0 <__adddf3>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4610      	mov	r0, r2
 80067ee:	4619      	mov	r1, r3
 80067f0:	f7fa f854 	bl	800089c <__aeabi_d2f>
 80067f4:	4603      	mov	r3, r0
 80067f6:	613b      	str	r3, [r7, #16]
	*((uint32_t *)resultPtr) = (uint32_t) (co2_ppm * 100.00);
 80067f8:	6938      	ldr	r0, [r7, #16]
 80067fa:	f7f9 ffd7 	bl	80007ac <__aeabi_f2d>
 80067fe:	f04f 0200 	mov.w	r2, #0
 8006802:	4b0e      	ldr	r3, [pc, #56]	; (800683c <getSensorReading_co2level+0xb4>)
 8006804:	f7f9 fd44 	bl	8000290 <__aeabi_dmul>
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	4610      	mov	r0, r2
 800680e:	4619      	mov	r1, r3
 8006810:	f7fa f824 	bl	800085c <__aeabi_d2uiz>
 8006814:	4602      	mov	r2, r0
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	601a      	str	r2, [r3, #0]

	return result;
 800681a:	7dfb      	ldrb	r3, [r7, #23]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3718      	adds	r7, #24
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	f3af 8000 	nop.w
 8006828:	c0000000 	.word	0xc0000000
 800682c:	401bf295 	.word	0x401bf295
 8006830:	20004c48 	.word	0x20004c48
 8006834:	402a0000 	.word	0x402a0000
 8006838:	40790000 	.word	0x40790000
 800683c:	40590000 	.word	0x40590000

08006840 <getSensorReadingvoclevel>:

// --------------------------------------------------------------------------------------------------------------------
// This function triggers a new value read and get the VOC value
// --------------------------------------------------------------------------------------------------------------------
unsigned int getSensorReadingvoclevel (void (*resultPtr), int resultSize, int slot,sensorParamsPtr params)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
 800684c:	603b      	str	r3, [r7, #0]
	uint8_t result = MICS_COMMAND_FAIL;
 800684e:	2300      	movs	r3, #0
 8006850:	75fb      	strb	r3, [r7, #23]
	float voc_ppm = ((float)local_sensor_data.voc_value - 13.0) * ((float)1000/(float)229);
 8006852:	4b1d      	ldr	r3, [pc, #116]	; (80068c8 <getSensorReadingvoclevel+0x88>)
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	ee07 3a90 	vmov	s15, r3
 800685a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800685e:	ee17 0a90 	vmov	r0, s15
 8006862:	f7f9 ffa3 	bl	80007ac <__aeabi_f2d>
 8006866:	f04f 0200 	mov.w	r2, #0
 800686a:	4b18      	ldr	r3, [pc, #96]	; (80068cc <getSensorReadingvoclevel+0x8c>)
 800686c:	f7f9 fe3e 	bl	80004ec <__aeabi_dsub>
 8006870:	4602      	mov	r2, r0
 8006872:	460b      	mov	r3, r1
 8006874:	4610      	mov	r0, r2
 8006876:	4619      	mov	r1, r3
 8006878:	a311      	add	r3, pc, #68	; (adr r3, 80068c0 <getSensorReadingvoclevel+0x80>)
 800687a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687e:	f7f9 fd07 	bl	8000290 <__aeabi_dmul>
 8006882:	4602      	mov	r2, r0
 8006884:	460b      	mov	r3, r1
 8006886:	4610      	mov	r0, r2
 8006888:	4619      	mov	r1, r3
 800688a:	f7fa f807 	bl	800089c <__aeabi_d2f>
 800688e:	4603      	mov	r3, r0
 8006890:	613b      	str	r3, [r7, #16]
	*((uint32_t *)resultPtr) = (uint32_t) (voc_ppm * 100.0);
 8006892:	6938      	ldr	r0, [r7, #16]
 8006894:	f7f9 ff8a 	bl	80007ac <__aeabi_f2d>
 8006898:	f04f 0200 	mov.w	r2, #0
 800689c:	4b0c      	ldr	r3, [pc, #48]	; (80068d0 <getSensorReadingvoclevel+0x90>)
 800689e:	f7f9 fcf7 	bl	8000290 <__aeabi_dmul>
 80068a2:	4602      	mov	r2, r0
 80068a4:	460b      	mov	r3, r1
 80068a6:	4610      	mov	r0, r2
 80068a8:	4619      	mov	r1, r3
 80068aa:	f7f9 ffd7 	bl	800085c <__aeabi_d2uiz>
 80068ae:	4602      	mov	r2, r0
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	601a      	str	r2, [r3, #0]
	return result;
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3718      	adds	r7, #24
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	a0000000 	.word	0xa0000000
 80068c4:	4011779d 	.word	0x4011779d
 80068c8:	20004c48 	.word	0x20004c48
 80068cc:	402a0000 	.word	0x402a0000
 80068d0:	40590000 	.word	0x40590000

080068d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80068d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800690c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80068d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80068da:	e003      	b.n	80068e4 <LoopCopyDataInit>

080068dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80068dc:	4b0c      	ldr	r3, [pc, #48]	; (8006910 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80068de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80068e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80068e2:	3104      	adds	r1, #4

080068e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80068e4:	480b      	ldr	r0, [pc, #44]	; (8006914 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80068e6:	4b0c      	ldr	r3, [pc, #48]	; (8006918 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80068e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80068ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80068ec:	d3f6      	bcc.n	80068dc <CopyDataInit>
  ldr  r2, =_sbss
 80068ee:	4a0b      	ldr	r2, [pc, #44]	; (800691c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80068f0:	e002      	b.n	80068f8 <LoopFillZerobss>

080068f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80068f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80068f4:	f842 3b04 	str.w	r3, [r2], #4

080068f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80068f8:	4b09      	ldr	r3, [pc, #36]	; (8006920 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80068fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80068fc:	d3f9      	bcc.n	80068f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80068fe:	f7ff fe95 	bl	800662c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006902:	f000 f817 	bl	8006934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006906:	f7ff f9cb 	bl	8005ca0 <main>
  bx  lr    
 800690a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800690c:	20017fff 	.word	0x20017fff
  ldr  r3, =_sidata
 8006910:	0800731c 	.word	0x0800731c
  ldr  r0, =_sdata
 8006914:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006918:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 800691c:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8006920:	20004c60 	.word	0x20004c60

08006924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006924:	e7fe      	b.n	8006924 <ADC_IRQHandler>
	...

08006928 <__errno>:
 8006928:	4b01      	ldr	r3, [pc, #4]	; (8006930 <__errno+0x8>)
 800692a:	6818      	ldr	r0, [r3, #0]
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	2000001c 	.word	0x2000001c

08006934 <__libc_init_array>:
 8006934:	b570      	push	{r4, r5, r6, lr}
 8006936:	4d0d      	ldr	r5, [pc, #52]	; (800696c <__libc_init_array+0x38>)
 8006938:	4c0d      	ldr	r4, [pc, #52]	; (8006970 <__libc_init_array+0x3c>)
 800693a:	1b64      	subs	r4, r4, r5
 800693c:	10a4      	asrs	r4, r4, #2
 800693e:	2600      	movs	r6, #0
 8006940:	42a6      	cmp	r6, r4
 8006942:	d109      	bne.n	8006958 <__libc_init_array+0x24>
 8006944:	4d0b      	ldr	r5, [pc, #44]	; (8006974 <__libc_init_array+0x40>)
 8006946:	4c0c      	ldr	r4, [pc, #48]	; (8006978 <__libc_init_array+0x44>)
 8006948:	f000 fc62 	bl	8007210 <_init>
 800694c:	1b64      	subs	r4, r4, r5
 800694e:	10a4      	asrs	r4, r4, #2
 8006950:	2600      	movs	r6, #0
 8006952:	42a6      	cmp	r6, r4
 8006954:	d105      	bne.n	8006962 <__libc_init_array+0x2e>
 8006956:	bd70      	pop	{r4, r5, r6, pc}
 8006958:	f855 3b04 	ldr.w	r3, [r5], #4
 800695c:	4798      	blx	r3
 800695e:	3601      	adds	r6, #1
 8006960:	e7ee      	b.n	8006940 <__libc_init_array+0xc>
 8006962:	f855 3b04 	ldr.w	r3, [r5], #4
 8006966:	4798      	blx	r3
 8006968:	3601      	adds	r6, #1
 800696a:	e7f2      	b.n	8006952 <__libc_init_array+0x1e>
 800696c:	08007314 	.word	0x08007314
 8006970:	08007314 	.word	0x08007314
 8006974:	08007314 	.word	0x08007314
 8006978:	08007318 	.word	0x08007318

0800697c <memcpy>:
 800697c:	440a      	add	r2, r1
 800697e:	4291      	cmp	r1, r2
 8006980:	f100 33ff 	add.w	r3, r0, #4294967295
 8006984:	d100      	bne.n	8006988 <memcpy+0xc>
 8006986:	4770      	bx	lr
 8006988:	b510      	push	{r4, lr}
 800698a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800698e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006992:	4291      	cmp	r1, r2
 8006994:	d1f9      	bne.n	800698a <memcpy+0xe>
 8006996:	bd10      	pop	{r4, pc}

08006998 <memset>:
 8006998:	4402      	add	r2, r0
 800699a:	4603      	mov	r3, r0
 800699c:	4293      	cmp	r3, r2
 800699e:	d100      	bne.n	80069a2 <memset+0xa>
 80069a0:	4770      	bx	lr
 80069a2:	f803 1b01 	strb.w	r1, [r3], #1
 80069a6:	e7f9      	b.n	800699c <memset+0x4>

080069a8 <sniprintf>:
 80069a8:	b40c      	push	{r2, r3}
 80069aa:	b530      	push	{r4, r5, lr}
 80069ac:	4b17      	ldr	r3, [pc, #92]	; (8006a0c <sniprintf+0x64>)
 80069ae:	1e0c      	subs	r4, r1, #0
 80069b0:	681d      	ldr	r5, [r3, #0]
 80069b2:	b09d      	sub	sp, #116	; 0x74
 80069b4:	da08      	bge.n	80069c8 <sniprintf+0x20>
 80069b6:	238b      	movs	r3, #139	; 0x8b
 80069b8:	602b      	str	r3, [r5, #0]
 80069ba:	f04f 30ff 	mov.w	r0, #4294967295
 80069be:	b01d      	add	sp, #116	; 0x74
 80069c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069c4:	b002      	add	sp, #8
 80069c6:	4770      	bx	lr
 80069c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80069cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80069d0:	bf14      	ite	ne
 80069d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80069d6:	4623      	moveq	r3, r4
 80069d8:	9304      	str	r3, [sp, #16]
 80069da:	9307      	str	r3, [sp, #28]
 80069dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069e0:	9002      	str	r0, [sp, #8]
 80069e2:	9006      	str	r0, [sp, #24]
 80069e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80069e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80069ea:	ab21      	add	r3, sp, #132	; 0x84
 80069ec:	a902      	add	r1, sp, #8
 80069ee:	4628      	mov	r0, r5
 80069f0:	9301      	str	r3, [sp, #4]
 80069f2:	f000 f869 	bl	8006ac8 <_svfiprintf_r>
 80069f6:	1c43      	adds	r3, r0, #1
 80069f8:	bfbc      	itt	lt
 80069fa:	238b      	movlt	r3, #139	; 0x8b
 80069fc:	602b      	strlt	r3, [r5, #0]
 80069fe:	2c00      	cmp	r4, #0
 8006a00:	d0dd      	beq.n	80069be <sniprintf+0x16>
 8006a02:	9b02      	ldr	r3, [sp, #8]
 8006a04:	2200      	movs	r2, #0
 8006a06:	701a      	strb	r2, [r3, #0]
 8006a08:	e7d9      	b.n	80069be <sniprintf+0x16>
 8006a0a:	bf00      	nop
 8006a0c:	2000001c 	.word	0x2000001c

08006a10 <__ssputs_r>:
 8006a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a14:	688e      	ldr	r6, [r1, #8]
 8006a16:	429e      	cmp	r6, r3
 8006a18:	4682      	mov	sl, r0
 8006a1a:	460c      	mov	r4, r1
 8006a1c:	4690      	mov	r8, r2
 8006a1e:	461f      	mov	r7, r3
 8006a20:	d838      	bhi.n	8006a94 <__ssputs_r+0x84>
 8006a22:	898a      	ldrh	r2, [r1, #12]
 8006a24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a28:	d032      	beq.n	8006a90 <__ssputs_r+0x80>
 8006a2a:	6825      	ldr	r5, [r4, #0]
 8006a2c:	6909      	ldr	r1, [r1, #16]
 8006a2e:	eba5 0901 	sub.w	r9, r5, r1
 8006a32:	6965      	ldr	r5, [r4, #20]
 8006a34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	444b      	add	r3, r9
 8006a40:	106d      	asrs	r5, r5, #1
 8006a42:	429d      	cmp	r5, r3
 8006a44:	bf38      	it	cc
 8006a46:	461d      	movcc	r5, r3
 8006a48:	0553      	lsls	r3, r2, #21
 8006a4a:	d531      	bpl.n	8006ab0 <__ssputs_r+0xa0>
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	f000 fb39 	bl	80070c4 <_malloc_r>
 8006a52:	4606      	mov	r6, r0
 8006a54:	b950      	cbnz	r0, 8006a6c <__ssputs_r+0x5c>
 8006a56:	230c      	movs	r3, #12
 8006a58:	f8ca 3000 	str.w	r3, [sl]
 8006a5c:	89a3      	ldrh	r3, [r4, #12]
 8006a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a62:	81a3      	strh	r3, [r4, #12]
 8006a64:	f04f 30ff 	mov.w	r0, #4294967295
 8006a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a6c:	6921      	ldr	r1, [r4, #16]
 8006a6e:	464a      	mov	r2, r9
 8006a70:	f7ff ff84 	bl	800697c <memcpy>
 8006a74:	89a3      	ldrh	r3, [r4, #12]
 8006a76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a7e:	81a3      	strh	r3, [r4, #12]
 8006a80:	6126      	str	r6, [r4, #16]
 8006a82:	6165      	str	r5, [r4, #20]
 8006a84:	444e      	add	r6, r9
 8006a86:	eba5 0509 	sub.w	r5, r5, r9
 8006a8a:	6026      	str	r6, [r4, #0]
 8006a8c:	60a5      	str	r5, [r4, #8]
 8006a8e:	463e      	mov	r6, r7
 8006a90:	42be      	cmp	r6, r7
 8006a92:	d900      	bls.n	8006a96 <__ssputs_r+0x86>
 8006a94:	463e      	mov	r6, r7
 8006a96:	4632      	mov	r2, r6
 8006a98:	6820      	ldr	r0, [r4, #0]
 8006a9a:	4641      	mov	r1, r8
 8006a9c:	f000 faa8 	bl	8006ff0 <memmove>
 8006aa0:	68a3      	ldr	r3, [r4, #8]
 8006aa2:	6822      	ldr	r2, [r4, #0]
 8006aa4:	1b9b      	subs	r3, r3, r6
 8006aa6:	4432      	add	r2, r6
 8006aa8:	60a3      	str	r3, [r4, #8]
 8006aaa:	6022      	str	r2, [r4, #0]
 8006aac:	2000      	movs	r0, #0
 8006aae:	e7db      	b.n	8006a68 <__ssputs_r+0x58>
 8006ab0:	462a      	mov	r2, r5
 8006ab2:	f000 fb61 	bl	8007178 <_realloc_r>
 8006ab6:	4606      	mov	r6, r0
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d1e1      	bne.n	8006a80 <__ssputs_r+0x70>
 8006abc:	6921      	ldr	r1, [r4, #16]
 8006abe:	4650      	mov	r0, sl
 8006ac0:	f000 fab0 	bl	8007024 <_free_r>
 8006ac4:	e7c7      	b.n	8006a56 <__ssputs_r+0x46>
	...

08006ac8 <_svfiprintf_r>:
 8006ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006acc:	4698      	mov	r8, r3
 8006ace:	898b      	ldrh	r3, [r1, #12]
 8006ad0:	061b      	lsls	r3, r3, #24
 8006ad2:	b09d      	sub	sp, #116	; 0x74
 8006ad4:	4607      	mov	r7, r0
 8006ad6:	460d      	mov	r5, r1
 8006ad8:	4614      	mov	r4, r2
 8006ada:	d50e      	bpl.n	8006afa <_svfiprintf_r+0x32>
 8006adc:	690b      	ldr	r3, [r1, #16]
 8006ade:	b963      	cbnz	r3, 8006afa <_svfiprintf_r+0x32>
 8006ae0:	2140      	movs	r1, #64	; 0x40
 8006ae2:	f000 faef 	bl	80070c4 <_malloc_r>
 8006ae6:	6028      	str	r0, [r5, #0]
 8006ae8:	6128      	str	r0, [r5, #16]
 8006aea:	b920      	cbnz	r0, 8006af6 <_svfiprintf_r+0x2e>
 8006aec:	230c      	movs	r3, #12
 8006aee:	603b      	str	r3, [r7, #0]
 8006af0:	f04f 30ff 	mov.w	r0, #4294967295
 8006af4:	e0d1      	b.n	8006c9a <_svfiprintf_r+0x1d2>
 8006af6:	2340      	movs	r3, #64	; 0x40
 8006af8:	616b      	str	r3, [r5, #20]
 8006afa:	2300      	movs	r3, #0
 8006afc:	9309      	str	r3, [sp, #36]	; 0x24
 8006afe:	2320      	movs	r3, #32
 8006b00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b04:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b08:	2330      	movs	r3, #48	; 0x30
 8006b0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006cb4 <_svfiprintf_r+0x1ec>
 8006b0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b12:	f04f 0901 	mov.w	r9, #1
 8006b16:	4623      	mov	r3, r4
 8006b18:	469a      	mov	sl, r3
 8006b1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b1e:	b10a      	cbz	r2, 8006b24 <_svfiprintf_r+0x5c>
 8006b20:	2a25      	cmp	r2, #37	; 0x25
 8006b22:	d1f9      	bne.n	8006b18 <_svfiprintf_r+0x50>
 8006b24:	ebba 0b04 	subs.w	fp, sl, r4
 8006b28:	d00b      	beq.n	8006b42 <_svfiprintf_r+0x7a>
 8006b2a:	465b      	mov	r3, fp
 8006b2c:	4622      	mov	r2, r4
 8006b2e:	4629      	mov	r1, r5
 8006b30:	4638      	mov	r0, r7
 8006b32:	f7ff ff6d 	bl	8006a10 <__ssputs_r>
 8006b36:	3001      	adds	r0, #1
 8006b38:	f000 80aa 	beq.w	8006c90 <_svfiprintf_r+0x1c8>
 8006b3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b3e:	445a      	add	r2, fp
 8006b40:	9209      	str	r2, [sp, #36]	; 0x24
 8006b42:	f89a 3000 	ldrb.w	r3, [sl]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 80a2 	beq.w	8006c90 <_svfiprintf_r+0x1c8>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b56:	f10a 0a01 	add.w	sl, sl, #1
 8006b5a:	9304      	str	r3, [sp, #16]
 8006b5c:	9307      	str	r3, [sp, #28]
 8006b5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b62:	931a      	str	r3, [sp, #104]	; 0x68
 8006b64:	4654      	mov	r4, sl
 8006b66:	2205      	movs	r2, #5
 8006b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b6c:	4851      	ldr	r0, [pc, #324]	; (8006cb4 <_svfiprintf_r+0x1ec>)
 8006b6e:	f7f9 fb3f 	bl	80001f0 <memchr>
 8006b72:	9a04      	ldr	r2, [sp, #16]
 8006b74:	b9d8      	cbnz	r0, 8006bae <_svfiprintf_r+0xe6>
 8006b76:	06d0      	lsls	r0, r2, #27
 8006b78:	bf44      	itt	mi
 8006b7a:	2320      	movmi	r3, #32
 8006b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b80:	0711      	lsls	r1, r2, #28
 8006b82:	bf44      	itt	mi
 8006b84:	232b      	movmi	r3, #43	; 0x2b
 8006b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8006b90:	d015      	beq.n	8006bbe <_svfiprintf_r+0xf6>
 8006b92:	9a07      	ldr	r2, [sp, #28]
 8006b94:	4654      	mov	r4, sl
 8006b96:	2000      	movs	r0, #0
 8006b98:	f04f 0c0a 	mov.w	ip, #10
 8006b9c:	4621      	mov	r1, r4
 8006b9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ba2:	3b30      	subs	r3, #48	; 0x30
 8006ba4:	2b09      	cmp	r3, #9
 8006ba6:	d94e      	bls.n	8006c46 <_svfiprintf_r+0x17e>
 8006ba8:	b1b0      	cbz	r0, 8006bd8 <_svfiprintf_r+0x110>
 8006baa:	9207      	str	r2, [sp, #28]
 8006bac:	e014      	b.n	8006bd8 <_svfiprintf_r+0x110>
 8006bae:	eba0 0308 	sub.w	r3, r0, r8
 8006bb2:	fa09 f303 	lsl.w	r3, r9, r3
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	9304      	str	r3, [sp, #16]
 8006bba:	46a2      	mov	sl, r4
 8006bbc:	e7d2      	b.n	8006b64 <_svfiprintf_r+0x9c>
 8006bbe:	9b03      	ldr	r3, [sp, #12]
 8006bc0:	1d19      	adds	r1, r3, #4
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	9103      	str	r1, [sp, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	bfbb      	ittet	lt
 8006bca:	425b      	neglt	r3, r3
 8006bcc:	f042 0202 	orrlt.w	r2, r2, #2
 8006bd0:	9307      	strge	r3, [sp, #28]
 8006bd2:	9307      	strlt	r3, [sp, #28]
 8006bd4:	bfb8      	it	lt
 8006bd6:	9204      	strlt	r2, [sp, #16]
 8006bd8:	7823      	ldrb	r3, [r4, #0]
 8006bda:	2b2e      	cmp	r3, #46	; 0x2e
 8006bdc:	d10c      	bne.n	8006bf8 <_svfiprintf_r+0x130>
 8006bde:	7863      	ldrb	r3, [r4, #1]
 8006be0:	2b2a      	cmp	r3, #42	; 0x2a
 8006be2:	d135      	bne.n	8006c50 <_svfiprintf_r+0x188>
 8006be4:	9b03      	ldr	r3, [sp, #12]
 8006be6:	1d1a      	adds	r2, r3, #4
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	9203      	str	r2, [sp, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	bfb8      	it	lt
 8006bf0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bf4:	3402      	adds	r4, #2
 8006bf6:	9305      	str	r3, [sp, #20]
 8006bf8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006cc4 <_svfiprintf_r+0x1fc>
 8006bfc:	7821      	ldrb	r1, [r4, #0]
 8006bfe:	2203      	movs	r2, #3
 8006c00:	4650      	mov	r0, sl
 8006c02:	f7f9 faf5 	bl	80001f0 <memchr>
 8006c06:	b140      	cbz	r0, 8006c1a <_svfiprintf_r+0x152>
 8006c08:	2340      	movs	r3, #64	; 0x40
 8006c0a:	eba0 000a 	sub.w	r0, r0, sl
 8006c0e:	fa03 f000 	lsl.w	r0, r3, r0
 8006c12:	9b04      	ldr	r3, [sp, #16]
 8006c14:	4303      	orrs	r3, r0
 8006c16:	3401      	adds	r4, #1
 8006c18:	9304      	str	r3, [sp, #16]
 8006c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c1e:	4826      	ldr	r0, [pc, #152]	; (8006cb8 <_svfiprintf_r+0x1f0>)
 8006c20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c24:	2206      	movs	r2, #6
 8006c26:	f7f9 fae3 	bl	80001f0 <memchr>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d038      	beq.n	8006ca0 <_svfiprintf_r+0x1d8>
 8006c2e:	4b23      	ldr	r3, [pc, #140]	; (8006cbc <_svfiprintf_r+0x1f4>)
 8006c30:	bb1b      	cbnz	r3, 8006c7a <_svfiprintf_r+0x1b2>
 8006c32:	9b03      	ldr	r3, [sp, #12]
 8006c34:	3307      	adds	r3, #7
 8006c36:	f023 0307 	bic.w	r3, r3, #7
 8006c3a:	3308      	adds	r3, #8
 8006c3c:	9303      	str	r3, [sp, #12]
 8006c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c40:	4433      	add	r3, r6
 8006c42:	9309      	str	r3, [sp, #36]	; 0x24
 8006c44:	e767      	b.n	8006b16 <_svfiprintf_r+0x4e>
 8006c46:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	2001      	movs	r0, #1
 8006c4e:	e7a5      	b.n	8006b9c <_svfiprintf_r+0xd4>
 8006c50:	2300      	movs	r3, #0
 8006c52:	3401      	adds	r4, #1
 8006c54:	9305      	str	r3, [sp, #20]
 8006c56:	4619      	mov	r1, r3
 8006c58:	f04f 0c0a 	mov.w	ip, #10
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c62:	3a30      	subs	r2, #48	; 0x30
 8006c64:	2a09      	cmp	r2, #9
 8006c66:	d903      	bls.n	8006c70 <_svfiprintf_r+0x1a8>
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0c5      	beq.n	8006bf8 <_svfiprintf_r+0x130>
 8006c6c:	9105      	str	r1, [sp, #20]
 8006c6e:	e7c3      	b.n	8006bf8 <_svfiprintf_r+0x130>
 8006c70:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c74:	4604      	mov	r4, r0
 8006c76:	2301      	movs	r3, #1
 8006c78:	e7f0      	b.n	8006c5c <_svfiprintf_r+0x194>
 8006c7a:	ab03      	add	r3, sp, #12
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	462a      	mov	r2, r5
 8006c80:	4b0f      	ldr	r3, [pc, #60]	; (8006cc0 <_svfiprintf_r+0x1f8>)
 8006c82:	a904      	add	r1, sp, #16
 8006c84:	4638      	mov	r0, r7
 8006c86:	f3af 8000 	nop.w
 8006c8a:	1c42      	adds	r2, r0, #1
 8006c8c:	4606      	mov	r6, r0
 8006c8e:	d1d6      	bne.n	8006c3e <_svfiprintf_r+0x176>
 8006c90:	89ab      	ldrh	r3, [r5, #12]
 8006c92:	065b      	lsls	r3, r3, #25
 8006c94:	f53f af2c 	bmi.w	8006af0 <_svfiprintf_r+0x28>
 8006c98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c9a:	b01d      	add	sp, #116	; 0x74
 8006c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca0:	ab03      	add	r3, sp, #12
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	462a      	mov	r2, r5
 8006ca6:	4b06      	ldr	r3, [pc, #24]	; (8006cc0 <_svfiprintf_r+0x1f8>)
 8006ca8:	a904      	add	r1, sp, #16
 8006caa:	4638      	mov	r0, r7
 8006cac:	f000 f87a 	bl	8006da4 <_printf_i>
 8006cb0:	e7eb      	b.n	8006c8a <_svfiprintf_r+0x1c2>
 8006cb2:	bf00      	nop
 8006cb4:	080072d8 	.word	0x080072d8
 8006cb8:	080072e2 	.word	0x080072e2
 8006cbc:	00000000 	.word	0x00000000
 8006cc0:	08006a11 	.word	0x08006a11
 8006cc4:	080072de 	.word	0x080072de

08006cc8 <_printf_common>:
 8006cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ccc:	4616      	mov	r6, r2
 8006cce:	4699      	mov	r9, r3
 8006cd0:	688a      	ldr	r2, [r1, #8]
 8006cd2:	690b      	ldr	r3, [r1, #16]
 8006cd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	bfb8      	it	lt
 8006cdc:	4613      	movlt	r3, r2
 8006cde:	6033      	str	r3, [r6, #0]
 8006ce0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ce4:	4607      	mov	r7, r0
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	b10a      	cbz	r2, 8006cee <_printf_common+0x26>
 8006cea:	3301      	adds	r3, #1
 8006cec:	6033      	str	r3, [r6, #0]
 8006cee:	6823      	ldr	r3, [r4, #0]
 8006cf0:	0699      	lsls	r1, r3, #26
 8006cf2:	bf42      	ittt	mi
 8006cf4:	6833      	ldrmi	r3, [r6, #0]
 8006cf6:	3302      	addmi	r3, #2
 8006cf8:	6033      	strmi	r3, [r6, #0]
 8006cfa:	6825      	ldr	r5, [r4, #0]
 8006cfc:	f015 0506 	ands.w	r5, r5, #6
 8006d00:	d106      	bne.n	8006d10 <_printf_common+0x48>
 8006d02:	f104 0a19 	add.w	sl, r4, #25
 8006d06:	68e3      	ldr	r3, [r4, #12]
 8006d08:	6832      	ldr	r2, [r6, #0]
 8006d0a:	1a9b      	subs	r3, r3, r2
 8006d0c:	42ab      	cmp	r3, r5
 8006d0e:	dc26      	bgt.n	8006d5e <_printf_common+0x96>
 8006d10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d14:	1e13      	subs	r3, r2, #0
 8006d16:	6822      	ldr	r2, [r4, #0]
 8006d18:	bf18      	it	ne
 8006d1a:	2301      	movne	r3, #1
 8006d1c:	0692      	lsls	r2, r2, #26
 8006d1e:	d42b      	bmi.n	8006d78 <_printf_common+0xb0>
 8006d20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d24:	4649      	mov	r1, r9
 8006d26:	4638      	mov	r0, r7
 8006d28:	47c0      	blx	r8
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	d01e      	beq.n	8006d6c <_printf_common+0xa4>
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	68e5      	ldr	r5, [r4, #12]
 8006d32:	6832      	ldr	r2, [r6, #0]
 8006d34:	f003 0306 	and.w	r3, r3, #6
 8006d38:	2b04      	cmp	r3, #4
 8006d3a:	bf08      	it	eq
 8006d3c:	1aad      	subeq	r5, r5, r2
 8006d3e:	68a3      	ldr	r3, [r4, #8]
 8006d40:	6922      	ldr	r2, [r4, #16]
 8006d42:	bf0c      	ite	eq
 8006d44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d48:	2500      	movne	r5, #0
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	bfc4      	itt	gt
 8006d4e:	1a9b      	subgt	r3, r3, r2
 8006d50:	18ed      	addgt	r5, r5, r3
 8006d52:	2600      	movs	r6, #0
 8006d54:	341a      	adds	r4, #26
 8006d56:	42b5      	cmp	r5, r6
 8006d58:	d11a      	bne.n	8006d90 <_printf_common+0xc8>
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	e008      	b.n	8006d70 <_printf_common+0xa8>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	4652      	mov	r2, sl
 8006d62:	4649      	mov	r1, r9
 8006d64:	4638      	mov	r0, r7
 8006d66:	47c0      	blx	r8
 8006d68:	3001      	adds	r0, #1
 8006d6a:	d103      	bne.n	8006d74 <_printf_common+0xac>
 8006d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d74:	3501      	adds	r5, #1
 8006d76:	e7c6      	b.n	8006d06 <_printf_common+0x3e>
 8006d78:	18e1      	adds	r1, r4, r3
 8006d7a:	1c5a      	adds	r2, r3, #1
 8006d7c:	2030      	movs	r0, #48	; 0x30
 8006d7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d82:	4422      	add	r2, r4
 8006d84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d8c:	3302      	adds	r3, #2
 8006d8e:	e7c7      	b.n	8006d20 <_printf_common+0x58>
 8006d90:	2301      	movs	r3, #1
 8006d92:	4622      	mov	r2, r4
 8006d94:	4649      	mov	r1, r9
 8006d96:	4638      	mov	r0, r7
 8006d98:	47c0      	blx	r8
 8006d9a:	3001      	adds	r0, #1
 8006d9c:	d0e6      	beq.n	8006d6c <_printf_common+0xa4>
 8006d9e:	3601      	adds	r6, #1
 8006da0:	e7d9      	b.n	8006d56 <_printf_common+0x8e>
	...

08006da4 <_printf_i>:
 8006da4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006da8:	460c      	mov	r4, r1
 8006daa:	4691      	mov	r9, r2
 8006dac:	7e27      	ldrb	r7, [r4, #24]
 8006dae:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006db0:	2f78      	cmp	r7, #120	; 0x78
 8006db2:	4680      	mov	r8, r0
 8006db4:	469a      	mov	sl, r3
 8006db6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006dba:	d807      	bhi.n	8006dcc <_printf_i+0x28>
 8006dbc:	2f62      	cmp	r7, #98	; 0x62
 8006dbe:	d80a      	bhi.n	8006dd6 <_printf_i+0x32>
 8006dc0:	2f00      	cmp	r7, #0
 8006dc2:	f000 80d8 	beq.w	8006f76 <_printf_i+0x1d2>
 8006dc6:	2f58      	cmp	r7, #88	; 0x58
 8006dc8:	f000 80a3 	beq.w	8006f12 <_printf_i+0x16e>
 8006dcc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006dd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006dd4:	e03a      	b.n	8006e4c <_printf_i+0xa8>
 8006dd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dda:	2b15      	cmp	r3, #21
 8006ddc:	d8f6      	bhi.n	8006dcc <_printf_i+0x28>
 8006dde:	a001      	add	r0, pc, #4	; (adr r0, 8006de4 <_printf_i+0x40>)
 8006de0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006de4:	08006e3d 	.word	0x08006e3d
 8006de8:	08006e51 	.word	0x08006e51
 8006dec:	08006dcd 	.word	0x08006dcd
 8006df0:	08006dcd 	.word	0x08006dcd
 8006df4:	08006dcd 	.word	0x08006dcd
 8006df8:	08006dcd 	.word	0x08006dcd
 8006dfc:	08006e51 	.word	0x08006e51
 8006e00:	08006dcd 	.word	0x08006dcd
 8006e04:	08006dcd 	.word	0x08006dcd
 8006e08:	08006dcd 	.word	0x08006dcd
 8006e0c:	08006dcd 	.word	0x08006dcd
 8006e10:	08006f5d 	.word	0x08006f5d
 8006e14:	08006e81 	.word	0x08006e81
 8006e18:	08006f3f 	.word	0x08006f3f
 8006e1c:	08006dcd 	.word	0x08006dcd
 8006e20:	08006dcd 	.word	0x08006dcd
 8006e24:	08006f7f 	.word	0x08006f7f
 8006e28:	08006dcd 	.word	0x08006dcd
 8006e2c:	08006e81 	.word	0x08006e81
 8006e30:	08006dcd 	.word	0x08006dcd
 8006e34:	08006dcd 	.word	0x08006dcd
 8006e38:	08006f47 	.word	0x08006f47
 8006e3c:	680b      	ldr	r3, [r1, #0]
 8006e3e:	1d1a      	adds	r2, r3, #4
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	600a      	str	r2, [r1, #0]
 8006e44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e0a3      	b.n	8006f98 <_printf_i+0x1f4>
 8006e50:	6825      	ldr	r5, [r4, #0]
 8006e52:	6808      	ldr	r0, [r1, #0]
 8006e54:	062e      	lsls	r6, r5, #24
 8006e56:	f100 0304 	add.w	r3, r0, #4
 8006e5a:	d50a      	bpl.n	8006e72 <_printf_i+0xce>
 8006e5c:	6805      	ldr	r5, [r0, #0]
 8006e5e:	600b      	str	r3, [r1, #0]
 8006e60:	2d00      	cmp	r5, #0
 8006e62:	da03      	bge.n	8006e6c <_printf_i+0xc8>
 8006e64:	232d      	movs	r3, #45	; 0x2d
 8006e66:	426d      	negs	r5, r5
 8006e68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e6c:	485e      	ldr	r0, [pc, #376]	; (8006fe8 <_printf_i+0x244>)
 8006e6e:	230a      	movs	r3, #10
 8006e70:	e019      	b.n	8006ea6 <_printf_i+0x102>
 8006e72:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006e76:	6805      	ldr	r5, [r0, #0]
 8006e78:	600b      	str	r3, [r1, #0]
 8006e7a:	bf18      	it	ne
 8006e7c:	b22d      	sxthne	r5, r5
 8006e7e:	e7ef      	b.n	8006e60 <_printf_i+0xbc>
 8006e80:	680b      	ldr	r3, [r1, #0]
 8006e82:	6825      	ldr	r5, [r4, #0]
 8006e84:	1d18      	adds	r0, r3, #4
 8006e86:	6008      	str	r0, [r1, #0]
 8006e88:	0628      	lsls	r0, r5, #24
 8006e8a:	d501      	bpl.n	8006e90 <_printf_i+0xec>
 8006e8c:	681d      	ldr	r5, [r3, #0]
 8006e8e:	e002      	b.n	8006e96 <_printf_i+0xf2>
 8006e90:	0669      	lsls	r1, r5, #25
 8006e92:	d5fb      	bpl.n	8006e8c <_printf_i+0xe8>
 8006e94:	881d      	ldrh	r5, [r3, #0]
 8006e96:	4854      	ldr	r0, [pc, #336]	; (8006fe8 <_printf_i+0x244>)
 8006e98:	2f6f      	cmp	r7, #111	; 0x6f
 8006e9a:	bf0c      	ite	eq
 8006e9c:	2308      	moveq	r3, #8
 8006e9e:	230a      	movne	r3, #10
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ea6:	6866      	ldr	r6, [r4, #4]
 8006ea8:	60a6      	str	r6, [r4, #8]
 8006eaa:	2e00      	cmp	r6, #0
 8006eac:	bfa2      	ittt	ge
 8006eae:	6821      	ldrge	r1, [r4, #0]
 8006eb0:	f021 0104 	bicge.w	r1, r1, #4
 8006eb4:	6021      	strge	r1, [r4, #0]
 8006eb6:	b90d      	cbnz	r5, 8006ebc <_printf_i+0x118>
 8006eb8:	2e00      	cmp	r6, #0
 8006eba:	d04d      	beq.n	8006f58 <_printf_i+0x1b4>
 8006ebc:	4616      	mov	r6, r2
 8006ebe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ec2:	fb03 5711 	mls	r7, r3, r1, r5
 8006ec6:	5dc7      	ldrb	r7, [r0, r7]
 8006ec8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ecc:	462f      	mov	r7, r5
 8006ece:	42bb      	cmp	r3, r7
 8006ed0:	460d      	mov	r5, r1
 8006ed2:	d9f4      	bls.n	8006ebe <_printf_i+0x11a>
 8006ed4:	2b08      	cmp	r3, #8
 8006ed6:	d10b      	bne.n	8006ef0 <_printf_i+0x14c>
 8006ed8:	6823      	ldr	r3, [r4, #0]
 8006eda:	07df      	lsls	r7, r3, #31
 8006edc:	d508      	bpl.n	8006ef0 <_printf_i+0x14c>
 8006ede:	6923      	ldr	r3, [r4, #16]
 8006ee0:	6861      	ldr	r1, [r4, #4]
 8006ee2:	4299      	cmp	r1, r3
 8006ee4:	bfde      	ittt	le
 8006ee6:	2330      	movle	r3, #48	; 0x30
 8006ee8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006eec:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ef0:	1b92      	subs	r2, r2, r6
 8006ef2:	6122      	str	r2, [r4, #16]
 8006ef4:	f8cd a000 	str.w	sl, [sp]
 8006ef8:	464b      	mov	r3, r9
 8006efa:	aa03      	add	r2, sp, #12
 8006efc:	4621      	mov	r1, r4
 8006efe:	4640      	mov	r0, r8
 8006f00:	f7ff fee2 	bl	8006cc8 <_printf_common>
 8006f04:	3001      	adds	r0, #1
 8006f06:	d14c      	bne.n	8006fa2 <_printf_i+0x1fe>
 8006f08:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0c:	b004      	add	sp, #16
 8006f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f12:	4835      	ldr	r0, [pc, #212]	; (8006fe8 <_printf_i+0x244>)
 8006f14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	680e      	ldr	r6, [r1, #0]
 8006f1c:	061f      	lsls	r7, r3, #24
 8006f1e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006f22:	600e      	str	r6, [r1, #0]
 8006f24:	d514      	bpl.n	8006f50 <_printf_i+0x1ac>
 8006f26:	07d9      	lsls	r1, r3, #31
 8006f28:	bf44      	itt	mi
 8006f2a:	f043 0320 	orrmi.w	r3, r3, #32
 8006f2e:	6023      	strmi	r3, [r4, #0]
 8006f30:	b91d      	cbnz	r5, 8006f3a <_printf_i+0x196>
 8006f32:	6823      	ldr	r3, [r4, #0]
 8006f34:	f023 0320 	bic.w	r3, r3, #32
 8006f38:	6023      	str	r3, [r4, #0]
 8006f3a:	2310      	movs	r3, #16
 8006f3c:	e7b0      	b.n	8006ea0 <_printf_i+0xfc>
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	f043 0320 	orr.w	r3, r3, #32
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	2378      	movs	r3, #120	; 0x78
 8006f48:	4828      	ldr	r0, [pc, #160]	; (8006fec <_printf_i+0x248>)
 8006f4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f4e:	e7e3      	b.n	8006f18 <_printf_i+0x174>
 8006f50:	065e      	lsls	r6, r3, #25
 8006f52:	bf48      	it	mi
 8006f54:	b2ad      	uxthmi	r5, r5
 8006f56:	e7e6      	b.n	8006f26 <_printf_i+0x182>
 8006f58:	4616      	mov	r6, r2
 8006f5a:	e7bb      	b.n	8006ed4 <_printf_i+0x130>
 8006f5c:	680b      	ldr	r3, [r1, #0]
 8006f5e:	6826      	ldr	r6, [r4, #0]
 8006f60:	6960      	ldr	r0, [r4, #20]
 8006f62:	1d1d      	adds	r5, r3, #4
 8006f64:	600d      	str	r5, [r1, #0]
 8006f66:	0635      	lsls	r5, r6, #24
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	d501      	bpl.n	8006f70 <_printf_i+0x1cc>
 8006f6c:	6018      	str	r0, [r3, #0]
 8006f6e:	e002      	b.n	8006f76 <_printf_i+0x1d2>
 8006f70:	0671      	lsls	r1, r6, #25
 8006f72:	d5fb      	bpl.n	8006f6c <_printf_i+0x1c8>
 8006f74:	8018      	strh	r0, [r3, #0]
 8006f76:	2300      	movs	r3, #0
 8006f78:	6123      	str	r3, [r4, #16]
 8006f7a:	4616      	mov	r6, r2
 8006f7c:	e7ba      	b.n	8006ef4 <_printf_i+0x150>
 8006f7e:	680b      	ldr	r3, [r1, #0]
 8006f80:	1d1a      	adds	r2, r3, #4
 8006f82:	600a      	str	r2, [r1, #0]
 8006f84:	681e      	ldr	r6, [r3, #0]
 8006f86:	6862      	ldr	r2, [r4, #4]
 8006f88:	2100      	movs	r1, #0
 8006f8a:	4630      	mov	r0, r6
 8006f8c:	f7f9 f930 	bl	80001f0 <memchr>
 8006f90:	b108      	cbz	r0, 8006f96 <_printf_i+0x1f2>
 8006f92:	1b80      	subs	r0, r0, r6
 8006f94:	6060      	str	r0, [r4, #4]
 8006f96:	6863      	ldr	r3, [r4, #4]
 8006f98:	6123      	str	r3, [r4, #16]
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fa0:	e7a8      	b.n	8006ef4 <_printf_i+0x150>
 8006fa2:	6923      	ldr	r3, [r4, #16]
 8006fa4:	4632      	mov	r2, r6
 8006fa6:	4649      	mov	r1, r9
 8006fa8:	4640      	mov	r0, r8
 8006faa:	47d0      	blx	sl
 8006fac:	3001      	adds	r0, #1
 8006fae:	d0ab      	beq.n	8006f08 <_printf_i+0x164>
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	079b      	lsls	r3, r3, #30
 8006fb4:	d413      	bmi.n	8006fde <_printf_i+0x23a>
 8006fb6:	68e0      	ldr	r0, [r4, #12]
 8006fb8:	9b03      	ldr	r3, [sp, #12]
 8006fba:	4298      	cmp	r0, r3
 8006fbc:	bfb8      	it	lt
 8006fbe:	4618      	movlt	r0, r3
 8006fc0:	e7a4      	b.n	8006f0c <_printf_i+0x168>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	4632      	mov	r2, r6
 8006fc6:	4649      	mov	r1, r9
 8006fc8:	4640      	mov	r0, r8
 8006fca:	47d0      	blx	sl
 8006fcc:	3001      	adds	r0, #1
 8006fce:	d09b      	beq.n	8006f08 <_printf_i+0x164>
 8006fd0:	3501      	adds	r5, #1
 8006fd2:	68e3      	ldr	r3, [r4, #12]
 8006fd4:	9903      	ldr	r1, [sp, #12]
 8006fd6:	1a5b      	subs	r3, r3, r1
 8006fd8:	42ab      	cmp	r3, r5
 8006fda:	dcf2      	bgt.n	8006fc2 <_printf_i+0x21e>
 8006fdc:	e7eb      	b.n	8006fb6 <_printf_i+0x212>
 8006fde:	2500      	movs	r5, #0
 8006fe0:	f104 0619 	add.w	r6, r4, #25
 8006fe4:	e7f5      	b.n	8006fd2 <_printf_i+0x22e>
 8006fe6:	bf00      	nop
 8006fe8:	080072e9 	.word	0x080072e9
 8006fec:	080072fa 	.word	0x080072fa

08006ff0 <memmove>:
 8006ff0:	4288      	cmp	r0, r1
 8006ff2:	b510      	push	{r4, lr}
 8006ff4:	eb01 0402 	add.w	r4, r1, r2
 8006ff8:	d902      	bls.n	8007000 <memmove+0x10>
 8006ffa:	4284      	cmp	r4, r0
 8006ffc:	4623      	mov	r3, r4
 8006ffe:	d807      	bhi.n	8007010 <memmove+0x20>
 8007000:	1e43      	subs	r3, r0, #1
 8007002:	42a1      	cmp	r1, r4
 8007004:	d008      	beq.n	8007018 <memmove+0x28>
 8007006:	f811 2b01 	ldrb.w	r2, [r1], #1
 800700a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800700e:	e7f8      	b.n	8007002 <memmove+0x12>
 8007010:	4402      	add	r2, r0
 8007012:	4601      	mov	r1, r0
 8007014:	428a      	cmp	r2, r1
 8007016:	d100      	bne.n	800701a <memmove+0x2a>
 8007018:	bd10      	pop	{r4, pc}
 800701a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800701e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007022:	e7f7      	b.n	8007014 <memmove+0x24>

08007024 <_free_r>:
 8007024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007026:	2900      	cmp	r1, #0
 8007028:	d048      	beq.n	80070bc <_free_r+0x98>
 800702a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800702e:	9001      	str	r0, [sp, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	f1a1 0404 	sub.w	r4, r1, #4
 8007036:	bfb8      	it	lt
 8007038:	18e4      	addlt	r4, r4, r3
 800703a:	f000 f8d3 	bl	80071e4 <__malloc_lock>
 800703e:	4a20      	ldr	r2, [pc, #128]	; (80070c0 <_free_r+0x9c>)
 8007040:	9801      	ldr	r0, [sp, #4]
 8007042:	6813      	ldr	r3, [r2, #0]
 8007044:	4615      	mov	r5, r2
 8007046:	b933      	cbnz	r3, 8007056 <_free_r+0x32>
 8007048:	6063      	str	r3, [r4, #4]
 800704a:	6014      	str	r4, [r2, #0]
 800704c:	b003      	add	sp, #12
 800704e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007052:	f000 b8cd 	b.w	80071f0 <__malloc_unlock>
 8007056:	42a3      	cmp	r3, r4
 8007058:	d90b      	bls.n	8007072 <_free_r+0x4e>
 800705a:	6821      	ldr	r1, [r4, #0]
 800705c:	1862      	adds	r2, r4, r1
 800705e:	4293      	cmp	r3, r2
 8007060:	bf04      	itt	eq
 8007062:	681a      	ldreq	r2, [r3, #0]
 8007064:	685b      	ldreq	r3, [r3, #4]
 8007066:	6063      	str	r3, [r4, #4]
 8007068:	bf04      	itt	eq
 800706a:	1852      	addeq	r2, r2, r1
 800706c:	6022      	streq	r2, [r4, #0]
 800706e:	602c      	str	r4, [r5, #0]
 8007070:	e7ec      	b.n	800704c <_free_r+0x28>
 8007072:	461a      	mov	r2, r3
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	b10b      	cbz	r3, 800707c <_free_r+0x58>
 8007078:	42a3      	cmp	r3, r4
 800707a:	d9fa      	bls.n	8007072 <_free_r+0x4e>
 800707c:	6811      	ldr	r1, [r2, #0]
 800707e:	1855      	adds	r5, r2, r1
 8007080:	42a5      	cmp	r5, r4
 8007082:	d10b      	bne.n	800709c <_free_r+0x78>
 8007084:	6824      	ldr	r4, [r4, #0]
 8007086:	4421      	add	r1, r4
 8007088:	1854      	adds	r4, r2, r1
 800708a:	42a3      	cmp	r3, r4
 800708c:	6011      	str	r1, [r2, #0]
 800708e:	d1dd      	bne.n	800704c <_free_r+0x28>
 8007090:	681c      	ldr	r4, [r3, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	6053      	str	r3, [r2, #4]
 8007096:	4421      	add	r1, r4
 8007098:	6011      	str	r1, [r2, #0]
 800709a:	e7d7      	b.n	800704c <_free_r+0x28>
 800709c:	d902      	bls.n	80070a4 <_free_r+0x80>
 800709e:	230c      	movs	r3, #12
 80070a0:	6003      	str	r3, [r0, #0]
 80070a2:	e7d3      	b.n	800704c <_free_r+0x28>
 80070a4:	6825      	ldr	r5, [r4, #0]
 80070a6:	1961      	adds	r1, r4, r5
 80070a8:	428b      	cmp	r3, r1
 80070aa:	bf04      	itt	eq
 80070ac:	6819      	ldreq	r1, [r3, #0]
 80070ae:	685b      	ldreq	r3, [r3, #4]
 80070b0:	6063      	str	r3, [r4, #4]
 80070b2:	bf04      	itt	eq
 80070b4:	1949      	addeq	r1, r1, r5
 80070b6:	6021      	streq	r1, [r4, #0]
 80070b8:	6054      	str	r4, [r2, #4]
 80070ba:	e7c7      	b.n	800704c <_free_r+0x28>
 80070bc:	b003      	add	sp, #12
 80070be:	bd30      	pop	{r4, r5, pc}
 80070c0:	20004a44 	.word	0x20004a44

080070c4 <_malloc_r>:
 80070c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c6:	1ccd      	adds	r5, r1, #3
 80070c8:	f025 0503 	bic.w	r5, r5, #3
 80070cc:	3508      	adds	r5, #8
 80070ce:	2d0c      	cmp	r5, #12
 80070d0:	bf38      	it	cc
 80070d2:	250c      	movcc	r5, #12
 80070d4:	2d00      	cmp	r5, #0
 80070d6:	4606      	mov	r6, r0
 80070d8:	db01      	blt.n	80070de <_malloc_r+0x1a>
 80070da:	42a9      	cmp	r1, r5
 80070dc:	d903      	bls.n	80070e6 <_malloc_r+0x22>
 80070de:	230c      	movs	r3, #12
 80070e0:	6033      	str	r3, [r6, #0]
 80070e2:	2000      	movs	r0, #0
 80070e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070e6:	f000 f87d 	bl	80071e4 <__malloc_lock>
 80070ea:	4921      	ldr	r1, [pc, #132]	; (8007170 <_malloc_r+0xac>)
 80070ec:	680a      	ldr	r2, [r1, #0]
 80070ee:	4614      	mov	r4, r2
 80070f0:	b99c      	cbnz	r4, 800711a <_malloc_r+0x56>
 80070f2:	4f20      	ldr	r7, [pc, #128]	; (8007174 <_malloc_r+0xb0>)
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	b923      	cbnz	r3, 8007102 <_malloc_r+0x3e>
 80070f8:	4621      	mov	r1, r4
 80070fa:	4630      	mov	r0, r6
 80070fc:	f000 f862 	bl	80071c4 <_sbrk_r>
 8007100:	6038      	str	r0, [r7, #0]
 8007102:	4629      	mov	r1, r5
 8007104:	4630      	mov	r0, r6
 8007106:	f000 f85d 	bl	80071c4 <_sbrk_r>
 800710a:	1c43      	adds	r3, r0, #1
 800710c:	d123      	bne.n	8007156 <_malloc_r+0x92>
 800710e:	230c      	movs	r3, #12
 8007110:	6033      	str	r3, [r6, #0]
 8007112:	4630      	mov	r0, r6
 8007114:	f000 f86c 	bl	80071f0 <__malloc_unlock>
 8007118:	e7e3      	b.n	80070e2 <_malloc_r+0x1e>
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	1b5b      	subs	r3, r3, r5
 800711e:	d417      	bmi.n	8007150 <_malloc_r+0x8c>
 8007120:	2b0b      	cmp	r3, #11
 8007122:	d903      	bls.n	800712c <_malloc_r+0x68>
 8007124:	6023      	str	r3, [r4, #0]
 8007126:	441c      	add	r4, r3
 8007128:	6025      	str	r5, [r4, #0]
 800712a:	e004      	b.n	8007136 <_malloc_r+0x72>
 800712c:	6863      	ldr	r3, [r4, #4]
 800712e:	42a2      	cmp	r2, r4
 8007130:	bf0c      	ite	eq
 8007132:	600b      	streq	r3, [r1, #0]
 8007134:	6053      	strne	r3, [r2, #4]
 8007136:	4630      	mov	r0, r6
 8007138:	f000 f85a 	bl	80071f0 <__malloc_unlock>
 800713c:	f104 000b 	add.w	r0, r4, #11
 8007140:	1d23      	adds	r3, r4, #4
 8007142:	f020 0007 	bic.w	r0, r0, #7
 8007146:	1ac2      	subs	r2, r0, r3
 8007148:	d0cc      	beq.n	80070e4 <_malloc_r+0x20>
 800714a:	1a1b      	subs	r3, r3, r0
 800714c:	50a3      	str	r3, [r4, r2]
 800714e:	e7c9      	b.n	80070e4 <_malloc_r+0x20>
 8007150:	4622      	mov	r2, r4
 8007152:	6864      	ldr	r4, [r4, #4]
 8007154:	e7cc      	b.n	80070f0 <_malloc_r+0x2c>
 8007156:	1cc4      	adds	r4, r0, #3
 8007158:	f024 0403 	bic.w	r4, r4, #3
 800715c:	42a0      	cmp	r0, r4
 800715e:	d0e3      	beq.n	8007128 <_malloc_r+0x64>
 8007160:	1a21      	subs	r1, r4, r0
 8007162:	4630      	mov	r0, r6
 8007164:	f000 f82e 	bl	80071c4 <_sbrk_r>
 8007168:	3001      	adds	r0, #1
 800716a:	d1dd      	bne.n	8007128 <_malloc_r+0x64>
 800716c:	e7cf      	b.n	800710e <_malloc_r+0x4a>
 800716e:	bf00      	nop
 8007170:	20004a44 	.word	0x20004a44
 8007174:	20004a48 	.word	0x20004a48

08007178 <_realloc_r>:
 8007178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717a:	4607      	mov	r7, r0
 800717c:	4614      	mov	r4, r2
 800717e:	460e      	mov	r6, r1
 8007180:	b921      	cbnz	r1, 800718c <_realloc_r+0x14>
 8007182:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007186:	4611      	mov	r1, r2
 8007188:	f7ff bf9c 	b.w	80070c4 <_malloc_r>
 800718c:	b922      	cbnz	r2, 8007198 <_realloc_r+0x20>
 800718e:	f7ff ff49 	bl	8007024 <_free_r>
 8007192:	4625      	mov	r5, r4
 8007194:	4628      	mov	r0, r5
 8007196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007198:	f000 f830 	bl	80071fc <_malloc_usable_size_r>
 800719c:	42a0      	cmp	r0, r4
 800719e:	d20f      	bcs.n	80071c0 <_realloc_r+0x48>
 80071a0:	4621      	mov	r1, r4
 80071a2:	4638      	mov	r0, r7
 80071a4:	f7ff ff8e 	bl	80070c4 <_malloc_r>
 80071a8:	4605      	mov	r5, r0
 80071aa:	2800      	cmp	r0, #0
 80071ac:	d0f2      	beq.n	8007194 <_realloc_r+0x1c>
 80071ae:	4631      	mov	r1, r6
 80071b0:	4622      	mov	r2, r4
 80071b2:	f7ff fbe3 	bl	800697c <memcpy>
 80071b6:	4631      	mov	r1, r6
 80071b8:	4638      	mov	r0, r7
 80071ba:	f7ff ff33 	bl	8007024 <_free_r>
 80071be:	e7e9      	b.n	8007194 <_realloc_r+0x1c>
 80071c0:	4635      	mov	r5, r6
 80071c2:	e7e7      	b.n	8007194 <_realloc_r+0x1c>

080071c4 <_sbrk_r>:
 80071c4:	b538      	push	{r3, r4, r5, lr}
 80071c6:	4d06      	ldr	r5, [pc, #24]	; (80071e0 <_sbrk_r+0x1c>)
 80071c8:	2300      	movs	r3, #0
 80071ca:	4604      	mov	r4, r0
 80071cc:	4608      	mov	r0, r1
 80071ce:	602b      	str	r3, [r5, #0]
 80071d0:	f7ff fa00 	bl	80065d4 <_sbrk>
 80071d4:	1c43      	adds	r3, r0, #1
 80071d6:	d102      	bne.n	80071de <_sbrk_r+0x1a>
 80071d8:	682b      	ldr	r3, [r5, #0]
 80071da:	b103      	cbz	r3, 80071de <_sbrk_r+0x1a>
 80071dc:	6023      	str	r3, [r4, #0]
 80071de:	bd38      	pop	{r3, r4, r5, pc}
 80071e0:	20004c50 	.word	0x20004c50

080071e4 <__malloc_lock>:
 80071e4:	4801      	ldr	r0, [pc, #4]	; (80071ec <__malloc_lock+0x8>)
 80071e6:	f000 b811 	b.w	800720c <__retarget_lock_acquire_recursive>
 80071ea:	bf00      	nop
 80071ec:	20004c58 	.word	0x20004c58

080071f0 <__malloc_unlock>:
 80071f0:	4801      	ldr	r0, [pc, #4]	; (80071f8 <__malloc_unlock+0x8>)
 80071f2:	f000 b80c 	b.w	800720e <__retarget_lock_release_recursive>
 80071f6:	bf00      	nop
 80071f8:	20004c58 	.word	0x20004c58

080071fc <_malloc_usable_size_r>:
 80071fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007200:	1f18      	subs	r0, r3, #4
 8007202:	2b00      	cmp	r3, #0
 8007204:	bfbc      	itt	lt
 8007206:	580b      	ldrlt	r3, [r1, r0]
 8007208:	18c0      	addlt	r0, r0, r3
 800720a:	4770      	bx	lr

0800720c <__retarget_lock_acquire_recursive>:
 800720c:	4770      	bx	lr

0800720e <__retarget_lock_release_recursive>:
 800720e:	4770      	bx	lr

08007210 <_init>:
 8007210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007212:	bf00      	nop
 8007214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007216:	bc08      	pop	{r3}
 8007218:	469e      	mov	lr, r3
 800721a:	4770      	bx	lr

0800721c <_fini>:
 800721c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721e:	bf00      	nop
 8007220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007222:	bc08      	pop	{r3}
 8007224:	469e      	mov	lr, r3
 8007226:	4770      	bx	lr
