/*
 * bm680_helper.c
 *
 *  Created on: Apr. 6, 2021
 *      Author: hgopalsing
 */
#include "bme680.h"
#include "bme680_defs.h"
#include "bme680_helper.h"
#include "stm32f4xx_hal.h"
#include "../sensor_interface.h"
#include "main.h"


static struct bme680_field_data data;


void user_delay_ms(uint32_t period)
{
	HAL_Delay(period);
}


int8_t user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
	uint8_t receive_device_address =  (dev_id << 1) | 1;

	uint8_t transmit_device_address =  (dev_id << 1);

	if ((HAL_I2C_Master_Transmit(&hi2c1, transmit_device_address, &reg_addr, 1, 100) == HAL_OK))
	{
		if (HAL_I2C_Master_Receive(&hi2c1, receive_device_address, reg_data, len, 100) == HAL_OK)
		{
			return 1;
		}
	}

	return 0;
}

int8_t user_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
	uint8_t transmit_device_address =  (dev_id << 1);

	if ((HAL_I2C_Master_Transmit(&hi2c1, transmit_device_address, &reg_addr, 1, 100) == HAL_OK))
	{
		if (HAL_I2C_Master_Transmit(&hi2c1, transmit_device_address, reg_data, len, 100) == HAL_OK)
		{
			return 1;
		}
	}

	return 0;
};

/*
 * If result equals 0 then the initialization was successful
 * Otherwise a negative integer is returned
 * */

int8_t bme680_initialize(bme_params * params){

	int8_t result = BME680_E_COM_FAIL;
	result = bme680_init(&(params->dev));

	if (result == BME680_OK)
	{
		result = bme680_set_sensor_settings(params->settings,&(params->dev));
		if (result == BME680_OK)
		{
			result = bme680_set_sensor_mode(&(params->dev));
		}
	}
	return result;
}

/*
 * Gets new data for the sensor by updating the struct bme_data_field
 */
 int UpdateSensorData(int slot, sensorParamsPtr params){

	 uint16_t meas_period;
	 int8_t result = BME680_E_COM_FAIL;

	 result = bme680_set_sensor_settings(bme_init_array[slot].settings,&(bme_init_array[slot].dev));
	 if (result == BME680_OK)
	 {
		 result = bme680_set_sensor_mode(&(bme_init_array[slot].dev));
		 if (result == BME680_OK)
		 {
			 bme680_get_profile_dur(&meas_period, &(bme_init_array[slot].dev));
			 user_delay_ms(meas_period);
			 result = bme680_get_sensor_data(&data,&(bme_init_array[slot].dev));
		 }
	 }
	 return result;
 }

 // is the size suppose to indicate what type of return we expect?
 unsigned int getSensorReading_pressure (void (*resultPtr), int resultSize, int slot,sensorParamsPtr params)
 {
	 UpdateSensorData(slot,params);
	 *((float *)resultPtr) = (data.pressure)/100.0f;
 }


 unsigned int getSensorReading_temperature (void (*resultPtr), int resultSize, int slot,sensorParamsPtr params)
 {
	 UpdateSensorData(slot,params);
	 *((float *)resultPtr) = (data->temperature)/100.0f;
 }

 unsigned int getSensorReading_gas (void (*resultPtr), int resultSize, int slot,sensorParamsPtr params)
 {
	 UpdateSensorData(slot,params);
	 *((uint32_t *)resultPtr) = data->gas_resistance;
 }

 unsigned int getSensorReading_humidity(void (*resultPtr), int resultSize, int slot,sensorParamsPtr params)
 {
	 UpdateSensorData(slot,params);
	 *((float *)resultPtr) = (data->humidity)/1000.0f;
 }
