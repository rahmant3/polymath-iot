
PolymathSlave_STM32L476.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007958  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  08007ae8  08007ae8  00017ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008000  08008000  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008000  08008000  00018000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008008  08008008  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008008  08008008  00018008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800800c  0800800c  0001800c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000134c  20000080  08008090  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013cc  08008090  000213cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e834  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b1d  00000000  00000000  0003e8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001790  00000000  00000000  00042408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001670  00000000  00000000  00043b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f26  00000000  00000000  00045208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a8a9  00000000  00000000  0006f12e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffad4  00000000  00000000  000899d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001894ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000630c  00000000  00000000  00189500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ad0 	.word	0x08007ad0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08007ad0 	.word	0x08007ad0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_ldivmod>:
 80001e0:	b97b      	cbnz	r3, 8000202 <__aeabi_ldivmod+0x22>
 80001e2:	b972      	cbnz	r2, 8000202 <__aeabi_ldivmod+0x22>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bfbe      	ittt	lt
 80001e8:	2000      	movlt	r0, #0
 80001ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80001ee:	e006      	blt.n	80001fe <__aeabi_ldivmod+0x1e>
 80001f0:	bf08      	it	eq
 80001f2:	2800      	cmpeq	r0, #0
 80001f4:	bf1c      	itt	ne
 80001f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80001fa:	f04f 30ff 	movne.w	r0, #4294967295
 80001fe:	f000 b9b9 	b.w	8000574 <__aeabi_idiv0>
 8000202:	f1ad 0c08 	sub.w	ip, sp, #8
 8000206:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020a:	2900      	cmp	r1, #0
 800020c:	db09      	blt.n	8000222 <__aeabi_ldivmod+0x42>
 800020e:	2b00      	cmp	r3, #0
 8000210:	db1a      	blt.n	8000248 <__aeabi_ldivmod+0x68>
 8000212:	f000 f84d 	bl	80002b0 <__udivmoddi4>
 8000216:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021e:	b004      	add	sp, #16
 8000220:	4770      	bx	lr
 8000222:	4240      	negs	r0, r0
 8000224:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000228:	2b00      	cmp	r3, #0
 800022a:	db1b      	blt.n	8000264 <__aeabi_ldivmod+0x84>
 800022c:	f000 f840 	bl	80002b0 <__udivmoddi4>
 8000230:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000238:	b004      	add	sp, #16
 800023a:	4240      	negs	r0, r0
 800023c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000240:	4252      	negs	r2, r2
 8000242:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000246:	4770      	bx	lr
 8000248:	4252      	negs	r2, r2
 800024a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800024e:	f000 f82f 	bl	80002b0 <__udivmoddi4>
 8000252:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000256:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025a:	b004      	add	sp, #16
 800025c:	4240      	negs	r0, r0
 800025e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000262:	4770      	bx	lr
 8000264:	4252      	negs	r2, r2
 8000266:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026a:	f000 f821 	bl	80002b0 <__udivmoddi4>
 800026e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000272:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000276:	b004      	add	sp, #16
 8000278:	4252      	negs	r2, r2
 800027a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <user_delay_ms>:

// --------------------------------------------------------------------------------------------------------------------
// Callback for delay function for BME680 driver
// --------------------------------------------------------------------------------------------------------------------
void user_delay_ms(uint32_t period)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	HAL_Delay(period);
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f002 fd69 	bl	8003058 <HAL_Delay>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <user_i2c_read>:
// --------------------------------------------------------------------------------------------------------------------
// I2C interface function -
// I2C1 -> read & write
// --------------------------------------------------------------------------------------------------------------------
int8_t user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af02      	add	r7, sp, #8
 8000596:	603a      	str	r2, [r7, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
 800059e:	460b      	mov	r3, r1
 80005a0:	71bb      	strb	r3, [r7, #6]
 80005a2:	4613      	mov	r3, r2
 80005a4:	80bb      	strh	r3, [r7, #4]
	uint8_t receive_device_address =  (dev_id << 1) | 1;
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	b25b      	sxtb	r3, r3
 80005b2:	73fb      	strb	r3, [r7, #15]

	uint8_t transmit_device_address =  (dev_id << 1);
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	73bb      	strb	r3, [r7, #14]

	if ((HAL_I2C_Master_Transmit(&hi2c1, transmit_device_address, &reg_addr, 1, 100) == HAL_OK))
 80005ba:	7bbb      	ldrb	r3, [r7, #14]
 80005bc:	b299      	uxth	r1, r3
 80005be:	1dba      	adds	r2, r7, #6
 80005c0:	2364      	movs	r3, #100	; 0x64
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2301      	movs	r3, #1
 80005c6:	480c      	ldr	r0, [pc, #48]	; (80005f8 <user_i2c_read+0x68>)
 80005c8:	f003 f8b8 	bl	800373c <HAL_I2C_Master_Transmit>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d10d      	bne.n	80005ee <user_i2c_read+0x5e>
	{
		if (HAL_I2C_Master_Receive(&hi2c1, receive_device_address, reg_data, len, 100) == HAL_OK)
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	b299      	uxth	r1, r3
 80005d6:	88bb      	ldrh	r3, [r7, #4]
 80005d8:	2264      	movs	r2, #100	; 0x64
 80005da:	9200      	str	r2, [sp, #0]
 80005dc:	683a      	ldr	r2, [r7, #0]
 80005de:	4806      	ldr	r0, [pc, #24]	; (80005f8 <user_i2c_read+0x68>)
 80005e0:	f003 f9a0 	bl	8003924 <HAL_I2C_Master_Receive>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d101      	bne.n	80005ee <user_i2c_read+0x5e>
		{
			return 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	e000      	b.n	80005f0 <user_i2c_read+0x60>
		}
	}

	return 1;
 80005ee:	2301      	movs	r3, #1
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20001228 	.word	0x20001228

080005fc <user_i2c_write>:

uint8_t buffer[256];
int8_t user_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af02      	add	r7, sp, #8
 8000602:	603a      	str	r2, [r7, #0]
 8000604:	461a      	mov	r2, r3
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
 800060a:	460b      	mov	r3, r1
 800060c:	71bb      	strb	r3, [r7, #6]
 800060e:	4613      	mov	r3, r2
 8000610:	80bb      	strh	r3, [r7, #4]
	uint8_t transmit_device_address =  (dev_id << 1);
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	73fb      	strb	r3, [r7, #15]
	buffer[0] = reg_addr;
 8000618:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <user_i2c_write+0x58>)
 800061a:	79bb      	ldrb	r3, [r7, #6]
 800061c:	7013      	strb	r3, [r2, #0]
	(void)memcpy(&buffer[1], reg_data, len);
 800061e:	88bb      	ldrh	r3, [r7, #4]
 8000620:	461a      	mov	r2, r3
 8000622:	6839      	ldr	r1, [r7, #0]
 8000624:	480c      	ldr	r0, [pc, #48]	; (8000658 <user_i2c_write+0x5c>)
 8000626:	f007 fa3d 	bl	8007aa4 <memcpy>
	if (HAL_I2C_Master_Transmit(&hi2c1, transmit_device_address, buffer, len + 1, 100) == HAL_OK)
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	b299      	uxth	r1, r3
 800062e:	88bb      	ldrh	r3, [r7, #4]
 8000630:	3301      	adds	r3, #1
 8000632:	b29b      	uxth	r3, r3
 8000634:	2264      	movs	r2, #100	; 0x64
 8000636:	9200      	str	r2, [sp, #0]
 8000638:	4a06      	ldr	r2, [pc, #24]	; (8000654 <user_i2c_write+0x58>)
 800063a:	4808      	ldr	r0, [pc, #32]	; (800065c <user_i2c_write+0x60>)
 800063c:	f003 f87e 	bl	800373c <HAL_I2C_Master_Transmit>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d101      	bne.n	800064a <user_i2c_write+0x4e>
	{
		return 0;
 8000646:	2300      	movs	r3, #0
 8000648:	e000      	b.n	800064c <user_i2c_write+0x50>
	}

	return 1;
 800064a:	2301      	movs	r3, #1
};
 800064c:	4618      	mov	r0, r3
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20001124 	.word	0x20001124
 8000658:	20001125 	.word	0x20001125
 800065c:	20001228 	.word	0x20001228

08000660 <bme680_initialize>:
// --------------------------------------------------------------------------------------------------------------------
// If result equals 0 then the initialization was successful
// Otherwise a negative integer is returned
// --------------------------------------------------------------------------------------------------------------------

int8_t bme680_initialize(bme_params * params){
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

	int8_t result = BME680_E_COM_FAIL;
 8000668:	23fe      	movs	r3, #254	; 0xfe
 800066a:	73fb      	strb	r3, [r7, #15]
	result = bme680_init(&(params->dev));
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4618      	mov	r0, r3
 8000670:	f000 f8ba 	bl	80007e8 <bme680_init>
 8000674:	4603      	mov	r3, r0
 8000676:	73fb      	strb	r3, [r7, #15]

	if (result == BME680_OK)
 8000678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d114      	bne.n	80006aa <bme680_initialize+0x4a>
	{
		result = bme680_set_sensor_settings(params->settings,&(params->dev));
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000686:	b29b      	uxth	r3, r3
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	4611      	mov	r1, r2
 800068c:	4618      	mov	r0, r3
 800068e:	f000 f9eb 	bl	8000a68 <bme680_set_sensor_settings>
 8000692:	4603      	mov	r3, r0
 8000694:	73fb      	strb	r3, [r7, #15]
		if (result == BME680_OK)
 8000696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d105      	bne.n	80006aa <bme680_initialize+0x4a>
		{
			result = bme680_set_sensor_mode(&(params->dev));
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fbb3 	bl	8000e0c <bme680_set_sensor_mode>
 80006a6:	4603      	mov	r3, r0
 80006a8:	73fb      	strb	r3, [r7, #15]
		}
	}
	return result;
 80006aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <UpdateSensorData>:
// --------------------------------------------------------------------------------------------------------------------
//
// Gets new data for the sensor by updating the struct bme_data_field
// --------------------------------------------------------------------------------------------------------------------

 int UpdateSensorData(int slot, sensorParamsPtr params){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]

	 uint16_t meas_period;
	 int8_t result = BME680_E_COM_FAIL;
 80006c2:	23fe      	movs	r3, #254	; 0xfe
 80006c4:	73fb      	strb	r3, [r7, #15]

	 bme680_get_profile_dur(&meas_period, &(bme_init_array[slot].dev));
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	225c      	movs	r2, #92	; 0x5c
 80006ca:	fb02 f303 	mul.w	r3, r2, r3
 80006ce:	4a16      	ldr	r2, [pc, #88]	; (8000728 <UpdateSensorData+0x70>)
 80006d0:	441a      	add	r2, r3
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	4611      	mov	r1, r2
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 fbfb 	bl	8000ed4 <bme680_get_profile_dur>
	 user_delay_ms(meas_period);
 80006de:	89bb      	ldrh	r3, [r7, #12]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ff49 	bl	8000578 <user_delay_ms>
	 result = bme680_get_sensor_data(&data,&(bme_init_array[slot].dev));
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	225c      	movs	r2, #92	; 0x5c
 80006ea:	fb02 f303 	mul.w	r3, r2, r3
 80006ee:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <UpdateSensorData+0x70>)
 80006f0:	4413      	add	r3, r2
 80006f2:	4619      	mov	r1, r3
 80006f4:	480d      	ldr	r0, [pc, #52]	; (800072c <UpdateSensorData+0x74>)
 80006f6:	f000 fc53 	bl	8000fa0 <bme680_get_sensor_data>
 80006fa:	4603      	mov	r3, r0
 80006fc:	73fb      	strb	r3, [r7, #15]

	 if (result == BME680_OK)
 80006fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d10a      	bne.n	800071c <UpdateSensorData+0x64>
	 {
		 result = bme680_set_sensor_mode(&(bme_init_array[slot].dev));
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	225c      	movs	r2, #92	; 0x5c
 800070a:	fb02 f303 	mul.w	r3, r2, r3
 800070e:	4a06      	ldr	r2, [pc, #24]	; (8000728 <UpdateSensorData+0x70>)
 8000710:	4413      	add	r3, r2
 8000712:	4618      	mov	r0, r3
 8000714:	f000 fb7a 	bl	8000e0c <bme680_set_sensor_mode>
 8000718:	4603      	mov	r3, r0
 800071a:	73fb      	strb	r3, [r7, #15]
	 }

	 return result;
 800071c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 }
 8000720:	4618      	mov	r0, r3
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000000 	.word	0x20000000
 800072c:	2000009c 	.word	0x2000009c

08000730 <getSensorReading_temperature>:
 // --------------------------------------------------------------------------------------------------------------------
 //
 // returns the temperature - to check the floating point enable
 // --------------------------------------------------------------------------------------------------------------------
 int getSensorReading_temperature (int32_t * resultPtr, int slot,sensorParamsPtr params)
 {
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
	 int8_t result = SENSOR_FAILURE;
 800073c:	2301      	movs	r3, #1
 800073e:	75fb      	strb	r3, [r7, #23]
	 if (BME680_OK == UpdateSensorData(slot,params))
 8000740:	6879      	ldr	r1, [r7, #4]
 8000742:	68b8      	ldr	r0, [r7, #8]
 8000744:	f7ff ffb8 	bl	80006b8 <UpdateSensorData>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d107      	bne.n	800075e <getSensorReading_temperature+0x2e>
	 {
		 *resultPtr = data.temperature;
 800074e:	4b07      	ldr	r3, [pc, #28]	; (800076c <getSensorReading_temperature+0x3c>)
 8000750:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000754:	461a      	mov	r2, r3
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	601a      	str	r2, [r3, #0]
		 result = SENSOR_SUCCESS;
 800075a:	2300      	movs	r3, #0
 800075c:	75fb      	strb	r3, [r7, #23]
	 }

	 return result;
 800075e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 }
 8000762:	4618      	mov	r0, r3
 8000764:	3718      	adds	r7, #24
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	2000009c 	.word	0x2000009c

08000770 <getSensorReading_gas_resistance>:
 // --------------------------------------------------------------------------------------------------------------------
 //
 // returns the gas-resistance - to check the floating point enable
 // --------------------------------------------------------------------------------------------------------------------
 int getSensorReading_gas_resistance (int32_t * resultPtr, int slot,sensorParamsPtr params)
 {
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
	 int8_t result = SENSOR_FAILURE;
 800077c:	2301      	movs	r3, #1
 800077e:	75fb      	strb	r3, [r7, #23]
	 if (BME680_OK == UpdateSensorData(slot,params))
 8000780:	6879      	ldr	r1, [r7, #4]
 8000782:	68b8      	ldr	r0, [r7, #8]
 8000784:	f7ff ff98 	bl	80006b8 <UpdateSensorData>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d106      	bne.n	800079c <getSensorReading_gas_resistance+0x2c>
	 {
		 *resultPtr = data.gas_resistance;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <getSensorReading_gas_resistance+0x38>)
 8000790:	691b      	ldr	r3, [r3, #16]
 8000792:	461a      	mov	r2, r3
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	601a      	str	r2, [r3, #0]
	 	 result = SENSOR_SUCCESS;
 8000798:	2300      	movs	r3, #0
 800079a:	75fb      	strb	r3, [r7, #23]
	 }

	 return result;
 800079c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 }
 80007a0:	4618      	mov	r0, r3
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	2000009c 	.word	0x2000009c

080007ac <getSensorReading_humidity>:
 // --------------------------------------------------------------------------------------------------------------------
 //
 // returns the humidity - to check the floating point enable
 // --------------------------------------------------------------------------------------------------------------------
 int getSensorReading_humidity(int32_t * resultPtr, int slot,sensorParamsPtr params)
 {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
	 int result = SENSOR_FAILURE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
	 if (BME680_OK == UpdateSensorData(slot,params))
 80007bc:	6879      	ldr	r1, [r7, #4]
 80007be:	68b8      	ldr	r0, [r7, #8]
 80007c0:	f7ff ff7a 	bl	80006b8 <UpdateSensorData>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d106      	bne.n	80007d8 <getSensorReading_humidity+0x2c>
	 {
		 *resultPtr = data.humidity;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <getSensorReading_humidity+0x38>)
 80007cc:	68db      	ldr	r3, [r3, #12]
 80007ce:	461a      	mov	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	601a      	str	r2, [r3, #0]
	 	 result = SENSOR_SUCCESS;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
	 }
	 return result;
 80007d8:	697b      	ldr	r3, [r7, #20]
 }
 80007da:	4618      	mov	r0, r3
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000009c 	.word	0x2000009c

080007e8 <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f001 fa31 	bl	8001c58 <null_ptr_check>
 80007f6:	4603      	mov	r3, r0
 80007f8:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80007fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d120      	bne.n	8000844 <bme680_init+0x5c>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f000 f8f1 	bl	80009ea <bme680_soft_reset>
 8000808:	4603      	mov	r3, r0
 800080a:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 800080c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d117      	bne.n	8000844 <bme680_init+0x5c>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8000814:	6879      	ldr	r1, [r7, #4]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2201      	movs	r2, #1
 800081a:	20d0      	movs	r0, #208	; 0xd0
 800081c:	f000 f818 	bl	8000850 <bme680_get_regs>
 8000820:	4603      	mov	r3, r0
 8000822:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 8000824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d10b      	bne.n	8000844 <bme680_init+0x5c>
				if (dev->chip_id == BME680_CHIP_ID) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b61      	cmp	r3, #97	; 0x61
 8000832:	d105      	bne.n	8000840 <bme680_init+0x58>
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f000 fbdf 	bl	8000ff8 <get_calib_data>
 800083a:	4603      	mov	r3, r0
 800083c:	73fb      	strb	r3, [r7, #15]
 800083e:	e001      	b.n	8000844 <bme680_init+0x5c>
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
 8000840:	23fd      	movs	r3, #253	; 0xfd
 8000842:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return rslt;
 8000844:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b087      	sub	sp, #28
 8000854:	af00      	add	r7, sp, #0
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4603      	mov	r3, r0
 800085c:	73fb      	strb	r3, [r7, #15]
 800085e:	4613      	mov	r3, r2
 8000860:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f001 f9f8 	bl	8001c58 <null_ptr_check>
 8000868:	4603      	mov	r3, r0
 800086a:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME680_OK) {
 800086c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d126      	bne.n	80008c2 <bme680_get_regs+0x72>
		if (dev->intf == BME680_SPI_INTF) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	789b      	ldrb	r3, [r3, #2]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d10e      	bne.n	800089a <bme680_get_regs+0x4a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	4618      	mov	r0, r3
 8000882:	f001 f91a 	bl	8001aba <set_mem_page>
 8000886:	4603      	mov	r3, r0
 8000888:	75fb      	strb	r3, [r7, #23]
			if (rslt == BME680_OK)
 800088a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d103      	bne.n	800089a <bme680_get_regs+0x4a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000898:	73fb      	strb	r3, [r7, #15]
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	7858      	ldrb	r0, [r3, #1]
 80008a2:	89bb      	ldrh	r3, [r7, #12]
 80008a4:	7bf9      	ldrb	r1, [r7, #15]
 80008a6:	68ba      	ldr	r2, [r7, #8]
 80008a8:	47a0      	blx	r4
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		if (dev->com_rslt != 0)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <bme680_get_regs+0x72>
			rslt = BME680_E_COM_FAIL;
 80008be:	23fe      	movs	r3, #254	; 0xfe
 80008c0:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80008c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	371c      	adds	r7, #28
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd90      	pop	{r4, r7, pc}

080008ce <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 80008ce:	b5b0      	push	{r4, r5, r7, lr}
 80008d0:	b090      	sub	sp, #64	; 0x40
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	60f8      	str	r0, [r7, #12]
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	4613      	mov	r3, r2
 80008dc:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	f107 0318 	add.w	r3, r7, #24
 80008e6:	2224      	movs	r2, #36	; 0x24
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f007 f8e8 	bl	8007ac0 <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80008f0:	6838      	ldr	r0, [r7, #0]
 80008f2:	f001 f9b1 	bl	8001c58 <null_ptr_check>
 80008f6:	4603      	mov	r3, r0
 80008f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (rslt == BME680_OK) {
 80008fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8000900:	2b00      	cmp	r3, #0
 8000902:	d16c      	bne.n	80009de <bme680_set_regs+0x110>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d064      	beq.n	80009d4 <bme680_set_regs+0x106>
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b13      	cmp	r3, #19
 800090e:	d861      	bhi.n	80009d4 <bme680_set_regs+0x106>
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 8000910:	2300      	movs	r3, #0
 8000912:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8000914:	e037      	b.n	8000986 <bme680_set_regs+0xb8>
				if (dev->intf == BME680_SPI_INTF) {
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	789b      	ldrb	r3, [r3, #2]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d119      	bne.n	8000952 <bme680_set_regs+0x84>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 800091e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000920:	68fa      	ldr	r2, [r7, #12]
 8000922:	4413      	add	r3, r2
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	6839      	ldr	r1, [r7, #0]
 8000928:	4618      	mov	r0, r3
 800092a:	f001 f8c6 	bl	8001aba <set_mem_page>
 800092e:	4603      	mov	r3, r0
 8000930:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8000934:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	4413      	add	r3, r2
 800093a:	781a      	ldrb	r2, [r3, #0]
 800093c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800094a:	440b      	add	r3, r1
 800094c:	f803 2c2c 	strb.w	r2, [r3, #-44]
 8000950:	e00a      	b.n	8000968 <bme680_set_regs+0x9a>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 8000952:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	441a      	add	r2, r3
 8000958:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	7812      	ldrb	r2, [r2, #0]
 800095e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000962:	440b      	add	r3, r1
 8000964:	f803 2c2c 	strb.w	r2, [r3, #-44]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8000968:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	441a      	add	r2, r3
 800096e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	3301      	adds	r3, #1
 8000974:	7812      	ldrb	r2, [r2, #0]
 8000976:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800097a:	440b      	add	r3, r1
 800097c:	f803 2c2c 	strb.w	r2, [r3, #-44]
			for (index = 0; index < len; index++) {
 8000980:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000982:	3301      	adds	r3, #1
 8000984:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	b29b      	uxth	r3, r3
 800098a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800098c:	429a      	cmp	r2, r3
 800098e:	d3c2      	bcc.n	8000916 <bme680_set_regs+0x48>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 8000990:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8000994:	2b00      	cmp	r3, #0
 8000996:	d121      	bne.n	80009dc <bme680_set_regs+0x10e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	7858      	ldrb	r0, [r3, #1]
 80009a0:	7d39      	ldrb	r1, [r7, #20]
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	3b01      	subs	r3, #1
 80009ac:	b29d      	uxth	r5, r3
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	1c5a      	adds	r2, r3, #1
 80009b4:	462b      	mov	r3, r5
 80009b6:	47a0      	blx	r4
 80009b8:	4603      	mov	r3, r0
 80009ba:	461a      	mov	r2, r3
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				if (dev->com_rslt != 0)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d007      	beq.n	80009dc <bme680_set_regs+0x10e>
					rslt = BME680_E_COM_FAIL;
 80009cc:	23fe      	movs	r3, #254	; 0xfe
 80009ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if (rslt == BME680_OK) {
 80009d2:	e003      	b.n	80009dc <bme680_set_regs+0x10e>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 80009d4:	23fc      	movs	r3, #252	; 0xfc
 80009d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80009da:	e000      	b.n	80009de <bme680_set_regs+0x110>
			if (rslt == BME680_OK) {
 80009dc:	bf00      	nop
		}
	}

	return rslt;
 80009de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3740      	adds	r7, #64	; 0x40
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bdb0      	pop	{r4, r5, r7, pc}

080009ea <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b084      	sub	sp, #16
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 80009f2:	23e0      	movs	r3, #224	; 0xe0
 80009f4:	73bb      	strb	r3, [r7, #14]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 80009f6:	23b6      	movs	r3, #182	; 0xb6
 80009f8:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f001 f92c 	bl	8001c58 <null_ptr_check>
 8000a00:	4603      	mov	r3, r0
 8000a02:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8000a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d127      	bne.n	8000a5c <bme680_soft_reset+0x72>
		if (dev->intf == BME680_SPI_INTF)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	789b      	ldrb	r3, [r3, #2]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d104      	bne.n	8000a1e <bme680_soft_reset+0x34>
			rslt = get_mem_page(dev);
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f001 f8b5 	bl	8001b84 <get_mem_page>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	73fb      	strb	r3, [r7, #15]

		/* Reset the device */
		if (rslt == BME680_OK) {
 8000a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d11a      	bne.n	8000a5c <bme680_soft_reset+0x72>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000a26:	f107 010d 	add.w	r1, r7, #13
 8000a2a:	f107 000e 	add.w	r0, r7, #14
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2201      	movs	r2, #1
 8000a32:	f7ff ff4c 	bl	80008ce <bme680_set_regs>
 8000a36:	4603      	mov	r3, r0
 8000a38:	73fb      	strb	r3, [r7, #15]
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a3e:	200a      	movs	r0, #10
 8000a40:	4798      	blx	r3

			if (rslt == BME680_OK) {
 8000a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d108      	bne.n	8000a5c <bme680_soft_reset+0x72>
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	789b      	ldrb	r3, [r3, #2]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d104      	bne.n	8000a5c <bme680_soft_reset+0x72>
					rslt = get_mem_page(dev);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f001 f896 	bl	8001b84 <get_mem_page>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 8000a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b088      	sub	sp, #32
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	6039      	str	r1, [r7, #0]
 8000a72:	80fb      	strh	r3, [r7, #6]
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	76fb      	strb	r3, [r7, #27]
	uint8_t count = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	77bb      	strb	r3, [r7, #30]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	2300      	movs	r3, #0
 8000a82:	833b      	strh	r3, [r7, #24]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	2300      	movs	r3, #0
 8000a8a:	823b      	strh	r3, [r7, #16]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a92:	777b      	strb	r3, [r7, #29]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000a94:	6838      	ldr	r0, [r7, #0]
 8000a96:	f001 f8df 	bl	8001c58 <null_ptr_check>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	77fb      	strb	r3, [r7, #31]
	if (rslt == BME680_OK) {
 8000a9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f040 81ac 	bne.w	8000e00 <bme680_set_sensor_settings+0x398>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8000aa8:	88fb      	ldrh	r3, [r7, #6]
 8000aaa:	f003 0308 	and.w	r3, r3, #8
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d004      	beq.n	8000abc <bme680_set_sensor_settings+0x54>
			rslt = set_gas_config(dev);
 8000ab2:	6838      	ldr	r0, [r7, #0]
 8000ab4:	f000 fbcc 	bl	8001250 <set_gas_config>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	77fb      	strb	r3, [r7, #31]

		dev->power_mode = BME680_SLEEP_MODE;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		if (rslt == BME680_OK)
 8000ac4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d104      	bne.n	8000ad6 <bme680_set_sensor_settings+0x6e>
			rslt = bme680_set_sensor_mode(dev);
 8000acc:	6838      	ldr	r0, [r7, #0]
 8000ace:	f000 f99d 	bl	8000e0c <bme680_set_sensor_mode>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	77fb      	strb	r3, [r7, #31]

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 8000ad6:	88fb      	ldrh	r3, [r7, #6]
 8000ad8:	f003 0310 	and.w	r3, r3, #16
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d03f      	beq.n	8000b60 <bme680_set_sensor_settings+0xf8>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	2207      	movs	r2, #7
 8000aea:	2100      	movs	r1, #0
 8000aec:	f001 f879 	bl	8001be2 <boundary_check>
 8000af0:	4603      	mov	r3, r0
 8000af2:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_ODR_FILT_ADDR;
 8000af4:	2375      	movs	r3, #117	; 0x75
 8000af6:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8000af8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d108      	bne.n	8000b12 <bme680_set_sensor_settings+0xaa>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8000b00:	f107 011b 	add.w	r1, r7, #27
 8000b04:	7f38      	ldrb	r0, [r7, #28]
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f7ff fea1 	bl	8000850 <bme680_get_regs>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_FILTER_SEL)
 8000b12:	88fb      	ldrh	r3, [r7, #6]
 8000b14:	f003 0310 	and.w	r3, r3, #16
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d010      	beq.n	8000b3e <bme680_set_sensor_settings+0xd6>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8000b1c:	7efb      	ldrb	r3, [r7, #27]
 8000b1e:	b25b      	sxtb	r3, r3
 8000b20:	f023 031c 	bic.w	r3, r3, #28
 8000b24:	b25a      	sxtb	r2, r3
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	b25b      	sxtb	r3, r3
 8000b30:	f003 031c 	and.w	r3, r3, #28
 8000b34:	b25b      	sxtb	r3, r3
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8000b3e:	7fbb      	ldrb	r3, [r7, #30]
 8000b40:	f107 0220 	add.w	r2, r7, #32
 8000b44:	4413      	add	r3, r2
 8000b46:	7f3a      	ldrb	r2, [r7, #28]
 8000b48:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8000b4c:	7fbb      	ldrb	r3, [r7, #30]
 8000b4e:	7efa      	ldrb	r2, [r7, #27]
 8000b50:	f107 0120 	add.w	r1, r7, #32
 8000b54:	440b      	add	r3, r1
 8000b56:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8000b5a:	7fbb      	ldrb	r3, [r7, #30]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	f003 0320 	and.w	r3, r3, #32
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d039      	beq.n	8000bde <bme680_set_sensor_settings+0x176>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	f103 003d 	add.w	r0, r3, #61	; 0x3d
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	2208      	movs	r2, #8
 8000b74:	2100      	movs	r1, #0
 8000b76:	f001 f834 	bl	8001be2 <boundary_check>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	77fb      	strb	r3, [r7, #31]
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;
 8000b7e:	2370      	movs	r3, #112	; 0x70
 8000b80:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8000b82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d108      	bne.n	8000b9c <bme680_set_sensor_settings+0x134>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8000b8a:	f107 011b 	add.w	r1, r7, #27
 8000b8e:	7f38      	ldrb	r0, [r7, #28]
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	2201      	movs	r2, #1
 8000b94:	f7ff fe5c 	bl	8000850 <bme680_get_regs>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8000b9c:	7efb      	ldrb	r3, [r7, #27]
 8000b9e:	b25b      	sxtb	r3, r3
 8000ba0:	f023 0308 	bic.w	r3, r3, #8
 8000ba4:	b25a      	sxtb	r2, r3
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000bac:	b25b      	sxtb	r3, r3
 8000bae:	f003 0308 	and.w	r3, r3, #8
 8000bb2:	b25b      	sxtb	r3, r3
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	b25b      	sxtb	r3, r3
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8000bbc:	7fbb      	ldrb	r3, [r7, #30]
 8000bbe:	f107 0220 	add.w	r2, r7, #32
 8000bc2:	4413      	add	r3, r2
 8000bc4:	7f3a      	ldrb	r2, [r7, #28]
 8000bc6:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8000bca:	7fbb      	ldrb	r3, [r7, #30]
 8000bcc:	7efa      	ldrb	r2, [r7, #27]
 8000bce:	f107 0120 	add.w	r1, r7, #32
 8000bd2:	440b      	add	r3, r1
 8000bd4:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8000bd8:	7fbb      	ldrb	r3, [r7, #30]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 8000bde:	88fb      	ldrh	r3, [r7, #6]
 8000be0:	f003 0303 	and.w	r3, r3, #3
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d052      	beq.n	8000c8e <bme680_set_sensor_settings+0x226>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	2205      	movs	r2, #5
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	f000 fff5 	bl	8001be2 <boundary_check>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8000bfc:	2374      	movs	r3, #116	; 0x74
 8000bfe:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8000c00:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d108      	bne.n	8000c1a <bme680_set_sensor_settings+0x1b2>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8000c08:	f107 011b 	add.w	r1, r7, #27
 8000c0c:	7f38      	ldrb	r0, [r7, #28]
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	2201      	movs	r2, #1
 8000c12:	f7ff fe1d 	bl	8000850 <bme680_get_regs>
 8000c16:	4603      	mov	r3, r0
 8000c18:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_OST_SEL)
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d00d      	beq.n	8000c40 <bme680_set_sensor_settings+0x1d8>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 8000c24:	7efb      	ldrb	r3, [r7, #27]
 8000c26:	b25b      	sxtb	r3, r3
 8000c28:	f003 031f 	and.w	r3, r3, #31
 8000c2c:	b25a      	sxtb	r2, r3
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000c34:	015b      	lsls	r3, r3, #5
 8000c36:	b25b      	sxtb	r3, r3
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	b25b      	sxtb	r3, r3
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_OSP_SEL)
 8000c40:	88fb      	ldrh	r3, [r7, #6]
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d010      	beq.n	8000c6c <bme680_set_sensor_settings+0x204>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 8000c4a:	7efb      	ldrb	r3, [r7, #27]
 8000c4c:	b25b      	sxtb	r3, r3
 8000c4e:	f023 031c 	bic.w	r3, r3, #28
 8000c52:	b25a      	sxtb	r2, r3
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	b25b      	sxtb	r3, r3
 8000c5e:	f003 031c 	and.w	r3, r3, #28
 8000c62:	b25b      	sxtb	r3, r3
 8000c64:	4313      	orrs	r3, r2
 8000c66:	b25b      	sxtb	r3, r3
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr;
 8000c6c:	7fbb      	ldrb	r3, [r7, #30]
 8000c6e:	f107 0220 	add.w	r2, r7, #32
 8000c72:	4413      	add	r3, r2
 8000c74:	7f3a      	ldrb	r2, [r7, #28]
 8000c76:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8000c7a:	7fbb      	ldrb	r3, [r7, #30]
 8000c7c:	7efa      	ldrb	r2, [r7, #27]
 8000c7e:	f107 0120 	add.w	r1, r7, #32
 8000c82:	440b      	add	r3, r1
 8000c84:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8000c88:	7fbb      	ldrb	r3, [r7, #30]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	f003 0304 	and.w	r3, r3, #4
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d039      	beq.n	8000d0c <bme680_set_sensor_settings+0x2a4>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	2205      	movs	r2, #5
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	f000 ff9d 	bl	8001be2 <boundary_check>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_OS_H_ADDR;
 8000cac:	2372      	movs	r3, #114	; 0x72
 8000cae:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8000cb0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d108      	bne.n	8000cca <bme680_set_sensor_settings+0x262>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8000cb8:	f107 011b 	add.w	r1, r7, #27
 8000cbc:	7f38      	ldrb	r0, [r7, #28]
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f7ff fdc5 	bl	8000850 <bme680_get_regs>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8000cca:	7efb      	ldrb	r3, [r7, #27]
 8000ccc:	b25b      	sxtb	r3, r3
 8000cce:	f023 0307 	bic.w	r3, r3, #7
 8000cd2:	b25a      	sxtb	r2, r3
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000cda:	b25b      	sxtb	r3, r3
 8000cdc:	f003 0307 	and.w	r3, r3, #7
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	b25b      	sxtb	r3, r3
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8000cea:	7fbb      	ldrb	r3, [r7, #30]
 8000cec:	f107 0220 	add.w	r2, r7, #32
 8000cf0:	4413      	add	r3, r2
 8000cf2:	7f3a      	ldrb	r2, [r7, #28]
 8000cf4:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8000cf8:	7fbb      	ldrb	r3, [r7, #30]
 8000cfa:	7efa      	ldrb	r2, [r7, #27]
 8000cfc:	f107 0120 	add.w	r1, r7, #32
 8000d00:	440b      	add	r3, r1
 8000d02:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8000d06:	7fbb      	ldrb	r3, [r7, #30]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d062      	beq.n	8000ddc <bme680_set_sensor_settings+0x374>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	f103 003e 	add.w	r0, r3, #62	; 0x3e
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2100      	movs	r1, #0
 8000d22:	f000 ff5e 	bl	8001be2 <boundary_check>
 8000d26:	4603      	mov	r3, r0
 8000d28:	77fb      	strb	r3, [r7, #31]
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 8000d2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d109      	bne.n	8000d46 <bme680_set_sensor_settings+0x2de>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	220a      	movs	r2, #10
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	f000 ff50 	bl	8001be2 <boundary_check>
 8000d42:	4603      	mov	r3, r0
 8000d44:	77fb      	strb	r3, [r7, #31]
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;
 8000d46:	2371      	movs	r3, #113	; 0x71
 8000d48:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8000d4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d108      	bne.n	8000d64 <bme680_set_sensor_settings+0x2fc>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8000d52:	f107 011b 	add.w	r1, r7, #27
 8000d56:	7f38      	ldrb	r0, [r7, #28]
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f7ff fd78 	bl	8000850 <bme680_get_regs>
 8000d60:	4603      	mov	r3, r0
 8000d62:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_RUN_GAS_SEL)
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d010      	beq.n	8000d90 <bme680_set_sensor_settings+0x328>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 8000d6e:	7efb      	ldrb	r3, [r7, #27]
 8000d70:	b25b      	sxtb	r3, r3
 8000d72:	f023 0310 	bic.w	r3, r3, #16
 8000d76:	b25a      	sxtb	r2, r3
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000d7e:	011b      	lsls	r3, r3, #4
 8000d80:	b25b      	sxtb	r3, r3
 8000d82:	f003 0310 	and.w	r3, r3, #16
 8000d86:	b25b      	sxtb	r3, r3
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_NBCONV_SEL)
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d00f      	beq.n	8000dba <bme680_set_sensor_settings+0x352>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 8000d9a:	7efb      	ldrb	r3, [r7, #27]
 8000d9c:	b25b      	sxtb	r3, r3
 8000d9e:	f023 030f 	bic.w	r3, r3, #15
 8000da2:	b25a      	sxtb	r2, r3
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000daa:	b25b      	sxtb	r3, r3
 8000dac:	f003 030f 	and.w	r3, r3, #15
 8000db0:	b25b      	sxtb	r3, r3
 8000db2:	4313      	orrs	r3, r2
 8000db4:	b25b      	sxtb	r3, r3
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8000dba:	7fbb      	ldrb	r3, [r7, #30]
 8000dbc:	f107 0220 	add.w	r2, r7, #32
 8000dc0:	4413      	add	r3, r2
 8000dc2:	7f3a      	ldrb	r2, [r7, #28]
 8000dc4:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8000dc8:	7fbb      	ldrb	r3, [r7, #30]
 8000dca:	7efa      	ldrb	r2, [r7, #27]
 8000dcc:	f107 0120 	add.w	r1, r7, #32
 8000dd0:	440b      	add	r3, r1
 8000dd2:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8000dd6:	7fbb      	ldrb	r3, [r7, #30]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	77bb      	strb	r3, [r7, #30]
		}

		if (rslt == BME680_OK)
 8000ddc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d109      	bne.n	8000df8 <bme680_set_sensor_settings+0x390>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 8000de4:	7fba      	ldrb	r2, [r7, #30]
 8000de6:	f107 010c 	add.w	r1, r7, #12
 8000dea:	f107 0014 	add.w	r0, r7, #20
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	f7ff fd6d 	bl	80008ce <bme680_set_regs>
 8000df4:	4603      	mov	r3, r0
 8000df6:	77fb      	strb	r3, [r7, #31]

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	7f7a      	ldrb	r2, [r7, #29]
 8000dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}

	return rslt;
 8000e00:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3720      	adds	r7, #32
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73bb      	strb	r3, [r7, #14]
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8000e18:	2374      	movs	r3, #116	; 0x74
 8000e1a:	733b      	strb	r3, [r7, #12]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f000 ff1b 	bl	8001c58 <null_ptr_check>
 8000e22:	4603      	mov	r3, r0
 8000e24:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8000e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d14c      	bne.n	8000ec8 <bme680_set_sensor_mode+0xbc>
		/* Call repeatedly until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 8000e2e:	f107 010d 	add.w	r1, r7, #13
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2201      	movs	r2, #1
 8000e36:	2074      	movs	r0, #116	; 0x74
 8000e38:	f7ff fd0a 	bl	8000850 <bme680_get_regs>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 8000e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d119      	bne.n	8000e7c <bme680_set_sensor_mode+0x70>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 8000e48:	7b7b      	ldrb	r3, [r7, #13]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	73bb      	strb	r3, [r7, #14]

				if (pow_mode != BME680_SLEEP_MODE) {
 8000e50:	7bbb      	ldrb	r3, [r7, #14]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d012      	beq.n	8000e7c <bme680_set_sensor_mode+0x70>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 8000e56:	7b7b      	ldrb	r3, [r7, #13]
 8000e58:	f023 0303 	bic.w	r3, r3, #3
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	737b      	strb	r3, [r7, #13]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8000e60:	f107 010d 	add.w	r1, r7, #13
 8000e64:	f107 000c 	add.w	r0, r7, #12
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f7ff fd2f 	bl	80008ce <bme680_set_regs>
 8000e70:	4603      	mov	r3, r0
 8000e72:	73fb      	strb	r3, [r7, #15]
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e78:	200a      	movs	r0, #10
 8000e7a:	4798      	blx	r3
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 8000e7c:	7bbb      	ldrb	r3, [r7, #14]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1d5      	bne.n	8000e2e <bme680_set_sensor_mode+0x22>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d01d      	beq.n	8000ec8 <bme680_set_sensor_mode+0xbc>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 8000e8c:	7b7b      	ldrb	r3, [r7, #13]
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	f023 0303 	bic.w	r3, r3, #3
 8000e94:	b25a      	sxtb	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e9c:	b25b      	sxtb	r3, r3
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	b25b      	sxtb	r3, r3
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	737b      	strb	r3, [r7, #13]
			if (rslt == BME680_OK)
 8000eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d109      	bne.n	8000ec8 <bme680_set_sensor_mode+0xbc>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8000eb4:	f107 010d 	add.w	r1, r7, #13
 8000eb8:	f107 000c 	add.w	r0, r7, #12
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f7ff fd05 	bl	80008ce <bme680_set_regs>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8000ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8000ede:	4a2e      	ldr	r2, [pc, #184]	; (8000f98 <bme680_get_profile_dur+0xc4>)
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ee8:	6018      	str	r0, [r3, #0]
 8000eea:	3304      	adds	r3, #4
 8000eec:	8019      	strh	r1, [r3, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000ef4:	f107 0218 	add.w	r2, r7, #24
 8000ef8:	4413      	add	r3, r2
 8000efa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000efe:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000f06:	f107 0218 	add.w	r2, r7, #24
 8000f0a:	4413      	add	r3, r2
 8000f0c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000f10:	461a      	mov	r2, r3
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	4413      	add	r3, r2
 8000f16:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f1e:	f107 0218 	add.w	r2, r7, #24
 8000f22:	4413      	add	r3, r2
 8000f24:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	617b      	str	r3, [r7, #20]

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	f240 72ab 	movw	r2, #1963	; 0x7ab
 8000f36:	fb02 f303 	mul.w	r3, r2, r3
 8000f3a:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	f203 7374 	addw	r3, r3, #1908	; 0x774
 8000f42:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	f603 1351 	addw	r3, r3, #2385	; 0x951
 8000f4a:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000f52:	613b      	str	r3, [r7, #16]
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4a11      	ldr	r2, [pc, #68]	; (8000f9c <bme680_get_profile_dur+0xc8>)
 8000f58:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5c:	099b      	lsrs	r3, r3, #6
 8000f5e:	613b      	str	r3, [r7, #16]

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	3301      	adds	r3, #1
 8000f64:	613b      	str	r3, [r7, #16]

	*duration = (uint16_t) tph_dur;
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	801a      	strh	r2, [r3, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d008      	beq.n	8000f8a <bme680_get_profile_dur+0xb6>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	881a      	ldrh	r2, [r3, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8000f82:	4413      	add	r3, r2
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	801a      	strh	r2, [r3, #0]
	}
}
 8000f8a:	bf00      	nop
 8000f8c:	371c      	adds	r7, #28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	08007ae8 	.word	0x08007ae8
 8000f9c:	10624dd3 	.word	0x10624dd3

08000fa0 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000faa:	6838      	ldr	r0, [r7, #0]
 8000fac:	f000 fe54 	bl	8001c58 <null_ptr_check>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8000fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d117      	bne.n	8000fec <bme680_get_sensor_data+0x4c>
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
 8000fbc:	6839      	ldr	r1, [r7, #0]
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 fcc1 	bl	8001946 <read_field_data>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 8000fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d10d      	bne.n	8000fec <bme680_get_sensor_data+0x4c>
			if (data->status & BME680_NEW_DATA_MSK)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b25b      	sxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	da04      	bge.n	8000fe4 <bme680_get_sensor_data+0x44>
				dev->new_fields = 1;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000fe2:	e003      	b.n	8000fec <bme680_get_sensor_data+0x4c>
			else
				dev->new_fields = 0;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		}
	}

	return rslt;
 8000fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <get_calib_data>:

/*!
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08e      	sub	sp, #56	; 0x38
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	2225      	movs	r2, #37	; 0x25
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f006 fd57 	bl	8007ac0 <memset>
	uint8_t temp_var = 0; /* Temporary variable */
 8001012:	2300      	movs	r3, #0
 8001014:	72fb      	strb	r3, [r7, #11]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 fe1e 	bl	8001c58 <null_ptr_check>
 800101c:	4603      	mov	r3, r0
 800101e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (rslt == BME680_OK) {
 8001022:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001026:	2b00      	cmp	r3, #0
 8001028:	f040 810c 	bne.w	8001244 <get_calib_data+0x24c>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 800102c:	f107 010c 	add.w	r1, r7, #12
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2219      	movs	r2, #25
 8001034:	2089      	movs	r0, #137	; 0x89
 8001036:	f7ff fc0b 	bl	8000850 <bme680_get_regs>
 800103a:	4603      	mov	r3, r0
 800103c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
 8001040:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001044:	2b00      	cmp	r3, #0
 8001046:	d10b      	bne.n	8001060 <get_calib_data+0x68>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	f103 0119 	add.w	r1, r3, #25
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2210      	movs	r2, #16
 8001054:	20e1      	movs	r0, #225	; 0xe1
 8001056:	f7ff fbfb 	bl	8000850 <bme680_get_regs>
 800105a:	4603      	mov	r3, r0
 800105c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 8001060:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b21a      	sxth	r2, r3
 8001068:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21b      	sxth	r3, r3
 8001072:	b29a      	uxth	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	82da      	strh	r2, [r3, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 8001078:	7bbb      	ldrb	r3, [r7, #14]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b21a      	sxth	r2, r3
 800107e:	7b7b      	ldrb	r3, [r7, #13]
 8001080:	b21b      	sxth	r3, r3
 8001082:	4313      	orrs	r3, r2
 8001084:	b21a      	sxth	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	831a      	strh	r2, [r3, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	b25a      	sxtb	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	769a      	strb	r2, [r3, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 8001092:	7cbb      	ldrb	r3, [r7, #18]
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	b21a      	sxth	r2, r3
 8001098:	7c7b      	ldrb	r3, [r7, #17]
 800109a:	b21b      	sxth	r3, r3
 800109c:	4313      	orrs	r3, r2
 800109e:	b21b      	sxth	r3, r3
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	839a      	strh	r2, [r3, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 80010a6:	7d3b      	ldrb	r3, [r7, #20]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	7cfb      	ldrb	r3, [r7, #19]
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	4313      	orrs	r3, r2
 80010b2:	b21a      	sxth	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	83da      	strh	r2, [r3, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 80010b8:	7d7b      	ldrb	r3, [r7, #21]
 80010ba:	b25a      	sxtb	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f883 2020 	strb.w	r2, [r3, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 80010c2:	7e3b      	ldrb	r3, [r7, #24]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	7dfb      	ldrb	r3, [r7, #23]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	845a      	strh	r2, [r3, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 80010d4:	7ebb      	ldrb	r3, [r7, #26]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	7e7b      	ldrb	r3, [r7, #25]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	849a      	strh	r2, [r3, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80010e6:	7f3b      	ldrb	r3, [r7, #28]
 80010e8:	b25a      	sxtb	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 80010f0:	7efb      	ldrb	r3, [r7, #27]
 80010f2:	b25a      	sxtb	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80010fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b21a      	sxth	r2, r3
 8001102:	7ffb      	ldrb	r3, [r7, #31]
 8001104:	b21b      	sxth	r3, r3
 8001106:	4313      	orrs	r3, r2
 8001108:	b21a      	sxth	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	851a      	strh	r2, [r3, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 800110e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	b21a      	sxth	r2, r3
 8001116:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800111a:	b21b      	sxth	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	b21a      	sxth	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	855a      	strh	r2, [r3, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 8001124:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 800112e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001132:	011b      	lsls	r3, r3, #4
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 8001134:	b21a      	sxth	r2, r3
 8001136:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800113a:	b21b      	sxth	r3, r3
 800113c:	f003 030f 	and.w	r3, r3, #15
 8001140:	b21b      	sxth	r3, r3
 8001142:	4313      	orrs	r3, r2
 8001144:	b21b      	sxth	r3, r3
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8001146:	b29a      	uxth	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	811a      	strh	r2, [r3, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 800114c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001150:	011b      	lsls	r3, r3, #4
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 8001152:	b21a      	sxth	r2, r3
 8001154:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001158:	091b      	lsrs	r3, r3, #4
 800115a:	b2db      	uxtb	r3, r3
 800115c:	b21b      	sxth	r3, r3
 800115e:	4313      	orrs	r3, r2
 8001160:	b21b      	sxth	r3, r3
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8001162:	b29a      	uxth	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	815a      	strh	r2, [r3, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 8001168:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800116c:	b25a      	sxtb	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	731a      	strb	r2, [r3, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 8001172:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001176:	b25a      	sxtb	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	735a      	strb	r2, [r3, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 800117c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001180:	b25a      	sxtb	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	739a      	strb	r2, [r3, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 8001186:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	73da      	strb	r2, [r3, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 800118e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001192:	b25a      	sxtb	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	741a      	strb	r2, [r3, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 8001198:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800119c:	b25a      	sxtb	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	745a      	strb	r2, [r3, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 80011a2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	825a      	strh	r2, [r3, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 80011b8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80011bc:	b25a      	sxtb	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	751a      	strb	r2, [r3, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
 80011c2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d135      	bne.n	8001236 <get_calib_data+0x23e>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 80011ca:	f107 010b 	add.w	r1, r7, #11
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2201      	movs	r2, #1
 80011d2:	2002      	movs	r0, #2
 80011d4:	f7ff fb3c 	bl	8000850 <bme680_get_regs>
 80011d8:	4603      	mov	r3, r0
 80011da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 80011de:	7afb      	ldrb	r3, [r7, #11]
 80011e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	da00      	bge.n	80011ea <get_calib_data+0x1f2>
 80011e8:	330f      	adds	r3, #15
 80011ea:	111b      	asrs	r3, r3, #4
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if (rslt == BME680_OK) {
 80011f4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d11c      	bne.n	8001236 <get_calib_data+0x23e>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 80011fc:	f107 010b 	add.w	r1, r7, #11
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff fb23 	bl	8000850 <bme680_get_regs>
 800120a:	4603      	mov	r3, r0
 800120c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

				dev->calib.res_heat_val = (int8_t) temp_var;
 8001210:	7afb      	ldrb	r3, [r7, #11]
 8001212:	b25a      	sxtb	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				if (rslt == BME680_OK)
 800121a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800121e:	2b00      	cmp	r3, #0
 8001220:	d109      	bne.n	8001236 <get_calib_data+0x23e>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 8001222:	f107 010b 	add.w	r1, r7, #11
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	2004      	movs	r0, #4
 800122c:	f7ff fb10 	bl	8000850 <bme680_get_regs>
 8001230:	4603      	mov	r3, r0
 8001232:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 8001236:	7afb      	ldrb	r3, [r7, #11]
 8001238:	b25b      	sxtb	r3, r3
 800123a:	111b      	asrs	r3, r3, #4
 800123c:	b25a      	sxtb	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}

	return rslt;
 8001244:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8001248:	4618      	mov	r0, r3
 800124a:	3738      	adds	r7, #56	; 0x38
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <set_gas_config>:

/*!
 * @brief This internal API is used to set the gas configuration of the sensor.
 */
static int8_t set_gas_config(struct bme680_dev *dev)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f000 fcfd 	bl	8001c58 <null_ptr_check>
 800125e:	4603      	mov	r3, r0
 8001260:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d132      	bne.n	80012d0 <set_gas_config+0x80>

		uint8_t reg_addr[2] = {0};
 800126a:	2300      	movs	r3, #0
 800126c:	81bb      	strh	r3, [r7, #12]
		uint8_t reg_data[2] = {0};
 800126e:	2300      	movs	r3, #0
 8001270:	813b      	strh	r3, [r7, #8]

		if (dev->power_mode == BME680_FORCED_MODE) {
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001278:	2b01      	cmp	r3, #1
 800127a:	d119      	bne.n	80012b0 <set_gas_config+0x60>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 800127c:	235a      	movs	r3, #90	; 0x5a
 800127e:	733b      	strb	r3, [r7, #12]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	4618      	mov	r0, r3
 800128a:	f000 fabb 	bl	8001804 <calc_heater_res>
 800128e:	4603      	mov	r3, r0
 8001290:	723b      	strb	r3, [r7, #8]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 8001292:	2364      	movs	r3, #100	; 0x64
 8001294:	737b      	strb	r3, [r7, #13]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800129c:	4618      	mov	r0, r3
 800129e:	f000 fb2d 	bl	80018fc <calc_heater_dur>
 80012a2:	4603      	mov	r3, r0
 80012a4:	727b      	strb	r3, [r7, #9]
			dev->gas_sett.nb_conv = 0;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80012ae:	e001      	b.n	80012b4 <set_gas_config+0x64>
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
 80012b0:	2301      	movs	r3, #1
 80012b2:	73fb      	strb	r3, [r7, #15]
		}
		if (rslt == BME680_OK)
 80012b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d109      	bne.n	80012d0 <set_gas_config+0x80>
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80012bc:	f107 0108 	add.w	r1, r7, #8
 80012c0:	f107 000c 	add.w	r0, r7, #12
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2202      	movs	r2, #2
 80012c8:	f7ff fb01 	bl	80008ce <bme680_set_regs>
 80012cc:	4603      	mov	r3, r0
 80012ce:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80012d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
 80012dc:	b4b0      	push	{r4, r5, r7}
 80012de:	b08b      	sub	sp, #44	; 0x2c
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	10da      	asrs	r2, r3, #3
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	8adb      	ldrh	r3, [r3, #22]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80012f8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001302:	b21a      	sxth	r2, r3
 8001304:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001308:	6a39      	ldr	r1, [r7, #32]
 800130a:	fb03 f001 	mul.w	r0, r3, r1
 800130e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001310:	fb02 f101 	mul.w	r1, r2, r1
 8001314:	1844      	adds	r4, r0, r1
 8001316:	6a39      	ldr	r1, [r7, #32]
 8001318:	fba1 0102 	umull	r0, r1, r1, r2
 800131c:	1863      	adds	r3, r4, r1
 800131e:	4619      	mov	r1, r3
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	0ac2      	lsrs	r2, r0, #11
 800132a:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 800132e:	12cb      	asrs	r3, r1, #11
 8001330:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8001334:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001338:	f04f 0000 	mov.w	r0, #0
 800133c:	f04f 0100 	mov.w	r1, #0
 8001340:	0850      	lsrs	r0, r2, #1
 8001342:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8001346:	1059      	asrs	r1, r3, #1
 8001348:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	0862      	lsrs	r2, r4, #1
 8001356:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800135a:	106b      	asrs	r3, r5, #1
 800135c:	fb02 f501 	mul.w	r5, r2, r1
 8001360:	fb00 f403 	mul.w	r4, r0, r3
 8001364:	442c      	add	r4, r5
 8001366:	fba0 0102 	umull	r0, r1, r0, r2
 800136a:	1863      	adds	r3, r4, r1
 800136c:	4619      	mov	r1, r3
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	f04f 0300 	mov.w	r3, #0
 8001376:	0b02      	lsrs	r2, r0, #12
 8001378:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800137c:	130b      	asrs	r3, r1, #12
 800137e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8001388:	011b      	lsls	r3, r3, #4
 800138a:	461a      	mov	r2, r3
 800138c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001390:	6939      	ldr	r1, [r7, #16]
 8001392:	fb03 f001 	mul.w	r0, r3, r1
 8001396:	6979      	ldr	r1, [r7, #20]
 8001398:	fb02 f101 	mul.w	r1, r2, r1
 800139c:	1844      	adds	r4, r0, r1
 800139e:	6939      	ldr	r1, [r7, #16]
 80013a0:	fba1 0102 	umull	r0, r1, r1, r2
 80013a4:	1863      	adds	r3, r4, r1
 80013a6:	4619      	mov	r1, r3
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	f04f 0300 	mov.w	r3, #0
 80013b0:	0b82      	lsrs	r2, r0, #14
 80013b2:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 80013b6:	138b      	asrs	r3, r1, #14
 80013b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	dev->calib.t_fine = (int32_t) (var2 + var3);
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4413      	add	r3, r2
 80013c2:	461a      	mov	r2, r3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	631a      	str	r2, [r3, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	3380      	adds	r3, #128	; 0x80
 80013d4:	121b      	asrs	r3, r3, #8
 80013d6:	81fb      	strh	r3, [r7, #14]

	return calc_temp;
 80013d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	372c      	adds	r7, #44	; 0x2c
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bcb0      	pop	{r4, r5, r7}
 80013e4:	4770      	bx	lr

080013e6 <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b087      	sub	sp, #28
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f4:	105b      	asrs	r3, r3, #1
 80013f6:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 80013fa:	613b      	str	r3, [r7, #16]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	109b      	asrs	r3, r3, #2
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	1092      	asrs	r2, r2, #2
 8001404:	fb02 f303 	mul.w	r3, r2, r3
 8001408:	12db      	asrs	r3, r3, #11
		(int32_t)dev->calib.par_p6) >> 2;
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	f992 2026 	ldrsb.w	r2, [r2, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8001410:	fb02 f303 	mul.w	r3, r2, r3
 8001414:	109b      	asrs	r3, r3, #2
 8001416:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800141e:	461a      	mov	r2, r3
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	fb03 f302 	mul.w	r3, r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	4413      	add	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	109a      	asrs	r2, r3, #2
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001438:	041b      	lsls	r3, r3, #16
 800143a:	4413      	add	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	109b      	asrs	r3, r3, #2
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	1092      	asrs	r2, r2, #2
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	135b      	asrs	r3, r3, #13
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	f992 2020 	ldrsb.w	r2, [r2, #32]
 8001452:	0152      	lsls	r2, r2, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001454:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8001458:	10da      	asrs	r2, r3, #3
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001460:	4619      	mov	r1, r3
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	fb03 f301 	mul.w	r3, r3, r1
 8001468:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 800146a:	4413      	add	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
	var1 = var1 >> 18;
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	149b      	asrs	r3, r3, #18
 8001472:	613b      	str	r3, [r7, #16]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	8b92      	ldrh	r2, [r2, #28]
 800147e:	fb02 f303 	mul.w	r3, r2, r3
 8001482:	13db      	asrs	r3, r3, #15
 8001484:	613b      	str	r3, [r7, #16]
	pressure_comp = 1048576 - pres_adc;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800148c:	617b      	str	r3, [r7, #20]
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	131b      	asrs	r3, r3, #12
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	461a      	mov	r2, r3
 8001498:	f640 4335 	movw	r3, #3125	; 0xc35
 800149c:	fb03 f302 	mul.w	r3, r3, r2
 80014a0:	617b      	str	r3, [r7, #20]
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014a8:	db06      	blt.n	80014b8 <calc_pressure+0xd2>
		pressure_comp = ((pressure_comp / var1) << 1);
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	e005      	b.n	80014c4 <calc_pressure+0xde>
	else
		pressure_comp = ((pressure_comp << 1) / var1);
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	005a      	lsls	r2, r3, #1
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	fb92 f3f3 	sdiv	r3, r2, r3
 80014c2:	617b      	str	r3, [r7, #20]
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80014ca:	4619      	mov	r1, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	10db      	asrs	r3, r3, #3
		(pressure_comp >> 3)) >> 13)) >> 12;
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	10d2      	asrs	r2, r2, #3
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80014d4:	fb02 f303 	mul.w	r3, r2, r3
		(pressure_comp >> 3)) >> 13)) >> 12;
 80014d8:	135b      	asrs	r3, r3, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80014da:	fb03 f301 	mul.w	r3, r3, r1
 80014de:	131b      	asrs	r3, r3, #12
 80014e0:	613b      	str	r3, [r7, #16]
	var2 = ((int32_t)(pressure_comp >> 2) *
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	109b      	asrs	r3, r3, #2
		(int32_t)dev->calib.par_p8) >> 13;
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
 80014ec:	fb02 f303 	mul.w	r3, r2, r3
 80014f0:	135b      	asrs	r3, r3, #13
 80014f2:	60fb      	str	r3, [r7, #12]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	121b      	asrs	r3, r3, #8
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	1212      	asrs	r2, r2, #8
 80014fc:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)(pressure_comp >> 8) *
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	1212      	asrs	r2, r2, #8
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001504:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)dev->calib.par_p10) >> 17;
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
		(int32_t)(pressure_comp >> 8) *
 800150e:	fb02 f303 	mul.w	r3, r2, r3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001512:	145b      	asrs	r3, r3, #17
 8001514:	60bb      	str	r3, [r7, #8]

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	441a      	add	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	441a      	add	r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	f993 3027 	ldrsb.w	r3, [r3, #39]	; 0x27
 8001526:	01db      	lsls	r3, r3, #7
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001528:	4413      	add	r3, r2
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 800152a:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	4413      	add	r3, r2
 8001530:	617b      	str	r3, [r7, #20]

	return (uint32_t)pressure_comp;
 8001532:	697b      	ldr	r3, [r7, #20]

}
 8001534:	4618      	mov	r0, r3
 8001536:	371c      	adds	r7, #28
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
 8001540:	b480      	push	{r7}
 8001542:	b08b      	sub	sp, #44	; 0x2c
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	80fb      	strh	r3, [r7, #6]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	3380      	adds	r3, #128	; 0x80
 8001558:	121b      	asrs	r3, r3, #8
 800155a:	623b      	str	r3, [r7, #32]
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 800155c:	88fa      	ldrh	r2, [r7, #6]
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	891b      	ldrh	r3, [r3, #8]
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	1ad2      	subs	r2, r2, r3
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800156c:	4619      	mov	r1, r3
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	fb03 f301 	mul.w	r3, r3, r1
 8001574:	493d      	ldr	r1, [pc, #244]	; (800166c <calc_humidity+0x12c>)
 8001576:	fb81 0103 	smull	r0, r1, r1, r3
 800157a:	1149      	asrs	r1, r1, #5
 800157c:	17db      	asrs	r3, r3, #31
 800157e:	1acb      	subs	r3, r1, r3
 8001580:	105b      	asrs	r3, r3, #1
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	61fb      	str	r3, [r7, #28]
	var2 = ((int32_t) dev->calib.par_h2
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	895b      	ldrh	r3, [r3, #10]
 800158a:	4618      	mov	r0, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8001592:	461a      	mov	r2, r3
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	fb03 f302 	mul.w	r3, r3, r2
 800159a:	4a34      	ldr	r2, [pc, #208]	; (800166c <calc_humidity+0x12c>)
 800159c:	fb82 1203 	smull	r1, r2, r2, r3
 80015a0:	1152      	asrs	r2, r2, #5
 80015a2:	17db      	asrs	r3, r3, #31
 80015a4:	1ad2      	subs	r2, r2, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80015ac:	4619      	mov	r1, r3
 80015ae:	6a3b      	ldr	r3, [r7, #32]
 80015b0:	fb03 f301 	mul.w	r3, r3, r1
 80015b4:	492d      	ldr	r1, [pc, #180]	; (800166c <calc_humidity+0x12c>)
 80015b6:	fb81 c103 	smull	ip, r1, r1, r3
 80015ba:	1149      	asrs	r1, r1, #5
 80015bc:	17db      	asrs	r3, r3, #31
 80015be:	1acb      	subs	r3, r1, r3
 80015c0:	6a39      	ldr	r1, [r7, #32]
 80015c2:	fb01 f303 	mul.w	r3, r1, r3
 80015c6:	119b      	asrs	r3, r3, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 80015c8:	4928      	ldr	r1, [pc, #160]	; (800166c <calc_humidity+0x12c>)
 80015ca:	fb81 c103 	smull	ip, r1, r1, r3
 80015ce:	1149      	asrs	r1, r1, #5
 80015d0:	17db      	asrs	r3, r3, #31
 80015d2:	1acb      	subs	r3, r1, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 80015d4:	4413      	add	r3, r2
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 80015d6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 80015da:	fb03 f300 	mul.w	r3, r3, r0
	var2 = ((int32_t) dev->calib.par_h2
 80015de:	129b      	asrs	r3, r3, #10
 80015e0:	61bb      	str	r3, [r7, #24]
	var3 = var1 * var2;
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	fb02 f303 	mul.w	r3, r2, r3
 80015ea:	617b      	str	r3, [r7, #20]
	var4 = (int32_t) dev->calib.par_h6 << 7;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	7bdb      	ldrb	r3, [r3, #15]
 80015f0:	01db      	lsls	r3, r3, #7
 80015f2:	613b      	str	r3, [r7, #16]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80015fa:	461a      	mov	r2, r3
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	fb03 f302 	mul.w	r3, r3, r2
 8001602:	4a1a      	ldr	r2, [pc, #104]	; (800166c <calc_humidity+0x12c>)
 8001604:	fb82 1203 	smull	r1, r2, r2, r3
 8001608:	1152      	asrs	r2, r2, #5
 800160a:	17db      	asrs	r3, r3, #31
 800160c:	1ad2      	subs	r2, r2, r3
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	4413      	add	r3, r2
 8001612:	111b      	asrs	r3, r3, #4
 8001614:	613b      	str	r3, [r7, #16]
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	139b      	asrs	r3, r3, #14
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	1392      	asrs	r2, r2, #14
 800161e:	fb02 f303 	mul.w	r3, r2, r3
 8001622:	129b      	asrs	r3, r3, #10
 8001624:	60fb      	str	r3, [r7, #12]
	var6 = (var4 * var5) >> 1;
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	fb02 f303 	mul.w	r3, r2, r3
 800162e:	105b      	asrs	r3, r3, #1
 8001630:	60bb      	str	r3, [r7, #8]
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	4413      	add	r3, r2
 8001638:	129b      	asrs	r3, r3, #10
 800163a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800163e:	fb02 f303 	mul.w	r3, r2, r3
 8001642:	131b      	asrs	r3, r3, #12
 8001644:	627b      	str	r3, [r7, #36]	; 0x24

	if (calc_hum > 100000) /* Cap at 100%rH */
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	4a09      	ldr	r2, [pc, #36]	; (8001670 <calc_humidity+0x130>)
 800164a:	4293      	cmp	r3, r2
 800164c:	dd02      	ble.n	8001654 <calc_humidity+0x114>
		calc_hum = 100000;
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <calc_humidity+0x130>)
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
 8001652:	e004      	b.n	800165e <calc_humidity+0x11e>
	else if (calc_hum < 0)
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	2b00      	cmp	r3, #0
 8001658:	da01      	bge.n	800165e <calc_humidity+0x11e>
		calc_hum = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	; 0x24

	return (uint32_t) calc_hum;
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001660:	4618      	mov	r0, r3
 8001662:	372c      	adds	r7, #44	; 0x2c
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	51eb851f 	.word	0x51eb851f
 8001670:	000186a0 	.word	0x000186a0

08001674 <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
 8001674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001678:	b0b0      	sub	sp, #192	; 0xc0
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	61ba      	str	r2, [r7, #24]
 8001680:	83fb      	strh	r3, [r7, #30]
 8001682:	460b      	mov	r3, r1
 8001684:	777b      	strb	r3, [r7, #29]
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8001686:	4b5d      	ldr	r3, [pc, #372]	; (80017fc <calc_gas_resistance+0x188>)
 8001688:	f107 0564 	add.w	r5, r7, #100	; 0x64
 800168c:	461c      	mov	r4, r3
 800168e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800169e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 80016a2:	4b57      	ldr	r3, [pc, #348]	; (8001800 <calc_gas_resistance+0x18c>)
 80016a4:	f107 0524 	add.w	r5, r7, #36	; 0x24
 80016a8:	461c      	mov	r4, r3
 80016aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016ba:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	f993 3036 	ldrsb.w	r3, [r3, #54]	; 0x36
 80016c4:	b25c      	sxtb	r4, r3
 80016c6:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80016ca:	4622      	mov	r2, r4
 80016cc:	462b      	mov	r3, r5
 80016ce:	f04f 0000 	mov.w	r0, #0
 80016d2:	f04f 0100 	mov.w	r1, #0
 80016d6:	0099      	lsls	r1, r3, #2
 80016d8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80016dc:	0090      	lsls	r0, r2, #2
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	1911      	adds	r1, r2, r4
 80016e4:	6139      	str	r1, [r7, #16]
 80016e6:	416b      	adcs	r3, r5
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	f240 523c 	movw	r2, #1340	; 0x53c
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016f6:	4621      	mov	r1, r4
 80016f8:	eb11 0802 	adds.w	r8, r1, r2
 80016fc:	4629      	mov	r1, r5
 80016fe:	eb41 0903 	adc.w	r9, r1, r3
		((int64_t) lookupTable1[gas_range])) >> 16;
 8001702:	7f7b      	ldrb	r3, [r7, #29]
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800170a:	4413      	add	r3, r2
 800170c:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001710:	461a      	mov	r2, r3
 8001712:	f04f 0300 	mov.w	r3, #0
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8001716:	fb02 f009 	mul.w	r0, r2, r9
 800171a:	fb08 f103 	mul.w	r1, r8, r3
 800171e:	1844      	adds	r4, r0, r1
 8001720:	fba8 0102 	umull	r0, r1, r8, r2
 8001724:	1863      	adds	r3, r4, r1
 8001726:	4619      	mov	r1, r3
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	0c02      	lsrs	r2, r0, #16
 8001732:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001736:	140b      	asrs	r3, r1, #16
 8001738:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 800173c:	8bf8      	ldrh	r0, [r7, #30]
 800173e:	f04f 0100 	mov.w	r1, #0
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	03cb      	lsls	r3, r1, #15
 800174c:	ea43 4350 	orr.w	r3, r3, r0, lsr #17
 8001750:	03c2      	lsls	r2, r0, #15
 8001752:	f112 4a7f 	adds.w	sl, r2, #4278190080	; 0xff000000
 8001756:	f143 3bff 	adc.w	fp, r3, #4294967295
 800175a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800175e:	eb1a 0102 	adds.w	r1, sl, r2
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	eb4b 0303 	adc.w	r3, fp, r3
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800176e:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8001772:	7f7b      	ldrb	r3, [r7, #29]
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800177a:	4413      	add	r3, r2
 800177c:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001780:	461a      	mov	r2, r3
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800178a:	fb03 f001 	mul.w	r0, r3, r1
 800178e:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001792:	fb02 f101 	mul.w	r1, r2, r1
 8001796:	1844      	adds	r4, r0, r1
 8001798:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800179c:	fba1 0102 	umull	r0, r1, r1, r2
 80017a0:	1863      	adds	r3, r4, r1
 80017a2:	4619      	mov	r1, r3
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	0a42      	lsrs	r2, r0, #9
 80017ae:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 80017b2:	124b      	asrs	r3, r1, #9
 80017b4:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 80017b8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	0842      	lsrs	r2, r0, #1
 80017c6:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80017ca:	104b      	asrs	r3, r1, #1
 80017cc:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80017d0:	1814      	adds	r4, r2, r0
 80017d2:	603c      	str	r4, [r7, #0]
 80017d4:	414b      	adcs	r3, r1
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80017dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017e0:	f7fe fcfe 	bl	80001e0 <__aeabi_ldivmod>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4613      	mov	r3, r2
 80017ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	return calc_gas_res;
 80017ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	37c0      	adds	r7, #192	; 0xc0
 80017f6:	46bd      	mov	sp, r7
 80017f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017fc:	08007af0 	.word	0x08007af0
 8001800:	08007b30 	.word	0x08007b30

08001804 <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
 8001804:	b480      	push	{r7}
 8001806:	b08b      	sub	sp, #44	; 0x2c
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	80fb      	strh	r3, [r7, #6]
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp > 400) /* Cap temperature */
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001816:	d902      	bls.n	800181e <calc_heater_res+0x1a>
		temp = 400;
 8001818:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800181c:	80fb      	strh	r3, [r7, #6]

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001824:	461a      	mov	r2, r3
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800182c:	fb03 f302 	mul.w	r3, r3, r2
 8001830:	4a2f      	ldr	r2, [pc, #188]	; (80018f0 <calc_heater_res+0xec>)
 8001832:	fb82 1203 	smull	r1, r2, r2, r3
 8001836:	1192      	asrs	r2, r2, #6
 8001838:	17db      	asrs	r3, r3, #31
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	021b      	lsls	r3, r3, #8
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8001846:	f503 7244 	add.w	r2, r3, #784	; 0x310
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001850:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
 8001854:	f203 1399 	addw	r3, r3, #409	; 0x199
 8001858:	88f9      	ldrh	r1, [r7, #6]
 800185a:	fb01 f303 	mul.w	r3, r1, r3
 800185e:	4925      	ldr	r1, [pc, #148]	; (80018f4 <calc_heater_res+0xf0>)
 8001860:	fb81 0103 	smull	r0, r1, r1, r3
 8001864:	10c9      	asrs	r1, r1, #3
 8001866:	17db      	asrs	r3, r3, #31
 8001868:	1acb      	subs	r3, r1, r3
 800186a:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 800186e:	4921      	ldr	r1, [pc, #132]	; (80018f4 <calc_heater_res+0xf0>)
 8001870:	fb81 0103 	smull	r0, r1, r1, r3
 8001874:	1089      	asrs	r1, r1, #2
 8001876:	17db      	asrs	r3, r3, #31
 8001878:	1acb      	subs	r3, r1, r3
 800187a:	fb03 f302 	mul.w	r3, r3, r2
 800187e:	623b      	str	r3, [r7, #32]
	var3 = var1 + (var2 / 2);
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	0fda      	lsrs	r2, r3, #31
 8001884:	4413      	add	r3, r2
 8001886:	105b      	asrs	r3, r3, #1
 8001888:	461a      	mov	r2, r3
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	4413      	add	r3, r2
 800188e:	61fb      	str	r3, [r7, #28]
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001896:	3304      	adds	r3, #4
 8001898:	69fa      	ldr	r2, [r7, #28]
 800189a:	fb92 f3f3 	sdiv	r3, r2, r3
 800189e:	61bb      	str	r3, [r7, #24]
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 80018a6:	461a      	mov	r2, r3
 80018a8:	4613      	mov	r3, r2
 80018aa:	019b      	lsls	r3, r3, #6
 80018ac:	4413      	add	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	4413      	add	r3, r2
 80018b2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80018b6:	617b      	str	r3, [r7, #20]
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80018c0:	f1a3 02fa 	sub.w	r2, r3, #250	; 0xfa
 80018c4:	4613      	mov	r3, r2
 80018c6:	011b      	lsls	r3, r3, #4
 80018c8:	4413      	add	r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	613b      	str	r3, [r7, #16]
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	3332      	adds	r3, #50	; 0x32
 80018d2:	4a09      	ldr	r2, [pc, #36]	; (80018f8 <calc_heater_res+0xf4>)
 80018d4:	fb82 1203 	smull	r1, r2, r2, r3
 80018d8:	1152      	asrs	r2, r2, #5
 80018da:	17db      	asrs	r3, r3, #31
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	73fb      	strb	r3, [r7, #15]

	return heatr_res;
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	372c      	adds	r7, #44	; 0x2c
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	10624dd3 	.word	0x10624dd3
 80018f4:	66666667 	.word	0x66666667
 80018f8:	51eb851f 	.word	0x51eb851f

080018fc <calc_heater_dur>:

/*!
 * @brief This internal API is used to calculate the Heat duration value.
 */
static uint8_t calc_heater_dur(uint16_t dur)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	80fb      	strh	r3, [r7, #6]
	uint8_t factor = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	73fb      	strb	r3, [r7, #15]
	uint8_t durval;

	if (dur >= 0xfc0) {
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 8001910:	d308      	bcc.n	8001924 <calc_heater_dur+0x28>
		durval = 0xff; /* Max duration*/
 8001912:	23ff      	movs	r3, #255	; 0xff
 8001914:	73bb      	strb	r3, [r7, #14]
 8001916:	e00f      	b.n	8001938 <calc_heater_dur+0x3c>
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
 8001918:	88fb      	ldrh	r3, [r7, #6]
 800191a:	089b      	lsrs	r3, r3, #2
 800191c:	80fb      	strh	r3, [r7, #6]
			factor += 1;
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	3301      	adds	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
		while (dur > 0x3F) {
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	2b3f      	cmp	r3, #63	; 0x3f
 8001928:	d8f6      	bhi.n	8001918 <calc_heater_dur+0x1c>
		}
		durval = (uint8_t) (dur + (factor * 64));
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	b2da      	uxtb	r2, r3
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	019b      	lsls	r3, r3, #6
 8001932:	b2db      	uxtb	r3, r3
 8001934:	4413      	add	r3, r2
 8001936:	73bb      	strb	r3, [r7, #14]
	}

	return durval;
 8001938:	7bbb      	ldrb	r3, [r7, #14]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <read_field_data>:

/*!
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b08a      	sub	sp, #40	; 0x28
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 8001950:	2300      	movs	r3, #0
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	f107 030c 	add.w	r3, r7, #12
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t gas_range;
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;
 8001962:	230a      	movs	r3, #10
 8001964:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001968:	6838      	ldr	r0, [r7, #0]
 800196a:	f000 f975 	bl	8001c58 <null_ptr_check>
 800196e:	4603      	mov	r3, r0
 8001970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	do {
		if (rslt == BME680_OK) {
 8001974:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001978:	2b00      	cmp	r3, #0
 800197a:	f040 8087 	bne.w	8001a8c <read_field_data+0x146>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 800197e:	f107 0108 	add.w	r1, r7, #8
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	220f      	movs	r2, #15
 8001986:	201d      	movs	r0, #29
 8001988:	f7fe ff62 	bl	8000850 <bme680_get_regs>
 800198c:	4603      	mov	r3, r0
 800198e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 8001992:	7a3b      	ldrb	r3, [r7, #8]
 8001994:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001998:	b2da      	uxtb	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	701a      	strb	r2, [r3, #0]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 800199e:	7a3b      	ldrb	r3, [r7, #8]
 80019a0:	f003 030f 	and.w	r3, r3, #15
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	705a      	strb	r2, [r3, #1]
			data->meas_index = buff[1];
 80019aa:	7a7a      	ldrb	r2, [r7, #9]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	709a      	strb	r2, [r3, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80019b0:	7abb      	ldrb	r3, [r7, #10]
 80019b2:	031a      	lsls	r2, r3, #12
 80019b4:	7afb      	ldrb	r3, [r7, #11]
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	4313      	orrs	r3, r2
				| ((uint32_t) buff[4] / 16));
 80019ba:	7b3a      	ldrb	r2, [r7, #12]
 80019bc:	0912      	lsrs	r2, r2, #4
 80019be:	b2d2      	uxtb	r2, r2
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	623b      	str	r3, [r7, #32]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80019c4:	7b7b      	ldrb	r3, [r7, #13]
 80019c6:	031a      	lsls	r2, r3, #12
 80019c8:	7bbb      	ldrb	r3, [r7, #14]
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	4313      	orrs	r3, r2
				| ((uint32_t) buff[7] / 16));
 80019ce:	7bfa      	ldrb	r2, [r7, #15]
 80019d0:	0912      	lsrs	r2, r2, #4
 80019d2:	b2d2      	uxtb	r2, r2
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61fb      	str	r3, [r7, #28]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80019d8:	7c3b      	ldrb	r3, [r7, #16]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	b29a      	uxth	r2, r3
 80019e0:	7c7b      	ldrb	r3, [r7, #17]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	4313      	orrs	r3, r2
 80019e6:	837b      	strh	r3, [r7, #26]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80019e8:	7d7b      	ldrb	r3, [r7, #21]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	7dbb      	ldrb	r3, [r7, #22]
 80019f2:	099b      	lsrs	r3, r3, #6
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	4313      	orrs	r3, r2
 80019fa:	833b      	strh	r3, [r7, #24]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
 80019fc:	7dbb      	ldrb	r3, [r7, #22]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	75fb      	strb	r3, [r7, #23]

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	b25a      	sxtb	r2, r3
 8001a0a:	7dbb      	ldrb	r3, [r7, #22]
 8001a0c:	b25b      	sxtb	r3, r3
 8001a0e:	f003 0320 	and.w	r3, r3, #32
 8001a12:	b25b      	sxtb	r3, r3
 8001a14:	4313      	orrs	r3, r2
 8001a16:	b25b      	sxtb	r3, r3
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	701a      	strb	r2, [r3, #0]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b25a      	sxtb	r2, r3
 8001a24:	7dbb      	ldrb	r3, [r7, #22]
 8001a26:	b25b      	sxtb	r3, r3
 8001a28:	f003 0310 	and.w	r3, r3, #16
 8001a2c:	b25b      	sxtb	r3, r3
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	b25b      	sxtb	r3, r3
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	701a      	strb	r2, [r3, #0]

			if (data->status & BME680_NEW_DATA_MSK) {
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	da20      	bge.n	8001a84 <read_field_data+0x13e>
				data->temperature = calc_temperature(adc_temp, dev);
 8001a42:	6839      	ldr	r1, [r7, #0]
 8001a44:	69f8      	ldr	r0, [r7, #28]
 8001a46:	f7ff fc49 	bl	80012dc <calc_temperature>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	809a      	strh	r2, [r3, #4]
				data->pressure = calc_pressure(adc_pres, dev);
 8001a52:	6839      	ldr	r1, [r7, #0]
 8001a54:	6a38      	ldr	r0, [r7, #32]
 8001a56:	f7ff fcc6 	bl	80013e6 <calc_pressure>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
				data->humidity = calc_humidity(adc_hum, dev);
 8001a60:	8b7b      	ldrh	r3, [r7, #26]
 8001a62:	6839      	ldr	r1, [r7, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fd6b 	bl	8001540 <calc_humidity>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	60da      	str	r2, [r3, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8001a70:	7df9      	ldrb	r1, [r7, #23]
 8001a72:	8b3b      	ldrh	r3, [r7, #24]
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fdfc 	bl	8001674 <calc_gas_resistance>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	611a      	str	r2, [r3, #16]
				break;
 8001a82:	e00d      	b.n	8001aa0 <read_field_data+0x15a>
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a88:	200a      	movs	r0, #10
 8001a8a:	4798      	blx	r3
		}
		tries--;
 8001a8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a90:	3b01      	subs	r3, #1
 8001a92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	} while (tries);
 8001a96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f47f af6a 	bne.w	8001974 <read_field_data+0x2e>

	if (!tries)
 8001aa0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d102      	bne.n	8001aae <read_field_data+0x168>
		rslt = BME680_W_NO_NEW_DATA;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return rslt;
 8001aae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3728      	adds	r7, #40	; 0x28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 8001aba:	b590      	push	{r4, r7, lr}
 8001abc:	b085      	sub	sp, #20
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	6039      	str	r1, [r7, #0]
 8001ac4:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 8001ac6:	6838      	ldr	r0, [r7, #0]
 8001ac8:	f000 f8c6 	bl	8001c58 <null_ptr_check>
 8001acc:	4603      	mov	r3, r0
 8001ace:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d14f      	bne.n	8001b78 <set_mem_page+0xbe>
		if (reg_addr > 0x7f)
 8001ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	da02      	bge.n	8001ae6 <set_mem_page+0x2c>
			mem_page = BME680_MEM_PAGE1;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	73bb      	strb	r3, [r7, #14]
 8001ae4:	e001      	b.n	8001aea <set_mem_page+0x30>
		else
			mem_page = BME680_MEM_PAGE0;
 8001ae6:	2310      	movs	r3, #16
 8001ae8:	73bb      	strb	r3, [r7, #14]

		if (mem_page != dev->mem_page) {
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	78db      	ldrb	r3, [r3, #3]
 8001aee:	7bba      	ldrb	r2, [r7, #14]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d041      	beq.n	8001b78 <set_mem_page+0xbe>
			dev->mem_page = mem_page;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	7bba      	ldrb	r2, [r7, #14]
 8001af8:	70da      	strb	r2, [r3, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	7858      	ldrb	r0, [r3, #1]
 8001b02:	f107 020d 	add.w	r2, r7, #13
 8001b06:	2301      	movs	r3, #1
 8001b08:	21f3      	movs	r1, #243	; 0xf3
 8001b0a:	47a0      	blx	r4
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	461a      	mov	r2, r3
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (dev->com_rslt != 0)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <set_mem_page+0x6a>
				rslt = BME680_E_COM_FAIL;
 8001b20:	23fe      	movs	r3, #254	; 0xfe
 8001b22:	73fb      	strb	r3, [r7, #15]

			if (rslt == BME680_OK) {
 8001b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d125      	bne.n	8001b78 <set_mem_page+0xbe>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 8001b2c:	7b7b      	ldrb	r3, [r7, #13]
 8001b2e:	f023 0310 	bic.w	r3, r3, #16
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	737b      	strb	r3, [r7, #13]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	78db      	ldrb	r3, [r3, #3]
 8001b3a:	b25b      	sxtb	r3, r3
 8001b3c:	f003 0310 	and.w	r3, r3, #16
 8001b40:	b25a      	sxtb	r2, r3
 8001b42:	7b7b      	ldrb	r3, [r7, #13]
 8001b44:	b25b      	sxtb	r3, r3
 8001b46:	4313      	orrs	r3, r2
 8001b48:	b25b      	sxtb	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	737b      	strb	r3, [r7, #13]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	7858      	ldrb	r0, [r3, #1]
 8001b56:	f107 020d 	add.w	r2, r7, #13
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	2173      	movs	r1, #115	; 0x73
 8001b5e:	47a0      	blx	r4
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <set_mem_page+0xbe>
					rslt = BME680_E_COM_FAIL;
 8001b74:	23fe      	movs	r3, #254	; 0xfe
 8001b76:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 8001b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd90      	pop	{r4, r7, pc}

08001b84 <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f863 	bl	8001c58 <null_ptr_check>
 8001b92:	4603      	mov	r3, r0
 8001b94:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d11b      	bne.n	8001bd6 <get_mem_page+0x52>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	7858      	ldrb	r0, [r3, #1]
 8001ba6:	f107 020e 	add.w	r2, r7, #14
 8001baa:	2301      	movs	r3, #1
 8001bac:	21f3      	movs	r1, #243	; 0xf3
 8001bae:	47a0      	blx	r4
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		if (dev->com_rslt != 0)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d002      	beq.n	8001bca <get_mem_page+0x46>
			rslt = BME680_E_COM_FAIL;
 8001bc4:	23fe      	movs	r3, #254	; 0xfe
 8001bc6:	73fb      	strb	r3, [r7, #15]
 8001bc8:	e005      	b.n	8001bd6 <get_mem_page+0x52>
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 8001bca:	7bbb      	ldrb	r3, [r7, #14]
 8001bcc:	f003 0310 	and.w	r3, r3, #16
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	70da      	strb	r2, [r3, #3]
	}

	return rslt;
 8001bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd90      	pop	{r4, r7, pc}

08001be2 <boundary_check>:
/*!
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b087      	sub	sp, #28
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	72fb      	strb	r3, [r7, #11]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	72bb      	strb	r3, [r7, #10]
	int8_t rslt = BME680_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	75fb      	strb	r3, [r7, #23]

	if (value != NULL) {
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d022      	beq.n	8001c44 <boundary_check+0x62>
		/* Check if value is below minimum value */
		if (*value < min) {
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	7afa      	ldrb	r2, [r7, #11]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d90b      	bls.n	8001c20 <boundary_check+0x3e>
			/* Auto correct the invalid value to minimum value */
			*value = min;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	7afa      	ldrb	r2, [r7, #11]
 8001c0c:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MIN_CORRECTION;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	7aba      	ldrb	r2, [r7, #10]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d20e      	bcs.n	8001c48 <boundary_check+0x66>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	7aba      	ldrb	r2, [r7, #10]
 8001c2e:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001c36:	f043 0302 	orr.w	r3, r3, #2
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001c42:	e001      	b.n	8001c48 <boundary_check+0x66>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 8001c44:	23ff      	movs	r3, #255	; 0xff
 8001c46:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001c48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	371c      	adds	r7, #28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00b      	beq.n	8001c7e <null_ptr_check+0x26>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <null_ptr_check+0x26>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <null_ptr_check+0x26>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d102      	bne.n	8001c84 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 8001c7e:	23ff      	movs	r3, #255	; 0xff
 8001c80:	73fb      	strb	r3, [r7, #15]
 8001c82:	e001      	b.n	8001c88 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME680_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <pmProtocolInit>:

// --------------------------------------------------------------------------------------------------------------------
// FUNCTIONS
// --------------------------------------------------------------------------------------------------------------------
int pmProtocolInit(const pmCoreUartDriver_t * driver, pmProtocolContext_t * context)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
    int rc = PM_PROTOCOL_FAILURE;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	60fb      	str	r3, [r7, #12]
    if (   (NULL != context)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d013      	beq.n	8001cd4 <pmProtocolInit+0x3c>
        && (NULL == context->driver) // If the driver is null, we can assume the module has not yet been initialized.
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10f      	bne.n	8001cd4 <pmProtocolInit+0x3c>
        && (NULL != driver)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00c      	beq.n	8001cd4 <pmProtocolInit+0x3c>
        && (NULL != driver->rx)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d008      	beq.n	8001cd4 <pmProtocolInit+0x3c>
        && (NULL != driver->tx))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d004      	beq.n	8001cd4 <pmProtocolInit+0x3c>
    {
        context->driver = driver;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	601a      	str	r2, [r3, #0]

        rc = PM_PROTOCOL_SUCCESS;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
    }

    return rc;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <pmProtocolSendPacket>:

// --------------------------------------------------------------------------------------------------------------------
int pmProtocolSendPacket(pmProtocolRawPacket_t * tx, pmProtocolContext_t * context)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b084      	sub	sp, #16
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6039      	str	r1, [r7, #0]
    int rc = PM_PROTOCOL_FAILURE;
 8001cec:	2301      	movs	r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
    if ((NULL != context->driver) && (NULL != tx))
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d045      	beq.n	8001d84 <pmProtocolSendPacket+0xa2>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d042      	beq.n	8001d84 <pmProtocolSendPacket+0xa2>
    {
        if (!context->txInProgress)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	791b      	ldrb	r3, [r3, #4]
 8001d02:	f083 0301 	eor.w	r3, r3, #1
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d039      	beq.n	8001d80 <pmProtocolSendPacket+0x9e>
        {
            context->txInProgress = true;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	711a      	strb	r2, [r3, #4]

            context->txBuffer[START_BYTE_OFFSET] = START_BYTE;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2201      	movs	r2, #1
 8001d16:	719a      	strb	r2, [r3, #6]
            context->txBuffer[LEN_BYTE_OFFSET] = tx->numBytes + PM_NUM_OVERHEAD_BYTES; // Extra 3 bytes for start, length, checksum.
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001d1e:	3303      	adds	r3, #3
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	71da      	strb	r2, [r3, #7]

            (void)memcpy(&context->txBuffer[PM_NUM_OVERHEAD_BYTES - 1], tx->bytes, tx->numBytes);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	f103 0008 	add.w	r0, r3, #8
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001d34:	461a      	mov	r2, r3
 8001d36:	f005 feb5 	bl	8007aa4 <memcpy>

            uint8_t checksum = 0x00;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	72fb      	strb	r3, [r7, #11]
            uint8_t len = context->txBuffer[LEN_BYTE_OFFSET];
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	79db      	ldrb	r3, [r3, #7]
 8001d42:	727b      	strb	r3, [r7, #9]
            for (uint8_t index = 0; index < (len - 1); index++)
 8001d44:	2300      	movs	r3, #0
 8001d46:	72bb      	strb	r3, [r7, #10]
 8001d48:	e009      	b.n	8001d5e <pmProtocolSendPacket+0x7c>
            {
                checksum += context->txBuffer[index];
 8001d4a:	7abb      	ldrb	r3, [r7, #10]
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	799a      	ldrb	r2, [r3, #6]
 8001d52:	7afb      	ldrb	r3, [r7, #11]
 8001d54:	4413      	add	r3, r2
 8001d56:	72fb      	strb	r3, [r7, #11]
            for (uint8_t index = 0; index < (len - 1); index++)
 8001d58:	7abb      	ldrb	r3, [r7, #10]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	72bb      	strb	r3, [r7, #10]
 8001d5e:	7aba      	ldrb	r2, [r7, #10]
 8001d60:	7a7b      	ldrb	r3, [r7, #9]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	429a      	cmp	r2, r3
 8001d66:	dbf0      	blt.n	8001d4a <pmProtocolSendPacket+0x68>
            }
            context->txBuffer[len - 1] = ~checksum + 1;
 8001d68:	7a7b      	ldrb	r3, [r7, #9]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	7afa      	ldrb	r2, [r7, #11]
 8001d6e:	4252      	negs	r2, r2
 8001d70:	b2d1      	uxtb	r1, r2
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	4413      	add	r3, r2
 8001d76:	460a      	mov	r2, r1
 8001d78:	719a      	strb	r2, [r3, #6]

            rc = PM_PROTOCOL_SUCCESS;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	e001      	b.n	8001d84 <pmProtocolSendPacket+0xa2>
        }
        else
        {
            rc = PM_PROTOCOL_TX_IN_PROGRESS;
 8001d80:	2304      	movs	r3, #4
 8001d82:	60fb      	str	r3, [r7, #12]
        }
    }
    return rc;
 8001d84:	68fb      	ldr	r3, [r7, #12]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <pmProtocolReadPacket>:

// --------------------------------------------------------------------------------------------------------------------
int pmProtocolReadPacket(pmProtocolRawPacket_t * rx, pmProtocolContext_t * context)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	6039      	str	r1, [r7, #0]
    int rc = PM_PROTOCOL_FAILURE;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]

    if ((NULL != context->driver) && (NULL != rx))
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d035      	beq.n	8001e10 <pmProtocolReadPacket+0x82>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d032      	beq.n	8001e10 <pmProtocolReadPacket+0x82>
    {
        pmProtocolRxStates_t rxState = context->rxState;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8001db0:	72fb      	strb	r3, [r7, #11]
        if (rxState == TIMEOUT_OCCURRED)
 8001db2:	7afb      	ldrb	r3, [r7, #11]
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d106      	bne.n	8001dc6 <pmProtocolReadPacket+0x38>
        {
        	context->rxState = WAITING_FOR_START;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
            rc = PM_PROTOCOL_RX_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	e024      	b.n	8001e10 <pmProtocolReadPacket+0x82>
        }
        else if (rxState == CHECKSUM_ERROR)
 8001dc6:	7afb      	ldrb	r3, [r7, #11]
 8001dc8:	2b05      	cmp	r3, #5
 8001dca:	d106      	bne.n	8001dda <pmProtocolReadPacket+0x4c>
        {
        	context->rxState = WAITING_FOR_START;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
            rc = PM_PROTOCOL_CHECKSUM_ERROR;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	e01a      	b.n	8001e10 <pmProtocolReadPacket+0x82>
        }
        else if (rxState == PAYLOAD_READY)
 8001dda:	7afb      	ldrb	r3, [r7, #11]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d117      	bne.n	8001e10 <pmProtocolReadPacket+0x82>
        {
            rx->numBytes = context->rxBuffer[LEN_BYTE_OFFSET] - PM_NUM_OVERHEAD_BYTES;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8001de6:	3b03      	subs	r3, #3
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            (void)memcpy(rx->bytes, &context->rxBuffer[PM_NUM_OVERHEAD_BYTES - 1], rx->numBytes);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	f103 0192 	add.w	r1, r3, #146	; 0x92
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001dfe:	461a      	mov	r2, r3
 8001e00:	f005 fe50 	bl	8007aa4 <memcpy>

        	context->rxState = WAITING_FOR_START;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
            rc = PM_PROTOCOL_SUCCESS;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
        }
    }

    return rc;
 8001e10:	68fb      	ldr	r3, [r7, #12]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <pmProtocolPeriodic>:

// --------------------------------------------------------------------------------------------------------------------
void pmProtocolPeriodic(uint32_t ticks_ms, pmProtocolContext_t * context)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
    if (NULL != context->driver)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 8127 	beq.w	800207e <pmProtocolPeriodic+0x262>
    {
        // Handle transmits.
        if (context->txInProgress)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	791b      	ldrb	r3, [r3, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d04a      	beq.n	8001ece <pmProtocolPeriodic+0xb2>
        {
        	if (!context->txWaitingForAck)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	795b      	ldrb	r3, [r3, #5]
 8001e3c:	f083 0301 	eor.w	r3, r3, #1
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d010      	beq.n	8001e68 <pmProtocolPeriodic+0x4c>
        	{
        		// Transmit the first two bytes.
            	DEBUG_PRINTF("[pm_protocol_TX] Transmitted the first two bytes.\r\n");
 8001e46:	4891      	ldr	r0, [pc, #580]	; (800208c <pmProtocolPeriodic+0x270>)
 8001e48:	f000 fbee 	bl	8002628 <debug>
				if (0 < context->driver->tx(context->txBuffer, LEN_BYTE_OFFSET + 1))
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	3206      	adds	r2, #6
 8001e56:	2102      	movs	r1, #2
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4798      	blx	r3
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	dd02      	ble.n	8001e68 <pmProtocolPeriodic+0x4c>
				{
					context->txWaitingForAck = true;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	2201      	movs	r2, #1
 8001e66:	715a      	strb	r2, [r3, #5]
				}
        	}

        	if (context->txWaitingForAck)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	795b      	ldrb	r3, [r3, #5]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 8109 	beq.w	8002084 <pmProtocolPeriodic+0x268>
        	{
        		uint8_t ack[sizeof(ackBytes)];
        		if ((sizeof(ackBytes) == context->driver->rx(ack, sizeof(ack))) && (0 == memcmp(ackBytes, ack, sizeof(ackBytes))))
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f107 0208 	add.w	r2, r7, #8
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4798      	blx	r3
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	f040 80fd 	bne.w	8002084 <pmProtocolPeriodic+0x268>
 8001e8a:	4b81      	ldr	r3, [pc, #516]	; (8002090 <pmProtocolPeriodic+0x274>)
 8001e8c:	781a      	ldrb	r2, [r3, #0]
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	f040 80f5 	bne.w	8002084 <pmProtocolPeriodic+0x268>
        			// Ack received, send the rest of the bytes.
#if 0
        			// Delay a short period of time to give the receiver a chance to receive the bytes.
					vTaskDelay(pdMS_TO_TICKS(5));
#endif
                	DEBUG_PRINTF("[pm_protocol_TX] ACK received. Transmitted the rest of the bytes.\r\n");
 8001e9a:	487e      	ldr	r0, [pc, #504]	; (8002094 <pmProtocolPeriodic+0x278>)
 8001e9c:	f000 fbc4 	bl	8002628 <debug>

        			context->txWaitingForAck = false;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	715a      	strb	r2, [r3, #5]
        			if (0 < context->driver->tx(&context->txBuffer[LEN_BYTE_OFFSET + 1], context->txBuffer[LEN_BYTE_OFFSET] - 2))
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	f102 0008 	add.w	r0, r2, #8
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	79d2      	ldrb	r2, [r2, #7]
 8001eb6:	3a02      	subs	r2, #2
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4798      	blx	r3
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f340 80df 	ble.w	8002084 <pmProtocolPeriodic+0x268>
        			{
        				context->txInProgress = false; // Transmit completed.
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	711a      	strb	r2, [r3, #4]
				default:
					break;
			}
		}
    }
}
 8001ecc:	e0da      	b.n	8002084 <pmProtocolPeriodic+0x268>
			switch(context->rxState)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <pmProtocolPeriodic+0xc2>
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d06c      	beq.n	8001fb6 <pmProtocolPeriodic+0x19a>
					break;
 8001edc:	e0d2      	b.n	8002084 <pmProtocolPeriodic+0x268>
					if (2 == context->driver->rx(context->rxBuffer, 2))
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	3290      	adds	r2, #144	; 0x90
 8001ee8:	2102      	movs	r1, #2
 8001eea:	4610      	mov	r0, r2
 8001eec:	4798      	blx	r3
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	f040 80c6 	bne.w	8002082 <pmProtocolPeriodic+0x266>
						if (context->rxBuffer[START_BYTE_OFFSET] == START_BYTE)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	f040 80c0 	bne.w	8002082 <pmProtocolPeriodic+0x266>
							DEBUG_PRINTF("[pm_protocol_RX] Received a start byte.\r\n");
 8001f02:	4865      	ldr	r0, [pc, #404]	; (8002098 <pmProtocolPeriodic+0x27c>)
 8001f04:	f000 fb90 	bl	8002628 <debug>
							context->rxStartTicks = ticks_ms;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							context->rxBytes = 1;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
							context->rxLen = context->rxBuffer[LEN_BYTE_OFFSET];
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	f893 2091 	ldrb.w	r2, [r3, #145]	; 0x91
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
							if ((context->rxLen >= PM_NUM_OVERHEAD_BYTES) && (context->rxLen <= MAX_RX_BYTES))
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d93b      	bls.n	8001fa6 <pmProtocolPeriodic+0x18a>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8001f34:	2b83      	cmp	r3, #131	; 0x83
 8001f36:	d836      	bhi.n	8001fa6 <pmProtocolPeriodic+0x18a>
								DEBUG_PRINTF("[pm_protocol_RX] Received a length byte. Transmitting ACK.\r\n");
 8001f38:	4858      	ldr	r0, [pc, #352]	; (800209c <pmProtocolPeriodic+0x280>)
 8001f3a:	f000 fb75 	bl	8002628 <debug>
								context->rxBytes = 2;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2202      	movs	r2, #2
 8001f42:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
								context->rxState = WAITING_FOR_DATA;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2202      	movs	r2, #2
 8001f4a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
								if (sizeof(ackBytes) != context->driver->tx(ackBytes, sizeof(ackBytes)))
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2101      	movs	r1, #1
 8001f56:	484e      	ldr	r0, [pc, #312]	; (8002090 <pmProtocolPeriodic+0x274>)
 8001f58:	4798      	blx	r3
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d002      	beq.n	8001f66 <pmProtocolPeriodic+0x14a>
									DEBUG_PRINTF("[pm_protocol_TX] Failed to transmit ACK.\r\n");
 8001f60:	484f      	ldr	r0, [pc, #316]	; (80020a0 <pmProtocolPeriodic+0x284>)
 8001f62:	f000 fb61 	bl	8002628 <debug>
								uint8_t rxBytes = context->driver->rx(&context->rxBuffer[context->rxBytes],
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	f892 208b 	ldrb.w	r2, [r2, #139]	; 0x8b
 8001f72:	3290      	adds	r2, #144	; 0x90
 8001f74:	6839      	ldr	r1, [r7, #0]
 8001f76:	1888      	adds	r0, r1, r2
									context->rxLen - context->rxBytes);
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	f892 108a 	ldrb.w	r1, [r2, #138]	; 0x8a
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	f892 208b 	ldrb.w	r2, [r2, #139]	; 0x8b
								uint8_t rxBytes = context->driver->rx(&context->rxBuffer[context->rxBytes],
 8001f84:	1a8a      	subs	r2, r1, r2
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4798      	blx	r3
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	733b      	strb	r3, [r7, #12]
								context->rxBytes += rxBytes;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8001f96:	7b3b      	ldrb	r3, [r7, #12]
 8001f98:	4413      	add	r3, r2
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
							{
 8001fa2:	bf00      	nop
					break;
 8001fa4:	e06d      	b.n	8002082 <pmProtocolPeriodic+0x266>
								DEBUG_PRINTF("[pm_protocol_RX] Received an invalid length byte.\r\n");
 8001fa6:	483f      	ldr	r0, [pc, #252]	; (80020a4 <pmProtocolPeriodic+0x288>)
 8001fa8:	f000 fb3e 	bl	8002628 <debug>
								context->rxState = CHECKSUM_ERROR;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	2205      	movs	r2, #5
 8001fb0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
					break;
 8001fb4:	e065      	b.n	8002082 <pmProtocolPeriodic+0x266>
					if (context->rxBytes >= context->rxLen)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d32b      	bcc.n	800201e <pmProtocolPeriodic+0x202>
						DEBUG_PRINTF("[pm_protocol_RX] Received a full payload. Processing.\r\n");
 8001fc6:	4838      	ldr	r0, [pc, #224]	; (80020a8 <pmProtocolPeriodic+0x28c>)
 8001fc8:	f000 fb2e 	bl	8002628 <debug>
						uint8_t checksum = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]
						for (uint8_t ix = 0; ix < context->rxLen; ix++)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	73bb      	strb	r3, [r7, #14]
 8001fd4:	e00a      	b.n	8001fec <pmProtocolPeriodic+0x1d0>
							checksum += context->rxBuffer[ix];
 8001fd6:	7bbb      	ldrb	r3, [r7, #14]
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	73fb      	strb	r3, [r7, #15]
						for (uint8_t ix = 0; ix < context->rxLen; ix++)
 8001fe6:	7bbb      	ldrb	r3, [r7, #14]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	73bb      	strb	r3, [r7, #14]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8001ff2:	7bba      	ldrb	r2, [r7, #14]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d3ee      	bcc.n	8001fd6 <pmProtocolPeriodic+0x1ba>
						if (checksum == 0)
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d107      	bne.n	800200e <pmProtocolPeriodic+0x1f2>
							DEBUG_PRINTF("[pm_protocol_RX] Received a payload.\r\n");
 8001ffe:	482b      	ldr	r0, [pc, #172]	; (80020ac <pmProtocolPeriodic+0x290>)
 8002000:	f000 fb12 	bl	8002628 <debug>
							context->rxState = PAYLOAD_READY;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	2203      	movs	r2, #3
 8002008:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
					break;
 800200c:	e03a      	b.n	8002084 <pmProtocolPeriodic+0x268>
							DEBUG_PRINTF("[pm_protocol_RX] Received a payload with checksum error.\r\n");
 800200e:	4828      	ldr	r0, [pc, #160]	; (80020b0 <pmProtocolPeriodic+0x294>)
 8002010:	f000 fb0a 	bl	8002628 <debug>
							context->rxState = CHECKSUM_ERROR;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	2205      	movs	r2, #5
 8002018:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
					break;
 800201c:	e032      	b.n	8002084 <pmProtocolPeriodic+0x268>
						if ((ticks_ms - context->rxStartTicks) > END_OF_PACKET_TIMEOUT_ms)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f241 3288 	movw	r2, #5000	; 0x1388
 800202c:	4293      	cmp	r3, r2
 800202e:	d907      	bls.n	8002040 <pmProtocolPeriodic+0x224>
							DEBUG_PRINTF("[pm_protocol_RX] Timeout occurred.\r\n");
 8002030:	4820      	ldr	r0, [pc, #128]	; (80020b4 <pmProtocolPeriodic+0x298>)
 8002032:	f000 faf9 	bl	8002628 <debug>
							context->rxState = TIMEOUT_OCCURRED;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2204      	movs	r2, #4
 800203a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
					break;
 800203e:	e021      	b.n	8002084 <pmProtocolPeriodic+0x268>
							uint8_t rxBytes = context->driver->rx(&context->rxBuffer[context->rxBytes],
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	f892 208b 	ldrb.w	r2, [r2, #139]	; 0x8b
 800204c:	3290      	adds	r2, #144	; 0x90
 800204e:	6839      	ldr	r1, [r7, #0]
 8002050:	1888      	adds	r0, r1, r2
								context->rxLen - context->rxBytes);
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	f892 108a 	ldrb.w	r1, [r2, #138]	; 0x8a
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	f892 208b 	ldrb.w	r2, [r2, #139]	; 0x8b
							uint8_t rxBytes = context->driver->rx(&context->rxBuffer[context->rxBytes],
 800205e:	1a8a      	subs	r2, r1, r2
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	4611      	mov	r1, r2
 8002064:	4798      	blx	r3
 8002066:	4603      	mov	r3, r0
 8002068:	737b      	strb	r3, [r7, #13]
							context->rxBytes += rxBytes;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8002070:	7b7b      	ldrb	r3, [r7, #13]
 8002072:	4413      	add	r3, r2
 8002074:	b2da      	uxtb	r2, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
					break;
 800207c:	e002      	b.n	8002084 <pmProtocolPeriodic+0x268>
		}
 800207e:	bf00      	nop
 8002080:	e000      	b.n	8002084 <pmProtocolPeriodic+0x268>
					break;
 8002082:	bf00      	nop
}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	08007b70 	.word	0x08007b70
 8002090:	08007f9c 	.word	0x08007f9c
 8002094:	08007ba4 	.word	0x08007ba4
 8002098:	08007be8 	.word	0x08007be8
 800209c:	08007c14 	.word	0x08007c14
 80020a0:	08007c54 	.word	0x08007c54
 80020a4:	08007c80 	.word	0x08007c80
 80020a8:	08007cb4 	.word	0x08007cb4
 80020ac:	08007cec 	.word	0x08007cec
 80020b0:	08007d14 	.word	0x08007d14
 80020b4:	08007d50 	.word	0x08007d50

080020b8 <pmProtocolSend>:

// --------------------------------------------------------------------------------------------------------------------
int pmProtocolSend(pmCmdPayloadDefinition_t * tx, pmProtocolContext_t * context)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b0a4      	sub	sp, #144	; 0x90
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
    int rc = PM_PROTOCOL_FAILURE;
 80020c2:	2301      	movs	r3, #1
 80020c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    pmProtocolRawPacket_t rawTx;
    if (tx->commandCode < 0x7F) // This is a master transmitting.
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b7e      	cmp	r3, #126	; 0x7e
 80020ce:	d820      	bhi.n	8002112 <pmProtocolSend+0x5a>
    {
        switch (tx->commandCode)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	dc02      	bgt.n	80020de <pmProtocolSend+0x26>
 80020d8:	2b00      	cmp	r3, #0
 80020da:	da03      	bge.n	80020e4 <pmProtocolSend+0x2c>

                rc = PM_PROTOCOL_SUCCESS;
                break;
            }
            default:
                break;
 80020dc:	e0ff      	b.n	80022de <pmProtocolSend+0x226>
        switch (tx->commandCode)
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d00a      	beq.n	80020f8 <pmProtocolSend+0x40>
                break;
 80020e2:	e0fc      	b.n	80022de <pmProtocolSend+0x226>
                rawTx.bytes[0] = tx->commandCode;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	723b      	strb	r3, [r7, #8]
                rawTx.numBytes = 1;
 80020ea:	2301      	movs	r3, #1
 80020ec:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                rc = PM_PROTOCOL_SUCCESS;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                break;
 80020f6:	e0f2      	b.n	80022de <pmProtocolSend+0x226>
                rawTx.bytes[0] = tx->commandCode;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	723b      	strb	r3, [r7, #8]
                rawTx.bytes[1] = tx->writeStatus.status;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	791b      	ldrb	r3, [r3, #4]
 8002102:	727b      	strb	r3, [r7, #9]
                rawTx.numBytes = 2;
 8002104:	2302      	movs	r3, #2
 8002106:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                rc = PM_PROTOCOL_SUCCESS;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                break;
 8002110:	e0e5      	b.n	80022de <pmProtocolSend+0x226>
        }
    }
    else // This is a slave transmitting.
    {
        switch (tx->commandCode & 0x7F)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800211a:	2b03      	cmp	r3, #3
 800211c:	dc10      	bgt.n	8002140 <pmProtocolSend+0x88>
 800211e:	2b00      	cmp	r3, #0
 8002120:	f2c0 80dc 	blt.w	80022dc <pmProtocolSend+0x224>
 8002124:	2b03      	cmp	r3, #3
 8002126:	f200 80d9 	bhi.w	80022dc <pmProtocolSend+0x224>
 800212a:	a201      	add	r2, pc, #4	; (adr r2, 8002130 <pmProtocolSend+0x78>)
 800212c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002130:	08002149 	.word	0x08002149
 8002134:	08002183 	.word	0x08002183
 8002138:	080021bd 	.word	0x080021bd
 800213c:	080022b5 	.word	0x080022b5
 8002140:	2b7f      	cmp	r3, #127	; 0x7f
 8002142:	f000 80c4 	beq.w	80022ce <pmProtocolSend+0x216>
                rawTx.numBytes = 1;
                rc = PM_PROTOCOL_SUCCESS;
                break;
            }
            default:
                break;
 8002146:	e0c9      	b.n	80022dc <pmProtocolSend+0x224>
                rawTx.bytes[0] = tx->commandCode;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	723b      	strb	r3, [r7, #8]
                rawTx.bytes[1] = tx->protocolInfo.protocolIdentifier & 0xFF;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	727b      	strb	r3, [r7, #9]
                rawTx.bytes[2] = (tx->protocolInfo.protocolIdentifier >> 8)  & 0xFF;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	0a1b      	lsrs	r3, r3, #8
 800215c:	b2db      	uxtb	r3, r3
 800215e:	72bb      	strb	r3, [r7, #10]
                rawTx.bytes[3] = (tx->protocolInfo.protocolIdentifier >> 16) & 0xFF;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	0c1b      	lsrs	r3, r3, #16
 8002166:	b2db      	uxtb	r3, r3
 8002168:	72fb      	strb	r3, [r7, #11]
                rawTx.bytes[4] = (tx->protocolInfo.protocolIdentifier >> 24) & 0xFF;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	0e1b      	lsrs	r3, r3, #24
 8002170:	b2db      	uxtb	r3, r3
 8002172:	733b      	strb	r3, [r7, #12]
                rawTx.numBytes = 5;
 8002174:	2305      	movs	r3, #5
 8002176:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                rc = PM_PROTOCOL_SUCCESS;
 800217a:	2300      	movs	r3, #0
 800217c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                break;
 8002180:	e0ad      	b.n	80022de <pmProtocolSend+0x226>
                rawTx.bytes[0] = tx->commandCode;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	723b      	strb	r3, [r7, #8]
                rawTx.bytes[1] = tx->clusterId.clusterIdentifier & 0xFF;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	727b      	strb	r3, [r7, #9]
                rawTx.bytes[2] = (tx->clusterId.clusterIdentifier >> 8)  & 0xFF;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	b2db      	uxtb	r3, r3
 8002198:	72bb      	strb	r3, [r7, #10]
                rawTx.bytes[3] = (tx->clusterId.clusterIdentifier >> 16) & 0xFF;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	0c1b      	lsrs	r3, r3, #16
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	72fb      	strb	r3, [r7, #11]
                rawTx.bytes[4] = (tx->clusterId.clusterIdentifier >> 24) & 0xFF;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	0e1b      	lsrs	r3, r3, #24
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	733b      	strb	r3, [r7, #12]
                rawTx.numBytes = 5;
 80021ae:	2305      	movs	r3, #5
 80021b0:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                rc = PM_PROTOCOL_SUCCESS;
 80021b4:	2300      	movs	r3, #0
 80021b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                break;
 80021ba:	e090      	b.n	80022de <pmProtocolSend+0x226>
                rawTx.bytes[0] = tx->commandCode;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	723b      	strb	r3, [r7, #8]
                uint8_t ix = 1;
 80021c2:	2301      	movs	r3, #1
 80021c4:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
                for (uint8_t sensorIdx = 0; sensorIdx < tx->getSensors.numSensors; sensorIdx++)
 80021c8:	2300      	movs	r3, #0
 80021ca:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
 80021ce:	e062      	b.n	8002296 <pmProtocolSend+0x1de>
                    rawTx.bytes[ix++] = tx->getSensors.sensors[sensorIdx].sensorId & 0xFF;
 80021d0:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	889a      	ldrh	r2, [r3, #4]
 80021dc:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80021e0:	1c59      	adds	r1, r3, #1
 80021e2:	f887 108b 	strb.w	r1, [r7, #139]	; 0x8b
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80021ec:	440b      	add	r3, r1
 80021ee:	f803 2c88 	strb.w	r2, [r3, #-136]
                    rawTx.bytes[ix++] = (tx->getSensors.sensors[sensorIdx].sensorId >> 8) & 0xFF;
 80021f2:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	889b      	ldrh	r3, [r3, #4]
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	b29a      	uxth	r2, r3
 8002202:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8002206:	1c59      	adds	r1, r3, #1
 8002208:	f887 108b 	strb.w	r1, [r7, #139]	; 0x8b
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8002212:	440b      	add	r3, r1
 8002214:	f803 2c88 	strb.w	r2, [r3, #-136]
                    rawTx.bytes[ix++] = tx->getSensors.sensors[sensorIdx].data & 0xFF;
 8002218:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	88da      	ldrh	r2, [r3, #6]
 8002224:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8002228:	1c59      	adds	r1, r3, #1
 800222a:	f887 108b 	strb.w	r1, [r7, #139]	; 0x8b
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8002234:	440b      	add	r3, r1
 8002236:	f803 2c88 	strb.w	r2, [r3, #-136]
                    rawTx.bytes[ix++] = (tx->getSensors.sensors[sensorIdx].data >> 8) & 0xFF;
 800223a:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	88db      	ldrh	r3, [r3, #6]
 8002246:	0a1b      	lsrs	r3, r3, #8
 8002248:	b29a      	uxth	r2, r3
 800224a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800224e:	1c59      	adds	r1, r3, #1
 8002250:	f887 108b 	strb.w	r1, [r7, #139]	; 0x8b
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800225a:	440b      	add	r3, r1
 800225c:	f803 2c88 	strb.w	r2, [r3, #-136]
					rawTx.bytes[ix++] = (tx->getSensors.sensors[sensorIdx].data >> 16) & 0xFF;
 8002260:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	f887 208b 	strb.w	r2, [r7, #139]	; 0x8b
 800226a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800226e:	4413      	add	r3, r2
 8002270:	2200      	movs	r2, #0
 8002272:	f803 2c88 	strb.w	r2, [r3, #-136]
					rawTx.bytes[ix++] = (tx->getSensors.sensors[sensorIdx].data >> 24) & 0xFF;
 8002276:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	f887 208b 	strb.w	r2, [r7, #139]	; 0x8b
 8002280:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8002284:	4413      	add	r3, r2
 8002286:	2200      	movs	r2, #0
 8002288:	f803 2c88 	strb.w	r2, [r3, #-136]
                for (uint8_t sensorIdx = 0; sensorIdx < tx->getSensors.numSensors; sensorIdx++)
 800228c:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8002290:	3301      	adds	r3, #1
 8002292:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
 8002296:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 800229a:	b29a      	uxth	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d395      	bcc.n	80021d0 <pmProtocolSend+0x118>
                rawTx.numBytes = ix;
 80022a4:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80022a8:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                rc = PM_PROTOCOL_SUCCESS;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                break;
 80022b2:	e014      	b.n	80022de <pmProtocolSend+0x226>
                rawTx.bytes[0] = tx->commandCode;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	723b      	strb	r3, [r7, #8]
                rawTx.bytes[1] = tx->writeStatus.status;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	791b      	ldrb	r3, [r3, #4]
 80022be:	727b      	strb	r3, [r7, #9]
                rawTx.numBytes = 2;
 80022c0:	2302      	movs	r3, #2
 80022c2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                rc = PM_PROTOCOL_SUCCESS;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                break;
 80022cc:	e007      	b.n	80022de <pmProtocolSend+0x226>
                rawTx.numBytes = 1;
 80022ce:	2301      	movs	r3, #1
 80022d0:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                rc = PM_PROTOCOL_SUCCESS;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                break;
 80022da:	e000      	b.n	80022de <pmProtocolSend+0x226>
                break;
 80022dc:	bf00      	nop
        }
    }

    if (PM_PROTOCOL_SUCCESS == rc)
 80022de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d107      	bne.n	80022f6 <pmProtocolSend+0x23e>
    {
        rc = pmProtocolSendPacket(&rawTx, context);
 80022e6:	f107 0308 	add.w	r3, r7, #8
 80022ea:	6839      	ldr	r1, [r7, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fcf8 	bl	8001ce2 <pmProtocolSendPacket>
 80022f2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    }

    return rc;
 80022f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3790      	adds	r7, #144	; 0x90
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop

08002304 <pmProtocolRead>:


// --------------------------------------------------------------------------------------------------------------------
int pmProtocolRead(pmCmdPayloadDefinition_t * rx, pmProtocolContext_t * context)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b0b0      	sub	sp, #192	; 0xc0
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
    int rc = PM_PROTOCOL_FAILURE;
 800230e:	2301      	movs	r3, #1
 8002310:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

    pmCmdPayloadDefinition_t localRx;
    pmProtocolRawPacket_t rawRx;

    rc = pmProtocolReadPacket(&rawRx, context);
 8002314:	f107 030c 	add.w	r3, r7, #12
 8002318:	6839      	ldr	r1, [r7, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fd37 	bl	8001d8e <pmProtocolReadPacket>
 8002320:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc

    if (PM_PROTOCOL_SUCCESS == rc) // We received a packet.
 8002324:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002328:	2b00      	cmp	r3, #0
 800232a:	f040 8142 	bne.w	80025b2 <pmProtocolRead+0x2ae>
    {
        rc = PM_PROTOCOL_RX_CMD_INVALID;
 800232e:	2305      	movs	r3, #5
 8002330:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

        localRx.commandCode = rawRx.bytes[0];
 8002334:	7b3b      	ldrb	r3, [r7, #12]
 8002336:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
        if (localRx.commandCode < 0x7F) // This is a slave receiving a master packet.
 800233a:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 800233e:	2b7e      	cmp	r3, #126	; 0x7e
 8002340:	d814      	bhi.n	800236c <pmProtocolRead+0x68>
        {
            switch (localRx.commandCode)
 8002342:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002346:	2b02      	cmp	r3, #2
 8002348:	dc02      	bgt.n	8002350 <pmProtocolRead+0x4c>
 800234a:	2b00      	cmp	r3, #0
 800234c:	da03      	bge.n	8002356 <pmProtocolRead+0x52>
                    localRx.writeStatus.status = rawRx.bytes[1];
                    rc = PM_PROTOCOL_SUCCESS;
                    break;
                }
                default:
                    break;
 800234e:	e13b      	b.n	80025c8 <pmProtocolRead+0x2c4>
            switch (localRx.commandCode)
 8002350:	2b03      	cmp	r3, #3
 8002352:	d004      	beq.n	800235e <pmProtocolRead+0x5a>
                    break;
 8002354:	e138      	b.n	80025c8 <pmProtocolRead+0x2c4>
                    rc = PM_PROTOCOL_SUCCESS;
 8002356:	2300      	movs	r3, #0
 8002358:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                    break;
 800235c:	e134      	b.n	80025c8 <pmProtocolRead+0x2c4>
                    localRx.writeStatus.status = rawRx.bytes[1];
 800235e:	7b7b      	ldrb	r3, [r7, #13]
 8002360:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
                    rc = PM_PROTOCOL_SUCCESS;
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                    break;
 800236a:	e12d      	b.n	80025c8 <pmProtocolRead+0x2c4>
            }
        }
        else // This is a master receiving a slave packet.
        {
            switch (localRx.commandCode & 0x7F)
 800236c:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002374:	2b03      	cmp	r3, #3
 8002376:	dc11      	bgt.n	800239c <pmProtocolRead+0x98>
 8002378:	2b00      	cmp	r3, #0
 800237a:	f2c0 811c 	blt.w	80025b6 <pmProtocolRead+0x2b2>
 800237e:	2b03      	cmp	r3, #3
 8002380:	f200 8119 	bhi.w	80025b6 <pmProtocolRead+0x2b2>
 8002384:	a201      	add	r2, pc, #4	; (adr r2, 800238c <pmProtocolRead+0x88>)
 8002386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238a:	bf00      	nop
 800238c:	080023a5 	.word	0x080023a5
 8002390:	080023d1 	.word	0x080023d1
 8002394:	080023fd 	.word	0x080023fd
 8002398:	08002595 	.word	0x08002595
 800239c:	2b7f      	cmp	r3, #127	; 0x7f
 800239e:	f000 8104 	beq.w	80025aa <pmProtocolRead+0x2a6>
                {
                    rc = PM_PROTOCOL_SUCCESS;
                    break;
                }
                default:
                    break;
 80023a2:	e108      	b.n	80025b6 <pmProtocolRead+0x2b2>
                    if (rawRx.numBytes == 5)
 80023a4:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80023a8:	2b05      	cmp	r3, #5
 80023aa:	f040 8106 	bne.w	80025ba <pmProtocolRead+0x2b6>
                        localRx.protocolInfo.protocolIdentifier = rawRx.bytes[1]
 80023ae:	7b7b      	ldrb	r3, [r7, #13]
 80023b0:	461a      	mov	r2, r3
                            + (rawRx.bytes[2] << 8)
 80023b2:	7bbb      	ldrb	r3, [r7, #14]
 80023b4:	021b      	lsls	r3, r3, #8
 80023b6:	441a      	add	r2, r3
                            + (rawRx.bytes[3] << 16)
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	041b      	lsls	r3, r3, #16
 80023bc:	441a      	add	r2, r3
                            + (rawRx.bytes[4] << 24);
 80023be:	7c3b      	ldrb	r3, [r7, #16]
 80023c0:	061b      	lsls	r3, r3, #24
 80023c2:	4413      	add	r3, r2
                        localRx.protocolInfo.protocolIdentifier = rawRx.bytes[1]
 80023c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                        rc = PM_PROTOCOL_SUCCESS;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                    break;
 80023ce:	e0f4      	b.n	80025ba <pmProtocolRead+0x2b6>
                    if (rawRx.numBytes == 5)
 80023d0:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80023d4:	2b05      	cmp	r3, #5
 80023d6:	f040 80f2 	bne.w	80025be <pmProtocolRead+0x2ba>
                        localRx.clusterId.clusterIdentifier = rawRx.bytes[1]
 80023da:	7b7b      	ldrb	r3, [r7, #13]
 80023dc:	461a      	mov	r2, r3
                            + (rawRx.bytes[2] << 8)
 80023de:	7bbb      	ldrb	r3, [r7, #14]
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	441a      	add	r2, r3
                            + (rawRx.bytes[3] << 16)
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	041b      	lsls	r3, r3, #16
 80023e8:	441a      	add	r2, r3
                            + (rawRx.bytes[4] << 24);
 80023ea:	7c3b      	ldrb	r3, [r7, #16]
 80023ec:	061b      	lsls	r3, r3, #24
 80023ee:	4413      	add	r3, r2
                        localRx.clusterId.clusterIdentifier = rawRx.bytes[1]
 80023f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                        rc = PM_PROTOCOL_SUCCESS;
 80023f4:	2300      	movs	r3, #0
 80023f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                    break;
 80023fa:	e0e0      	b.n	80025be <pmProtocolRead+0x2ba>
                    if ((rawRx.numBytes > 0) && ((rawRx.numBytes - 1) % PM_SIZE_OF_SENSOR_STRUCT == 0))
 80023fc:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 80de 	beq.w	80025c2 <pmProtocolRead+0x2be>
 8002406:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800240a:	3b01      	subs	r3, #1
 800240c:	4619      	mov	r1, r3
 800240e:	4b77      	ldr	r3, [pc, #476]	; (80025ec <pmProtocolRead+0x2e8>)
 8002410:	fba3 2301 	umull	r2, r3, r3, r1
 8002414:	089a      	lsrs	r2, r3, #2
 8002416:	4613      	mov	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	4413      	add	r3, r2
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	1aca      	subs	r2, r1, r3
 8002420:	2a00      	cmp	r2, #0
 8002422:	f040 80ce 	bne.w	80025c2 <pmProtocolRead+0x2be>
                        localRx.getSensors.numSensors = (rawRx.numBytes - 1) / PM_SIZE_OF_SENSOR_STRUCT;
 8002426:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800242a:	3b01      	subs	r3, #1
 800242c:	461a      	mov	r2, r3
 800242e:	4b6f      	ldr	r3, [pc, #444]	; (80025ec <pmProtocolRead+0x2e8>)
 8002430:	fba3 2302 	umull	r2, r3, r3, r2
 8002434:	089b      	lsrs	r3, r3, #2
 8002436:	b29b      	uxth	r3, r3
 8002438:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                        if (localRx.getSensors.numSensors < PM_MAX_SENSORS_PER_CLUSTER)
 800243c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8002440:	2b07      	cmp	r3, #7
 8002442:	f200 80a3 	bhi.w	800258c <pmProtocolRead+0x288>
							for (uint8_t ix = 0; ix < localRx.getSensors.numSensors; ix++)
 8002446:	2300      	movs	r3, #0
 8002448:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 800244c:	e095      	b.n	800257a <pmProtocolRead+0x276>
								localRx.getSensors.sensors[ix].sensorId = rawRx.bytes[1 + (PM_SIZE_OF_SENSOR_STRUCT * ix)];
 800244e:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 8002452:	4613      	mov	r3, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	4413      	add	r3, r2
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	3301      	adds	r3, #1
 800245c:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8002460:	4413      	add	r3, r2
 8002462:	f813 2cb4 	ldrb.w	r2, [r3, #-180]
 8002466:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800246a:	b292      	uxth	r2, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8002472:	440b      	add	r3, r1
 8002474:	f823 2c2c 	strh.w	r2, [r3, #-44]
								localRx.getSensors.sensors[ix].sensorId += (rawRx.bytes[2 + (PM_SIZE_OF_SENSOR_STRUCT * ix)] << 8);
 8002478:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8002482:	4413      	add	r3, r2
 8002484:	f833 1c2c 	ldrh.w	r1, [r3, #-44]
 8002488:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 800248c:	4613      	mov	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	3302      	adds	r3, #2
 8002496:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800249a:	4413      	add	r3, r2
 800249c:	f813 3cb4 	ldrb.w	r3, [r3, #-180]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	021b      	lsls	r3, r3, #8
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80024aa:	440a      	add	r2, r1
 80024ac:	b292      	uxth	r2, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80024b4:	440b      	add	r3, r1
 80024b6:	f823 2c2c 	strh.w	r2, [r3, #-44]
								localRx.getSensors.sensors[ix].data = rawRx.bytes[3 + (PM_SIZE_OF_SENSOR_STRUCT * ix)];
 80024ba:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 80024be:	4613      	mov	r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4413      	add	r3, r2
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	3303      	adds	r3, #3
 80024c8:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80024cc:	4413      	add	r3, r2
 80024ce:	f813 2cb4 	ldrb.w	r2, [r3, #-180]
 80024d2:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80024d6:	b292      	uxth	r2, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80024de:	440b      	add	r3, r1
 80024e0:	f823 2c2a 	strh.w	r2, [r3, #-42]
								localRx.getSensors.sensors[ix].data += (rawRx.bytes[4 + (PM_SIZE_OF_SENSOR_STRUCT * ix)] << 8);
 80024e4:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80024ee:	4413      	add	r3, r2
 80024f0:	f833 1c2a 	ldrh.w	r1, [r3, #-42]
 80024f4:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	3304      	adds	r3, #4
 8002502:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8002506:	4413      	add	r3, r2
 8002508:	f813 3cb4 	ldrb.w	r3, [r3, #-180]
 800250c:	b29b      	uxth	r3, r3
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	b29a      	uxth	r2, r3
 8002512:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8002516:	440a      	add	r2, r1
 8002518:	b292      	uxth	r2, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8002520:	440b      	add	r3, r1
 8002522:	f823 2c2a 	strh.w	r2, [r3, #-42]
								localRx.getSensors.sensors[ix].data += (rawRx.bytes[5 + (PM_SIZE_OF_SENSOR_STRUCT * ix)] << 16);
 8002526:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800252a:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8002534:	440b      	add	r3, r1
 8002536:	f833 1c2a 	ldrh.w	r1, [r3, #-42]
 800253a:	0093      	lsls	r3, r2, #2
 800253c:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8002540:	4413      	add	r3, r2
 8002542:	460a      	mov	r2, r1
 8002544:	f823 2c2a 	strh.w	r2, [r3, #-42]
								localRx.getSensors.sensors[ix].data += (rawRx.bytes[6 + (PM_SIZE_OF_SENSOR_STRUCT * ix)] << 24);
 8002548:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800254c:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8002556:	440b      	add	r3, r1
 8002558:	f833 1c2a 	ldrh.w	r1, [r3, #-42]
 800255c:	0093      	lsls	r3, r2, #2
 800255e:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8002562:	4413      	add	r3, r2
 8002564:	460a      	mov	r2, r1
 8002566:	f823 2c2a 	strh.w	r2, [r3, #-42]
								rc = PM_PROTOCOL_SUCCESS;
 800256a:	2300      	movs	r3, #0
 800256c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
							for (uint8_t ix = 0; ix < localRx.getSensors.numSensors; ix++)
 8002570:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8002574:	3301      	adds	r3, #1
 8002576:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 800257a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800257e:	b29a      	uxth	r2, r3
 8002580:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8002584:	429a      	cmp	r2, r3
 8002586:	f4ff af62 	bcc.w	800244e <pmProtocolRead+0x14a>
                    break;
 800258a:	e01a      	b.n	80025c2 <pmProtocolRead+0x2be>
                        	DEBUG_PRINTF("[pm_protocol_RX] Received an invalid sensor payload.\r\n");
 800258c:	4818      	ldr	r0, [pc, #96]	; (80025f0 <pmProtocolRead+0x2ec>)
 800258e:	f000 f84b 	bl	8002628 <debug>
                    break;
 8002592:	e016      	b.n	80025c2 <pmProtocolRead+0x2be>
                    if (rawRx.numBytes == 2)
 8002594:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8002598:	2b02      	cmp	r3, #2
 800259a:	d114      	bne.n	80025c6 <pmProtocolRead+0x2c2>
                        localRx.writeStatus.status = rawRx.bytes[1];
 800259c:	7b7b      	ldrb	r3, [r7, #13]
 800259e:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
                        rc = PM_PROTOCOL_SUCCESS;
 80025a2:	2300      	movs	r3, #0
 80025a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                    break;
 80025a8:	e00d      	b.n	80025c6 <pmProtocolRead+0x2c2>
                    rc = PM_PROTOCOL_SUCCESS;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                    break;
 80025b0:	e00a      	b.n	80025c8 <pmProtocolRead+0x2c4>
            }
        }
 80025b2:	bf00      	nop
 80025b4:	e008      	b.n	80025c8 <pmProtocolRead+0x2c4>
                    break;
 80025b6:	bf00      	nop
 80025b8:	e006      	b.n	80025c8 <pmProtocolRead+0x2c4>
                    break;
 80025ba:	bf00      	nop
 80025bc:	e004      	b.n	80025c8 <pmProtocolRead+0x2c4>
                    break;
 80025be:	bf00      	nop
 80025c0:	e002      	b.n	80025c8 <pmProtocolRead+0x2c4>
                    break;
 80025c2:	bf00      	nop
 80025c4:	e000      	b.n	80025c8 <pmProtocolRead+0x2c4>
                    break;
 80025c6:	bf00      	nop
    }

    if (PM_PROTOCOL_SUCCESS == rc)
 80025c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d106      	bne.n	80025de <pmProtocolRead+0x2da>
    {
        (void)memcpy(rx, &localRx, sizeof(localRx));
 80025d0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80025d4:	2228      	movs	r2, #40	; 0x28
 80025d6:	4619      	mov	r1, r3
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f005 fa63 	bl	8007aa4 <memcpy>
    }

    return rc;
 80025de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	37c0      	adds	r7, #192	; 0xc0
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	aaaaaaab 	.word	0xaaaaaaab
 80025f0:	08007d78 	.word	0x08007d78

080025f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4a07      	ldr	r2, [pc, #28]	; (8002620 <vApplicationGetIdleTaskMemory+0x2c>)
 8002604:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	4a06      	ldr	r2, [pc, #24]	; (8002624 <vApplicationGetIdleTaskMemory+0x30>)
 800260a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2280      	movs	r2, #128	; 0x80
 8002610:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002612:	bf00      	nop
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	200000b0 	.word	0x200000b0
 8002624:	20000104 	.word	0x20000104

08002628 <debug>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void debug(const char * string) {
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
	uint32_t length = strlen(string);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7fd fdcd 	bl	80001d0 <strlen>
 8002636:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(&huart2,(uint8_t *) string, length, 5);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	b29a      	uxth	r2, r3
 800263c:	2305      	movs	r3, #5
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4803      	ldr	r0, [pc, #12]	; (8002650 <debug+0x28>)
 8002642:	f003 fb3b 	bl	8005cbc <HAL_UART_Transmit>
}
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200012f8 	.word	0x200012f8

08002654 <pmSlaveUartTx>:

static int pmSlaveUartTx(const uint8_t * data, uint8_t numBytes) {
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	70fb      	strb	r3, [r7, #3]
	if ((HAL_UART_Transmit(&huart1, (uint8_t *)data, numBytes, 5) == HAL_OK)) {
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	b29a      	uxth	r2, r3
 8002664:	2305      	movs	r3, #5
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4806      	ldr	r0, [pc, #24]	; (8002684 <pmSlaveUartTx+0x30>)
 800266a:	f003 fb27 	bl	8005cbc <HAL_UART_Transmit>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <pmSlaveUartTx+0x24>
		return numBytes;
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	e000      	b.n	800267a <pmSlaveUartTx+0x26>
	}
	return 0;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20001274 	.word	0x20001274

08002688 <pmSlaveUartRx>:

static int pmSlaveUartRx(uint8_t * data, uint8_t numBytes) {
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	70fb      	strb	r3, [r7, #3]
	if ((HAL_UART_Receive(&huart1, data, numBytes, 500) == HAL_OK)) {
 8002694:	78fb      	ldrb	r3, [r7, #3]
 8002696:	b29a      	uxth	r2, r3
 8002698:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4806      	ldr	r0, [pc, #24]	; (80026b8 <pmSlaveUartRx+0x30>)
 80026a0:	f003 fba0 	bl	8005de4 <HAL_UART_Receive>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <pmSlaveUartRx+0x26>
		return numBytes;
 80026aa:	78fb      	ldrb	r3, [r7, #3]
 80026ac:	e000      	b.n	80026b0 <pmSlaveUartRx+0x28>
	}
	return 0;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20001274 	.word	0x20001274

080026bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026bc:	b5b0      	push	{r4, r5, r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026c2:	f000 fc89 	bl	8002fd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026c6:	f000 f863 	bl	8002790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026ca:	f000 f97b 	bl	80029c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80026ce:	f000 f949 	bl	8002964 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80026d2:	f000 f8d7 	bl	8002884 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80026d6:	f000 f915 	bl	8002904 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	if (PM_PROTOCOL_SUCCESS
			!= pmProtocolInit(&slave_uart_drivers, &slave_uart)) {
 80026da:	491f      	ldr	r1, [pc, #124]	; (8002758 <main+0x9c>)
 80026dc:	481f      	ldr	r0, [pc, #124]	; (800275c <main+0xa0>)
 80026de:	f7ff fadb 	bl	8001c98 <pmProtocolInit>
 80026e2:	4603      	mov	r3, r0
	if (PM_PROTOCOL_SUCCESS
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <main+0x32>
		debug("Error! PM protocol initialized failed\n");
 80026e8:	481d      	ldr	r0, [pc, #116]	; (8002760 <main+0xa4>)
 80026ea:	f7ff ff9d 	bl	8002628 <debug>
	}

	if (BME680_OK != bme680_initialize(&bme_init_array[BME_I2C1]))
 80026ee:	481d      	ldr	r0, [pc, #116]	; (8002764 <main+0xa8>)
 80026f0:	f7fd ffb6 	bl	8000660 <bme680_initialize>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <main+0x44>
	{
		debug("Error! BME680 initialized failed\r\n");
 80026fa:	481b      	ldr	r0, [pc, #108]	; (8002768 <main+0xac>)
 80026fc:	f7ff ff94 	bl	8002628 <debug>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002700:	4b1a      	ldr	r3, [pc, #104]	; (800276c <main+0xb0>)
 8002702:	463c      	mov	r4, r7
 8002704:	461d      	mov	r5, r3
 8002706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800270a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800270e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002712:	463b      	mov	r3, r7
 8002714:	2100      	movs	r1, #0
 8002716:	4618      	mov	r0, r3
 8002718:	f004 f846 	bl	80067a8 <osThreadCreate>
 800271c:	4603      	mov	r3, r0
 800271e:	4a14      	ldr	r2, [pc, #80]	; (8002770 <main+0xb4>)
 8002720:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  char *SOFTWARE_VERSION_STR = "polymath-iot/slave-app";
 8002722:	4b14      	ldr	r3, [pc, #80]	; (8002774 <main+0xb8>)
 8002724:	61fb      	str	r3, [r7, #28]

  debug( "##########################\r\n");
 8002726:	4814      	ldr	r0, [pc, #80]	; (8002778 <main+0xbc>)
 8002728:	f7ff ff7e 	bl	8002628 <debug>
  debug("Polymath IoT Application (Slave)\r\n");
 800272c:	4813      	ldr	r0, [pc, #76]	; (800277c <main+0xc0>)
 800272e:	f7ff ff7b 	bl	8002628 <debug>
  debug( "SW Version: ");
 8002732:	4813      	ldr	r0, [pc, #76]	; (8002780 <main+0xc4>)
 8002734:	f7ff ff78 	bl	8002628 <debug>
  debug( SOFTWARE_VERSION_STR );
 8002738:	69f8      	ldr	r0, [r7, #28]
 800273a:	f7ff ff75 	bl	8002628 <debug>
  debug( "\r\n" );
 800273e:	4811      	ldr	r0, [pc, #68]	; (8002784 <main+0xc8>)
 8002740:	f7ff ff72 	bl	8002628 <debug>
  debug( __DATE__ " " __TIME__ "\r\n" );
 8002744:	4810      	ldr	r0, [pc, #64]	; (8002788 <main+0xcc>)
 8002746:	f7ff ff6f 	bl	8002628 <debug>
  debug( "##########################\r\n\r\n");
 800274a:	4810      	ldr	r0, [pc, #64]	; (800278c <main+0xd0>)
 800274c:	f7ff ff6c 	bl	8002628 <debug>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002750:	f004 f823 	bl	800679a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002754:	e7fe      	b.n	8002754 <main+0x98>
 8002756:	bf00      	nop
 8002758:	20000304 	.word	0x20000304
 800275c:	20000068 	.word	0x20000068
 8002760:	08007dbc 	.word	0x08007dbc
 8002764:	20000000 	.word	0x20000000
 8002768:	08007de4 	.word	0x08007de4
 800276c:	08007eb0 	.word	0x08007eb0
 8002770:	20001224 	.word	0x20001224
 8002774:	08007e08 	.word	0x08007e08
 8002778:	08007e20 	.word	0x08007e20
 800277c:	08007e40 	.word	0x08007e40
 8002780:	08007e64 	.word	0x08007e64
 8002784:	08007e74 	.word	0x08007e74
 8002788:	08007e78 	.word	0x08007e78
 800278c:	08007e90 	.word	0x08007e90

08002790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b0b8      	sub	sp, #224	; 0xe0
 8002794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002796:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800279a:	2244      	movs	r2, #68	; 0x44
 800279c:	2100      	movs	r1, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	f005 f98e 	bl	8007ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027a4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027b4:	463b      	mov	r3, r7
 80027b6:	2288      	movs	r2, #136	; 0x88
 80027b8:	2100      	movs	r1, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f005 f980 	bl	8007ac0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027c0:	2302      	movs	r3, #2
 80027c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027ce:	2310      	movs	r3, #16
 80027d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027d4:	2302      	movs	r3, #2
 80027d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027da:	2302      	movs	r3, #2
 80027dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80027e0:	2301      	movs	r3, #1
 80027e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80027e6:	230a      	movs	r3, #10
 80027e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80027ec:	2307      	movs	r3, #7
 80027ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80027f2:	2302      	movs	r3, #2
 80027f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80027f8:	2302      	movs	r3, #2
 80027fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002802:	4618      	mov	r0, r3
 8002804:	f001 fc60 	bl	80040c8 <HAL_RCC_OscConfig>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800280e:	f000 fa2b 	bl	8002c68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002812:	230f      	movs	r3, #15
 8002814:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002818:	2303      	movs	r3, #3
 800281a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800281e:	2300      	movs	r3, #0
 8002820:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002824:	2300      	movs	r3, #0
 8002826:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800282a:	2300      	movs	r3, #0
 800282c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002830:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002834:	2104      	movs	r1, #4
 8002836:	4618      	mov	r0, r3
 8002838:	f002 f82c 	bl	8004894 <HAL_RCC_ClockConfig>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002842:	f000 fa11 	bl	8002c68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002846:	2343      	movs	r3, #67	; 0x43
 8002848:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800284a:	2300      	movs	r3, #0
 800284c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800284e:	2300      	movs	r3, #0
 8002850:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002852:	2300      	movs	r3, #0
 8002854:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002856:	463b      	mov	r3, r7
 8002858:	4618      	mov	r0, r3
 800285a:	f002 fa53 	bl	8004d04 <HAL_RCCEx_PeriphCLKConfig>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8002864:	f000 fa00 	bl	8002c68 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002868:	f44f 7000 	mov.w	r0, #512	; 0x200
 800286c:	f001 fbd6 	bl	800401c <HAL_PWREx_ControlVoltageScaling>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8002876:	f000 f9f7 	bl	8002c68 <Error_Handler>
  }
}
 800287a:	bf00      	nop
 800287c:	37e0      	adds	r7, #224	; 0xe0
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002888:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <MX_I2C1_Init+0x74>)
 800288a:	4a1c      	ldr	r2, [pc, #112]	; (80028fc <MX_I2C1_Init+0x78>)
 800288c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800288e:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <MX_I2C1_Init+0x74>)
 8002890:	4a1b      	ldr	r2, [pc, #108]	; (8002900 <MX_I2C1_Init+0x7c>)
 8002892:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002894:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <MX_I2C1_Init+0x74>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800289a:	4b17      	ldr	r3, [pc, #92]	; (80028f8 <MX_I2C1_Init+0x74>)
 800289c:	2201      	movs	r2, #1
 800289e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028a0:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <MX_I2C1_Init+0x74>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80028a6:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <MX_I2C1_Init+0x74>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028ac:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <MX_I2C1_Init+0x74>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028b2:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <MX_I2C1_Init+0x74>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028b8:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <MX_I2C1_Init+0x74>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028be:	480e      	ldr	r0, [pc, #56]	; (80028f8 <MX_I2C1_Init+0x74>)
 80028c0:	f000 feac 	bl	800361c <HAL_I2C_Init>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80028ca:	f000 f9cd 	bl	8002c68 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80028ce:	2100      	movs	r1, #0
 80028d0:	4809      	ldr	r0, [pc, #36]	; (80028f8 <MX_I2C1_Init+0x74>)
 80028d2:	f001 fafd 	bl	8003ed0 <HAL_I2CEx_ConfigAnalogFilter>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80028dc:	f000 f9c4 	bl	8002c68 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80028e0:	2100      	movs	r1, #0
 80028e2:	4805      	ldr	r0, [pc, #20]	; (80028f8 <MX_I2C1_Init+0x74>)
 80028e4:	f001 fb3f 	bl	8003f66 <HAL_I2CEx_ConfigDigitalFilter>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80028ee:	f000 f9bb 	bl	8002c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20001228 	.word	0x20001228
 80028fc:	40005400 	.word	0x40005400
 8002900:	10909cec 	.word	0x10909cec

08002904 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002908:	4b14      	ldr	r3, [pc, #80]	; (800295c <MX_USART1_UART_Init+0x58>)
 800290a:	4a15      	ldr	r2, [pc, #84]	; (8002960 <MX_USART1_UART_Init+0x5c>)
 800290c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800290e:	4b13      	ldr	r3, [pc, #76]	; (800295c <MX_USART1_UART_Init+0x58>)
 8002910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002914:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002916:	4b11      	ldr	r3, [pc, #68]	; (800295c <MX_USART1_UART_Init+0x58>)
 8002918:	2200      	movs	r2, #0
 800291a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800291c:	4b0f      	ldr	r3, [pc, #60]	; (800295c <MX_USART1_UART_Init+0x58>)
 800291e:	2200      	movs	r2, #0
 8002920:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002922:	4b0e      	ldr	r3, [pc, #56]	; (800295c <MX_USART1_UART_Init+0x58>)
 8002924:	2200      	movs	r2, #0
 8002926:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002928:	4b0c      	ldr	r3, [pc, #48]	; (800295c <MX_USART1_UART_Init+0x58>)
 800292a:	220c      	movs	r2, #12
 800292c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800292e:	4b0b      	ldr	r3, [pc, #44]	; (800295c <MX_USART1_UART_Init+0x58>)
 8002930:	2200      	movs	r2, #0
 8002932:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002934:	4b09      	ldr	r3, [pc, #36]	; (800295c <MX_USART1_UART_Init+0x58>)
 8002936:	2200      	movs	r2, #0
 8002938:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800293a:	4b08      	ldr	r3, [pc, #32]	; (800295c <MX_USART1_UART_Init+0x58>)
 800293c:	2200      	movs	r2, #0
 800293e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <MX_USART1_UART_Init+0x58>)
 8002942:	2200      	movs	r2, #0
 8002944:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002946:	4805      	ldr	r0, [pc, #20]	; (800295c <MX_USART1_UART_Init+0x58>)
 8002948:	f003 f96a 	bl	8005c20 <HAL_UART_Init>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002952:	f000 f989 	bl	8002c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20001274 	.word	0x20001274
 8002960:	40013800 	.word	0x40013800

08002964 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002968:	4b14      	ldr	r3, [pc, #80]	; (80029bc <MX_USART2_UART_Init+0x58>)
 800296a:	4a15      	ldr	r2, [pc, #84]	; (80029c0 <MX_USART2_UART_Init+0x5c>)
 800296c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800296e:	4b13      	ldr	r3, [pc, #76]	; (80029bc <MX_USART2_UART_Init+0x58>)
 8002970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002974:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002976:	4b11      	ldr	r3, [pc, #68]	; (80029bc <MX_USART2_UART_Init+0x58>)
 8002978:	2200      	movs	r2, #0
 800297a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800297c:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <MX_USART2_UART_Init+0x58>)
 800297e:	2200      	movs	r2, #0
 8002980:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002982:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <MX_USART2_UART_Init+0x58>)
 8002984:	2200      	movs	r2, #0
 8002986:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <MX_USART2_UART_Init+0x58>)
 800298a:	220c      	movs	r2, #12
 800298c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800298e:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <MX_USART2_UART_Init+0x58>)
 8002990:	2200      	movs	r2, #0
 8002992:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002994:	4b09      	ldr	r3, [pc, #36]	; (80029bc <MX_USART2_UART_Init+0x58>)
 8002996:	2200      	movs	r2, #0
 8002998:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800299a:	4b08      	ldr	r3, [pc, #32]	; (80029bc <MX_USART2_UART_Init+0x58>)
 800299c:	2200      	movs	r2, #0
 800299e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <MX_USART2_UART_Init+0x58>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029a6:	4805      	ldr	r0, [pc, #20]	; (80029bc <MX_USART2_UART_Init+0x58>)
 80029a8:	f003 f93a 	bl	8005c20 <HAL_UART_Init>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80029b2:	f000 f959 	bl	8002c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	200012f8 	.word	0x200012f8
 80029c0:	40004400 	.word	0x40004400

080029c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08a      	sub	sp, #40	; 0x28
 80029c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ca:	f107 0314 	add.w	r3, r7, #20
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	605a      	str	r2, [r3, #4]
 80029d4:	609a      	str	r2, [r3, #8]
 80029d6:	60da      	str	r2, [r3, #12]
 80029d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029da:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <MX_GPIO_Init+0xc4>)
 80029dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029de:	4a2a      	ldr	r2, [pc, #168]	; (8002a88 <MX_GPIO_Init+0xc4>)
 80029e0:	f043 0304 	orr.w	r3, r3, #4
 80029e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029e6:	4b28      	ldr	r3, [pc, #160]	; (8002a88 <MX_GPIO_Init+0xc4>)
 80029e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029f2:	4b25      	ldr	r3, [pc, #148]	; (8002a88 <MX_GPIO_Init+0xc4>)
 80029f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f6:	4a24      	ldr	r2, [pc, #144]	; (8002a88 <MX_GPIO_Init+0xc4>)
 80029f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029fe:	4b22      	ldr	r3, [pc, #136]	; (8002a88 <MX_GPIO_Init+0xc4>)
 8002a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0a:	4b1f      	ldr	r3, [pc, #124]	; (8002a88 <MX_GPIO_Init+0xc4>)
 8002a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0e:	4a1e      	ldr	r2, [pc, #120]	; (8002a88 <MX_GPIO_Init+0xc4>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a16:	4b1c      	ldr	r3, [pc, #112]	; (8002a88 <MX_GPIO_Init+0xc4>)
 8002a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a22:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <MX_GPIO_Init+0xc4>)
 8002a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a26:	4a18      	ldr	r2, [pc, #96]	; (8002a88 <MX_GPIO_Init+0xc4>)
 8002a28:	f043 0302 	orr.w	r3, r3, #2
 8002a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a2e:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <MX_GPIO_Init+0xc4>)
 8002a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	607b      	str	r3, [r7, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2120      	movs	r1, #32
 8002a3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a42:	f000 fdb9 	bl	80035b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <MX_GPIO_Init+0xc8>)
 8002a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a54:	f107 0314 	add.w	r3, r7, #20
 8002a58:	4619      	mov	r1, r3
 8002a5a:	480d      	ldr	r0, [pc, #52]	; (8002a90 <MX_GPIO_Init+0xcc>)
 8002a5c:	f000 fc02 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002a60:	2320      	movs	r3, #32
 8002a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a64:	2301      	movs	r3, #1
 8002a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002a70:	f107 0314 	add.w	r3, r7, #20
 8002a74:	4619      	mov	r1, r3
 8002a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a7a:	f000 fbf3 	bl	8003264 <HAL_GPIO_Init>

}
 8002a7e:	bf00      	nop
 8002a80:	3728      	adds	r7, #40	; 0x28
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	10210000 	.word	0x10210000
 8002a90:	48000800 	.word	0x48000800

08002a94 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002a94:	b590      	push	{r4, r7, lr}
 8002a96:	b09d      	sub	sp, #116	; 0x74
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
#define LED_BLINK_RATE_ms (1000u)

#define LED_PORT LD2_GPIO_Port
#define LED_PIN  LD2_Pin

  TickType_t lastLedTicks = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* Infinite loop */
  for(;;)
  {
    TickType_t nowTicks = xTaskGetTickCount();
 8002aa0:	f004 f9e6 	bl	8006e70 <xTaskGetTickCount>
 8002aa4:	6678      	str	r0, [r7, #100]	; 0x64
	uint32_t nowTicks_ms = nowTicks * 1000 / configTICK_RATE_HZ;
 8002aa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002aac:	fb02 f303 	mul.w	r3, r2, r3
 8002ab0:	4a5c      	ldr	r2, [pc, #368]	; (8002c24 <StartDefaultTask+0x190>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	099b      	lsrs	r3, r3, #6
 8002ab8:	663b      	str	r3, [r7, #96]	; 0x60
	pmProtocolPeriodic(nowTicks_ms, &slave_uart);
 8002aba:	495b      	ldr	r1, [pc, #364]	; (8002c28 <StartDefaultTask+0x194>)
 8002abc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002abe:	f7ff f9ad 	bl	8001e1c <pmProtocolPeriodic>

	if ((nowTicks - lastLedTicks) > pdMS_TO_TICKS(LED_BLINK_RATE_ms))
 8002ac2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002acc:	d906      	bls.n	8002adc <StartDefaultTask+0x48>
	{
	    HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 8002ace:	2120      	movs	r1, #32
 8002ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ad4:	f000 fd88 	bl	80035e8 <HAL_GPIO_TogglePin>
	    lastLedTicks = nowTicks;
 8002ad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ada:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	// Check for reads on the slave node.
	pmCmdPayloadDefinition_t slaveRx;

	if (PM_PROTOCOL_SUCCESS == pmProtocolRead(&slaveRx, &slave_uart))
 8002adc:	f107 030c 	add.w	r3, r7, #12
 8002ae0:	4951      	ldr	r1, [pc, #324]	; (8002c28 <StartDefaultTask+0x194>)
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fc0e 	bl	8002304 <pmProtocolRead>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f040 808a 	bne.w	8002c04 <StartDefaultTask+0x170>
	{
		debug("Successfully read a payload on the slave node. Responding\r\n");
 8002af0:	484e      	ldr	r0, [pc, #312]	; (8002c2c <StartDefaultTask+0x198>)
 8002af2:	f7ff fd99 	bl	8002628 <debug>
		switch (slaveRx.commandCode & 0x7F)
 8002af6:	7b3b      	ldrb	r3, [r7, #12]
 8002af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d01c      	beq.n	8002b3a <StartDefaultTask+0xa6>
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	dc7b      	bgt.n	8002bfc <StartDefaultTask+0x168>
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <StartDefaultTask+0x7a>
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d02c      	beq.n	8002b66 <StartDefaultTask+0xd2>
 8002b0c:	e076      	b.n	8002bfc <StartDefaultTask+0x168>
		{
			case PM_CMD_PROTOCOL_ID:
			{
				// Transmit the current protocol ID.
				pmCmdPayloadDefinition_t slaveTx;
				slaveTx.commandCode = slaveRx.commandCode | PM_PROTOCOL_RESP_MASK;
 8002b0e:	7b3b      	ldrb	r3, [r7, #12]
 8002b10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				slaveTx.protocolInfo.protocolIdentifier = PM_PROTOCOL_IDENTIFIER;
 8002b1a:	f04f 3305 	mov.w	r3, #84215045	; 0x5050505
 8002b1e:	63bb      	str	r3, [r7, #56]	; 0x38

				if (PM_PROTOCOL_SUCCESS != pmProtocolSend(&slaveTx, &slave_uart))
 8002b20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b24:	4940      	ldr	r1, [pc, #256]	; (8002c28 <StartDefaultTask+0x194>)
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff fac6 	bl	80020b8 <pmProtocolSend>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d06a      	beq.n	8002c08 <StartDefaultTask+0x174>
				{
					debug("Error: Failed to transmit response from slave.\r\n");
 8002b32:	483f      	ldr	r0, [pc, #252]	; (8002c30 <StartDefaultTask+0x19c>)
 8002b34:	f7ff fd78 	bl	8002628 <debug>
				}
				break;
 8002b38:	e066      	b.n	8002c08 <StartDefaultTask+0x174>
			}
			case PM_CMD_WRITE_STATUS:
			{
				// Echo back the status.
				pmCmdPayloadDefinition_t slaveTx;
				slaveTx.commandCode = slaveRx.commandCode | PM_PROTOCOL_RESP_MASK;
 8002b3a:	7b3b      	ldrb	r3, [r7, #12]
 8002b3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				slaveTx.writeStatus.status = slaveRx.writeStatus.status;
 8002b46:	7c3b      	ldrb	r3, [r7, #16]
 8002b48:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

				if (PM_PROTOCOL_SUCCESS != pmProtocolSend(&slaveTx, &slave_uart))
 8002b4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b50:	4935      	ldr	r1, [pc, #212]	; (8002c28 <StartDefaultTask+0x194>)
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fab0 	bl	80020b8 <pmProtocolSend>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d056      	beq.n	8002c0c <StartDefaultTask+0x178>
				{
					debug("Error: Failed to transmit response from slave.\r\n");
 8002b5e:	4834      	ldr	r0, [pc, #208]	; (8002c30 <StartDefaultTask+0x19c>)
 8002b60:	f7ff fd62 	bl	8002628 <debug>
				}
				break;
 8002b64:	e052      	b.n	8002c0c <StartDefaultTask+0x178>
			}
			case PM_CMD_GET_SENSORS:
			{
				// Respond with some dummy data.
				pmCmdPayloadDefinition_t slaveTx;
				slaveTx.commandCode = slaveRx.commandCode | PM_PROTOCOL_RESP_MASK;
 8002b66:	7b3b      	ldrb	r3, [r7, #12]
 8002b68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				slaveTx.getSensors.numSensors = NUM_SENSOR_IDS;
 8002b72:	2303      	movs	r3, #3
 8002b74:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
				for (int ix = 0; ix < slaveTx.getSensors.numSensors; ix++)
 8002b78:	2300      	movs	r3, #0
 8002b7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b7c:	e02b      	b.n	8002bd6 <StartDefaultTask+0x142>
				{
					slaveTx.getSensors.sensors[ix].sensorId = ix;
 8002b7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002b8a:	440b      	add	r3, r1
 8002b8c:	f823 2c38 	strh.w	r2, [r3, #-56]

					int32_t reading;
					if (SENSOR_SUCCESS != sensorTable[ix].drivers->getReading(&reading, 0, sensorTable[ix].params))
 8002b90:	4a28      	ldr	r2, [pc, #160]	; (8002c34 <StartDefaultTask+0x1a0>)
 8002b92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b98:	681c      	ldr	r4, [r3, #0]
 8002b9a:	4a26      	ldr	r2, [pc, #152]	; (8002c34 <StartDefaultTask+0x1a0>)
 8002b9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4618      	mov	r0, r3
 8002bac:	47a0      	blx	r4
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d004      	beq.n	8002bbe <StartDefaultTask+0x12a>
					{
						debug("Error: Failed to read data from sensor.\r\n");
 8002bb4:	4820      	ldr	r0, [pc, #128]	; (8002c38 <StartDefaultTask+0x1a4>)
 8002bb6:	f7ff fd37 	bl	8002628 <debug>
						reading = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
					}
					slaveTx.getSensors.sensors[ix].data = reading;
 8002bbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002bca:	440b      	add	r3, r1
 8002bcc:	f823 2c36 	strh.w	r2, [r3, #-54]
				for (int ix = 0; ix < slaveTx.getSensors.numSensors; ix++)
 8002bd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bd6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002bda:	461a      	mov	r2, r3
 8002bdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bde:	4293      	cmp	r3, r2
 8002be0:	dbcd      	blt.n	8002b7e <StartDefaultTask+0xea>
				}

				if (PM_PROTOCOL_SUCCESS != pmProtocolSend(&slaveTx, &slave_uart))
 8002be2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002be6:	4910      	ldr	r1, [pc, #64]	; (8002c28 <StartDefaultTask+0x194>)
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fa65 	bl	80020b8 <pmProtocolSend>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00d      	beq.n	8002c10 <StartDefaultTask+0x17c>
				{
					debug("Error: Failed to transmit response from slave.\r\n");
 8002bf4:	480e      	ldr	r0, [pc, #56]	; (8002c30 <StartDefaultTask+0x19c>)
 8002bf6:	f7ff fd17 	bl	8002628 <debug>
				}
				break;
 8002bfa:	e009      	b.n	8002c10 <StartDefaultTask+0x17c>
			}
			default:
				debug("Received unhandled command on the slave.\r\n");
 8002bfc:	480f      	ldr	r0, [pc, #60]	; (8002c3c <StartDefaultTask+0x1a8>)
 8002bfe:	f7ff fd13 	bl	8002628 <debug>
				break;
 8002c02:	e006      	b.n	8002c12 <StartDefaultTask+0x17e>
		}
	}
 8002c04:	bf00      	nop
 8002c06:	e004      	b.n	8002c12 <StartDefaultTask+0x17e>
				break;
 8002c08:	bf00      	nop
 8002c0a:	e002      	b.n	8002c12 <StartDefaultTask+0x17e>
				break;
 8002c0c:	bf00      	nop
 8002c0e:	e000      	b.n	8002c12 <StartDefaultTask+0x17e>
				break;
 8002c10:	bf00      	nop

	//vTaskDelayUntil(&lastWakeupTicks, pdMS_TO_TICKS(MAIN_TICK_RATE_ms));
	taskYIELD();
 8002c12:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <StartDefaultTask+0x1ac>)
 8002c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	f3bf 8f6f 	isb	sy
  {
 8002c22:	e73d      	b.n	8002aa0 <StartDefaultTask+0xc>
 8002c24:	10624dd3 	.word	0x10624dd3
 8002c28:	20000304 	.word	0x20000304
 8002c2c:	08007ecc 	.word	0x08007ecc
 8002c30:	08007f08 	.word	0x08007f08
 8002c34:	08007fa0 	.word	0x08007fa0
 8002c38:	08007f3c 	.word	0x08007f3c
 8002c3c:	08007f68 	.word	0x08007f68
 8002c40:	e000ed04 	.word	0xe000ed04

08002c44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d101      	bne.n	8002c5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c56:	f000 f9df 	bl	8003018 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40001000 	.word	0x40001000

08002c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c6c:	b672      	cpsid	i
}
 8002c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c70:	e7fe      	b.n	8002c70 <Error_Handler+0x8>
	...

08002c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7a:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <HAL_MspInit+0x4c>)
 8002c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c7e:	4a10      	ldr	r2, [pc, #64]	; (8002cc0 <HAL_MspInit+0x4c>)
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6613      	str	r3, [r2, #96]	; 0x60
 8002c86:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <HAL_MspInit+0x4c>)
 8002c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c92:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_MspInit+0x4c>)
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <HAL_MspInit+0x4c>)
 8002c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c9e:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <HAL_MspInit+0x4c>)
 8002ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002caa:	2200      	movs	r2, #0
 8002cac:	210f      	movs	r1, #15
 8002cae:	f06f 0001 	mvn.w	r0, #1
 8002cb2:	f000 faad 	bl	8003210 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40021000 	.word	0x40021000

08002cc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	; 0x28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a17      	ldr	r2, [pc, #92]	; (8002d40 <HAL_I2C_MspInit+0x7c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d128      	bne.n	8002d38 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce6:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <HAL_I2C_MspInit+0x80>)
 8002ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cea:	4a16      	ldr	r2, [pc, #88]	; (8002d44 <HAL_I2C_MspInit+0x80>)
 8002cec:	f043 0302 	orr.w	r3, r3, #2
 8002cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cf2:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <HAL_I2C_MspInit+0x80>)
 8002cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002cfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d04:	2312      	movs	r3, #18
 8002d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d10:	2304      	movs	r3, #4
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d14:	f107 0314 	add.w	r3, r7, #20
 8002d18:	4619      	mov	r1, r3
 8002d1a:	480b      	ldr	r0, [pc, #44]	; (8002d48 <HAL_I2C_MspInit+0x84>)
 8002d1c:	f000 faa2 	bl	8003264 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <HAL_I2C_MspInit+0x80>)
 8002d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d24:	4a07      	ldr	r2, [pc, #28]	; (8002d44 <HAL_I2C_MspInit+0x80>)
 8002d26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d2a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_I2C_MspInit+0x80>)
 8002d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d38:	bf00      	nop
 8002d3a:	3728      	adds	r7, #40	; 0x28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40005400 	.word	0x40005400
 8002d44:	40021000 	.word	0x40021000
 8002d48:	48000400 	.word	0x48000400

08002d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08c      	sub	sp, #48	; 0x30
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d54:	f107 031c 	add.w	r3, r7, #28
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	605a      	str	r2, [r3, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	60da      	str	r2, [r3, #12]
 8002d62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a2f      	ldr	r2, [pc, #188]	; (8002e28 <HAL_UART_MspInit+0xdc>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d12a      	bne.n	8002dc4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d6e:	4b2f      	ldr	r3, [pc, #188]	; (8002e2c <HAL_UART_MspInit+0xe0>)
 8002d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d72:	4a2e      	ldr	r2, [pc, #184]	; (8002e2c <HAL_UART_MspInit+0xe0>)
 8002d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d78:	6613      	str	r3, [r2, #96]	; 0x60
 8002d7a:	4b2c      	ldr	r3, [pc, #176]	; (8002e2c <HAL_UART_MspInit+0xe0>)
 8002d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d82:	61bb      	str	r3, [r7, #24]
 8002d84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d86:	4b29      	ldr	r3, [pc, #164]	; (8002e2c <HAL_UART_MspInit+0xe0>)
 8002d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8a:	4a28      	ldr	r2, [pc, #160]	; (8002e2c <HAL_UART_MspInit+0xe0>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d92:	4b26      	ldr	r3, [pc, #152]	; (8002e2c <HAL_UART_MspInit+0xe0>)
 8002d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d9e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da4:	2302      	movs	r3, #2
 8002da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dac:	2303      	movs	r3, #3
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002db0:	2307      	movs	r3, #7
 8002db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db4:	f107 031c 	add.w	r3, r7, #28
 8002db8:	4619      	mov	r1, r3
 8002dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dbe:	f000 fa51 	bl	8003264 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002dc2:	e02d      	b.n	8002e20 <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a19      	ldr	r2, [pc, #100]	; (8002e30 <HAL_UART_MspInit+0xe4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d128      	bne.n	8002e20 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dce:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <HAL_UART_MspInit+0xe0>)
 8002dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd2:	4a16      	ldr	r2, [pc, #88]	; (8002e2c <HAL_UART_MspInit+0xe0>)
 8002dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd8:	6593      	str	r3, [r2, #88]	; 0x58
 8002dda:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <HAL_UART_MspInit+0xe0>)
 8002ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	613b      	str	r3, [r7, #16]
 8002de4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de6:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <HAL_UART_MspInit+0xe0>)
 8002de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dea:	4a10      	ldr	r2, [pc, #64]	; (8002e2c <HAL_UART_MspInit+0xe0>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002df2:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <HAL_UART_MspInit+0xe0>)
 8002df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002dfe:	230c      	movs	r3, #12
 8002e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e02:	2302      	movs	r3, #2
 8002e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e0e:	2307      	movs	r3, #7
 8002e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e12:	f107 031c 	add.w	r3, r7, #28
 8002e16:	4619      	mov	r1, r3
 8002e18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e1c:	f000 fa22 	bl	8003264 <HAL_GPIO_Init>
}
 8002e20:	bf00      	nop
 8002e22:	3730      	adds	r7, #48	; 0x30
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40013800 	.word	0x40013800
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	40004400 	.word	0x40004400

08002e34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08c      	sub	sp, #48	; 0x30
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002e44:	2200      	movs	r2, #0
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	2036      	movs	r0, #54	; 0x36
 8002e4a:	f000 f9e1 	bl	8003210 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e4e:	2036      	movs	r0, #54	; 0x36
 8002e50:	f000 f9fa 	bl	8003248 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002e54:	4b1e      	ldr	r3, [pc, #120]	; (8002ed0 <HAL_InitTick+0x9c>)
 8002e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e58:	4a1d      	ldr	r2, [pc, #116]	; (8002ed0 <HAL_InitTick+0x9c>)
 8002e5a:	f043 0310 	orr.w	r3, r3, #16
 8002e5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e60:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <HAL_InitTick+0x9c>)
 8002e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e64:	f003 0310 	and.w	r3, r3, #16
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e6c:	f107 0210 	add.w	r2, r7, #16
 8002e70:	f107 0314 	add.w	r3, r7, #20
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f001 feb2 	bl	8004be0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e7c:	f001 fe84 	bl	8004b88 <HAL_RCC_GetPCLK1Freq>
 8002e80:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e84:	4a13      	ldr	r2, [pc, #76]	; (8002ed4 <HAL_InitTick+0xa0>)
 8002e86:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8a:	0c9b      	lsrs	r3, r3, #18
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e90:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <HAL_InitTick+0xa4>)
 8002e92:	4a12      	ldr	r2, [pc, #72]	; (8002edc <HAL_InitTick+0xa8>)
 8002e94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002e96:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <HAL_InitTick+0xa4>)
 8002e98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e9c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e9e:	4a0e      	ldr	r2, [pc, #56]	; (8002ed8 <HAL_InitTick+0xa4>)
 8002ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <HAL_InitTick+0xa4>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <HAL_InitTick+0xa4>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002eb0:	4809      	ldr	r0, [pc, #36]	; (8002ed8 <HAL_InitTick+0xa4>)
 8002eb2:	f002 fbe3 	bl	800567c <HAL_TIM_Base_Init>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d104      	bne.n	8002ec6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002ebc:	4806      	ldr	r0, [pc, #24]	; (8002ed8 <HAL_InitTick+0xa4>)
 8002ebe:	f002 fc3f 	bl	8005740 <HAL_TIM_Base_Start_IT>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	e000      	b.n	8002ec8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3730      	adds	r7, #48	; 0x30
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	431bde83 	.word	0x431bde83
 8002ed8:	2000137c 	.word	0x2000137c
 8002edc:	40001000 	.word	0x40001000

08002ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ee4:	e7fe      	b.n	8002ee4 <NMI_Handler+0x4>

08002ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eea:	e7fe      	b.n	8002eea <HardFault_Handler+0x4>

08002eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ef0:	e7fe      	b.n	8002ef0 <MemManage_Handler+0x4>

08002ef2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ef6:	e7fe      	b.n	8002ef6 <BusFault_Handler+0x4>

08002ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002efc:	e7fe      	b.n	8002efc <UsageFault_Handler+0x4>

08002efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002efe:	b480      	push	{r7}
 8002f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f02:	bf00      	nop
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f10:	4802      	ldr	r0, [pc, #8]	; (8002f1c <TIM6_DAC_IRQHandler+0x10>)
 8002f12:	f002 fc85 	bl	8005820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	2000137c 	.word	0x2000137c

08002f20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002f24:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <SystemInit+0x5c>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2a:	4a14      	ldr	r2, [pc, #80]	; (8002f7c <SystemInit+0x5c>)
 8002f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002f34:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <SystemInit+0x60>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a11      	ldr	r2, [pc, #68]	; (8002f80 <SystemInit+0x60>)
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002f40:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <SystemInit+0x60>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002f46:	4b0e      	ldr	r3, [pc, #56]	; (8002f80 <SystemInit+0x60>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a0d      	ldr	r2, [pc, #52]	; (8002f80 <SystemInit+0x60>)
 8002f4c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002f50:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002f54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <SystemInit+0x60>)
 8002f58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f5c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f5e:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <SystemInit+0x60>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a07      	ldr	r2, [pc, #28]	; (8002f80 <SystemInit+0x60>)
 8002f64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <SystemInit+0x60>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	619a      	str	r2, [r3, #24]
}
 8002f70:	bf00      	nop
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	e000ed00 	.word	0xe000ed00
 8002f80:	40021000 	.word	0x40021000

08002f84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f88:	f7ff ffca 	bl	8002f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002f8c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002f8e:	e003      	b.n	8002f98 <LoopCopyDataInit>

08002f90 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002f92:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002f94:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002f96:	3104      	adds	r1, #4

08002f98 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002f98:	480a      	ldr	r0, [pc, #40]	; (8002fc4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002f9a:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002f9c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002f9e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002fa0:	d3f6      	bcc.n	8002f90 <CopyDataInit>
	ldr	r2, =_sbss
 8002fa2:	4a0a      	ldr	r2, [pc, #40]	; (8002fcc <LoopForever+0x12>)
	b	LoopFillZerobss
 8002fa4:	e002      	b.n	8002fac <LoopFillZerobss>

08002fa6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002fa6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002fa8:	f842 3b04 	str.w	r3, [r2], #4

08002fac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002fac:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <LoopForever+0x16>)
	cmp	r2, r3
 8002fae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002fb0:	d3f9      	bcc.n	8002fa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fb2:	f004 fd53 	bl	8007a5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002fb6:	f7ff fb81 	bl	80026bc <main>

08002fba <LoopForever>:

LoopForever:
    b LoopForever
 8002fba:	e7fe      	b.n	8002fba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002fbc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002fc0:	08008010 	.word	0x08008010
	ldr	r0, =_sdata
 8002fc4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002fc8:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 8002fcc:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 8002fd0:	200013cc 	.word	0x200013cc

08002fd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fd4:	e7fe      	b.n	8002fd4 <ADC1_2_IRQHandler>
	...

08002fd8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fe2:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <HAL_Init+0x3c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a0b      	ldr	r2, [pc, #44]	; (8003014 <HAL_Init+0x3c>)
 8002fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fee:	2003      	movs	r0, #3
 8002ff0:	f000 f903 	bl	80031fa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f7ff ff1d 	bl	8002e34 <HAL_InitTick>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	71fb      	strb	r3, [r7, #7]
 8003004:	e001      	b.n	800300a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003006:	f7ff fe35 	bl	8002c74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800300a:	79fb      	ldrb	r3, [r7, #7]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40022000 	.word	0x40022000

08003018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <HAL_IncTick+0x20>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_IncTick+0x24>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4413      	add	r3, r2
 8003028:	4a04      	ldr	r2, [pc, #16]	; (800303c <HAL_IncTick+0x24>)
 800302a:	6013      	str	r3, [r2, #0]
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	20000078 	.word	0x20000078
 800303c:	200013c8 	.word	0x200013c8

08003040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return uwTick;
 8003044:	4b03      	ldr	r3, [pc, #12]	; (8003054 <HAL_GetTick+0x14>)
 8003046:	681b      	ldr	r3, [r3, #0]
}
 8003048:	4618      	mov	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	200013c8 	.word	0x200013c8

08003058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003060:	f7ff ffee 	bl	8003040 <HAL_GetTick>
 8003064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d005      	beq.n	800307e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003072:	4b0a      	ldr	r3, [pc, #40]	; (800309c <HAL_Delay+0x44>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4413      	add	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800307e:	bf00      	nop
 8003080:	f7ff ffde 	bl	8003040 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	429a      	cmp	r2, r3
 800308e:	d8f7      	bhi.n	8003080 <HAL_Delay+0x28>
  {
  }
}
 8003090:	bf00      	nop
 8003092:	bf00      	nop
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20000078 	.word	0x20000078

080030a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <__NVIC_SetPriorityGrouping+0x44>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030bc:	4013      	ands	r3, r2
 80030be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030d2:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <__NVIC_SetPriorityGrouping+0x44>)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	60d3      	str	r3, [r2, #12]
}
 80030d8:	bf00      	nop
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030ec:	4b04      	ldr	r3, [pc, #16]	; (8003100 <__NVIC_GetPriorityGrouping+0x18>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	0a1b      	lsrs	r3, r3, #8
 80030f2:	f003 0307 	and.w	r3, r3, #7
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800310e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003112:	2b00      	cmp	r3, #0
 8003114:	db0b      	blt.n	800312e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	f003 021f 	and.w	r2, r3, #31
 800311c:	4907      	ldr	r1, [pc, #28]	; (800313c <__NVIC_EnableIRQ+0x38>)
 800311e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	2001      	movs	r0, #1
 8003126:	fa00 f202 	lsl.w	r2, r0, r2
 800312a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	e000e100 	.word	0xe000e100

08003140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	6039      	str	r1, [r7, #0]
 800314a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003150:	2b00      	cmp	r3, #0
 8003152:	db0a      	blt.n	800316a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	b2da      	uxtb	r2, r3
 8003158:	490c      	ldr	r1, [pc, #48]	; (800318c <__NVIC_SetPriority+0x4c>)
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	0112      	lsls	r2, r2, #4
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	440b      	add	r3, r1
 8003164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003168:	e00a      	b.n	8003180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	b2da      	uxtb	r2, r3
 800316e:	4908      	ldr	r1, [pc, #32]	; (8003190 <__NVIC_SetPriority+0x50>)
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	3b04      	subs	r3, #4
 8003178:	0112      	lsls	r2, r2, #4
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	440b      	add	r3, r1
 800317e:	761a      	strb	r2, [r3, #24]
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	e000e100 	.word	0xe000e100
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003194:	b480      	push	{r7}
 8003196:	b089      	sub	sp, #36	; 0x24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f1c3 0307 	rsb	r3, r3, #7
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	bf28      	it	cs
 80031b2:	2304      	movcs	r3, #4
 80031b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3304      	adds	r3, #4
 80031ba:	2b06      	cmp	r3, #6
 80031bc:	d902      	bls.n	80031c4 <NVIC_EncodePriority+0x30>
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3b03      	subs	r3, #3
 80031c2:	e000      	b.n	80031c6 <NVIC_EncodePriority+0x32>
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c8:	f04f 32ff 	mov.w	r2, #4294967295
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43da      	mvns	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	401a      	ands	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031dc:	f04f 31ff 	mov.w	r1, #4294967295
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	fa01 f303 	lsl.w	r3, r1, r3
 80031e6:	43d9      	mvns	r1, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ec:	4313      	orrs	r3, r2
         );
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3724      	adds	r7, #36	; 0x24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff ff4c 	bl	80030a0 <__NVIC_SetPriorityGrouping>
}
 8003208:	bf00      	nop
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
 800321c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003222:	f7ff ff61 	bl	80030e8 <__NVIC_GetPriorityGrouping>
 8003226:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	6978      	ldr	r0, [r7, #20]
 800322e:	f7ff ffb1 	bl	8003194 <NVIC_EncodePriority>
 8003232:	4602      	mov	r2, r0
 8003234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003238:	4611      	mov	r1, r2
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff ff80 	bl	8003140 <__NVIC_SetPriority>
}
 8003240:	bf00      	nop
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff ff54 	bl	8003104 <__NVIC_EnableIRQ>
}
 800325c:	bf00      	nop
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003272:	e17f      	b.n	8003574 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	2101      	movs	r1, #1
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	fa01 f303 	lsl.w	r3, r1, r3
 8003280:	4013      	ands	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 8171 	beq.w	800356e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d00b      	beq.n	80032ac <HAL_GPIO_Init+0x48>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b02      	cmp	r3, #2
 800329a:	d007      	beq.n	80032ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032a0:	2b11      	cmp	r3, #17
 80032a2:	d003      	beq.n	80032ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b12      	cmp	r3, #18
 80032aa:	d130      	bne.n	800330e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	2203      	movs	r2, #3
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4013      	ands	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032e2:	2201      	movs	r2, #1
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43db      	mvns	r3, r3
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4013      	ands	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	091b      	lsrs	r3, r3, #4
 80032f8:	f003 0201 	and.w	r2, r3, #1
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	2b03      	cmp	r3, #3
 8003318:	d118      	bne.n	800334c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003320:	2201      	movs	r2, #1
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4013      	ands	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	08db      	lsrs	r3, r3, #3
 8003336:	f003 0201 	and.w	r2, r3, #1
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	2203      	movs	r2, #3
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	43db      	mvns	r3, r3
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4013      	ands	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b02      	cmp	r3, #2
 8003382:	d003      	beq.n	800338c <HAL_GPIO_Init+0x128>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b12      	cmp	r3, #18
 800338a:	d123      	bne.n	80033d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	08da      	lsrs	r2, r3, #3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3208      	adds	r2, #8
 8003394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003398:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	220f      	movs	r2, #15
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4013      	ands	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	08da      	lsrs	r2, r3, #3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3208      	adds	r2, #8
 80033ce:	6939      	ldr	r1, [r7, #16]
 80033d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	2203      	movs	r2, #3
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	43db      	mvns	r3, r3
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4013      	ands	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 0203 	and.w	r2, r3, #3
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80ac 	beq.w	800356e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003416:	4b5f      	ldr	r3, [pc, #380]	; (8003594 <HAL_GPIO_Init+0x330>)
 8003418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800341a:	4a5e      	ldr	r2, [pc, #376]	; (8003594 <HAL_GPIO_Init+0x330>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	6613      	str	r3, [r2, #96]	; 0x60
 8003422:	4b5c      	ldr	r3, [pc, #368]	; (8003594 <HAL_GPIO_Init+0x330>)
 8003424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	60bb      	str	r3, [r7, #8]
 800342c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800342e:	4a5a      	ldr	r2, [pc, #360]	; (8003598 <HAL_GPIO_Init+0x334>)
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	089b      	lsrs	r3, r3, #2
 8003434:	3302      	adds	r3, #2
 8003436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	220f      	movs	r2, #15
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43db      	mvns	r3, r3
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4013      	ands	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003458:	d025      	beq.n	80034a6 <HAL_GPIO_Init+0x242>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a4f      	ldr	r2, [pc, #316]	; (800359c <HAL_GPIO_Init+0x338>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d01f      	beq.n	80034a2 <HAL_GPIO_Init+0x23e>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a4e      	ldr	r2, [pc, #312]	; (80035a0 <HAL_GPIO_Init+0x33c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d019      	beq.n	800349e <HAL_GPIO_Init+0x23a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a4d      	ldr	r2, [pc, #308]	; (80035a4 <HAL_GPIO_Init+0x340>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d013      	beq.n	800349a <HAL_GPIO_Init+0x236>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a4c      	ldr	r2, [pc, #304]	; (80035a8 <HAL_GPIO_Init+0x344>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00d      	beq.n	8003496 <HAL_GPIO_Init+0x232>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a4b      	ldr	r2, [pc, #300]	; (80035ac <HAL_GPIO_Init+0x348>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d007      	beq.n	8003492 <HAL_GPIO_Init+0x22e>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a4a      	ldr	r2, [pc, #296]	; (80035b0 <HAL_GPIO_Init+0x34c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d101      	bne.n	800348e <HAL_GPIO_Init+0x22a>
 800348a:	2306      	movs	r3, #6
 800348c:	e00c      	b.n	80034a8 <HAL_GPIO_Init+0x244>
 800348e:	2307      	movs	r3, #7
 8003490:	e00a      	b.n	80034a8 <HAL_GPIO_Init+0x244>
 8003492:	2305      	movs	r3, #5
 8003494:	e008      	b.n	80034a8 <HAL_GPIO_Init+0x244>
 8003496:	2304      	movs	r3, #4
 8003498:	e006      	b.n	80034a8 <HAL_GPIO_Init+0x244>
 800349a:	2303      	movs	r3, #3
 800349c:	e004      	b.n	80034a8 <HAL_GPIO_Init+0x244>
 800349e:	2302      	movs	r3, #2
 80034a0:	e002      	b.n	80034a8 <HAL_GPIO_Init+0x244>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <HAL_GPIO_Init+0x244>
 80034a6:	2300      	movs	r3, #0
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	f002 0203 	and.w	r2, r2, #3
 80034ae:	0092      	lsls	r2, r2, #2
 80034b0:	4093      	lsls	r3, r2
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034b8:	4937      	ldr	r1, [pc, #220]	; (8003598 <HAL_GPIO_Init+0x334>)
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	089b      	lsrs	r3, r3, #2
 80034be:	3302      	adds	r3, #2
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80034c6:	4b3b      	ldr	r3, [pc, #236]	; (80035b4 <HAL_GPIO_Init+0x350>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	43db      	mvns	r3, r3
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	4013      	ands	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034ea:	4a32      	ldr	r2, [pc, #200]	; (80035b4 <HAL_GPIO_Init+0x350>)
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80034f0:	4b30      	ldr	r3, [pc, #192]	; (80035b4 <HAL_GPIO_Init+0x350>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	43db      	mvns	r3, r3
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4013      	ands	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4313      	orrs	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003514:	4a27      	ldr	r2, [pc, #156]	; (80035b4 <HAL_GPIO_Init+0x350>)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800351a:	4b26      	ldr	r3, [pc, #152]	; (80035b4 <HAL_GPIO_Init+0x350>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	43db      	mvns	r3, r3
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4013      	ands	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800353e:	4a1d      	ldr	r2, [pc, #116]	; (80035b4 <HAL_GPIO_Init+0x350>)
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003544:	4b1b      	ldr	r3, [pc, #108]	; (80035b4 <HAL_GPIO_Init+0x350>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	43db      	mvns	r3, r3
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4013      	ands	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4313      	orrs	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003568:	4a12      	ldr	r2, [pc, #72]	; (80035b4 <HAL_GPIO_Init+0x350>)
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	3301      	adds	r3, #1
 8003572:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	fa22 f303 	lsr.w	r3, r2, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	f47f ae78 	bne.w	8003274 <HAL_GPIO_Init+0x10>
  }
}
 8003584:	bf00      	nop
 8003586:	bf00      	nop
 8003588:	371c      	adds	r7, #28
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000
 8003598:	40010000 	.word	0x40010000
 800359c:	48000400 	.word	0x48000400
 80035a0:	48000800 	.word	0x48000800
 80035a4:	48000c00 	.word	0x48000c00
 80035a8:	48001000 	.word	0x48001000
 80035ac:	48001400 	.word	0x48001400
 80035b0:	48001800 	.word	0x48001800
 80035b4:	40010400 	.word	0x40010400

080035b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	807b      	strh	r3, [r7, #2]
 80035c4:	4613      	mov	r3, r2
 80035c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035c8:	787b      	ldrb	r3, [r7, #1]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035ce:	887a      	ldrh	r2, [r7, #2]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035d4:	e002      	b.n	80035dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035d6:	887a      	ldrh	r2, [r7, #2]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	460b      	mov	r3, r1
 80035f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035fa:	887a      	ldrh	r2, [r7, #2]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4013      	ands	r3, r2
 8003600:	041a      	lsls	r2, r3, #16
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	43d9      	mvns	r1, r3
 8003606:	887b      	ldrh	r3, [r7, #2]
 8003608:	400b      	ands	r3, r1
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	619a      	str	r2, [r3, #24]
}
 8003610:	bf00      	nop
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e081      	b.n	8003732 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7ff fb3e 	bl	8002cc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2224      	movs	r2, #36	; 0x24
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800366c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800367c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d107      	bne.n	8003696 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	e006      	b.n	80036a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80036a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d104      	bne.n	80036b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	ea42 0103 	orr.w	r1, r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	021a      	lsls	r2, r3, #8
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	69d9      	ldr	r1, [r3, #28]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a1a      	ldr	r2, [r3, #32]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af02      	add	r7, sp, #8
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	607a      	str	r2, [r7, #4]
 8003746:	461a      	mov	r2, r3
 8003748:	460b      	mov	r3, r1
 800374a:	817b      	strh	r3, [r7, #10]
 800374c:	4613      	mov	r3, r2
 800374e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b20      	cmp	r3, #32
 800375a:	f040 80da 	bne.w	8003912 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_I2C_Master_Transmit+0x30>
 8003768:	2302      	movs	r3, #2
 800376a:	e0d3      	b.n	8003914 <HAL_I2C_Master_Transmit+0x1d8>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003774:	f7ff fc64 	bl	8003040 <HAL_GetTick>
 8003778:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	2319      	movs	r3, #25
 8003780:	2201      	movs	r2, #1
 8003782:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f9e6 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e0be      	b.n	8003914 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2221      	movs	r2, #33	; 0x21
 800379a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2210      	movs	r2, #16
 80037a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	893a      	ldrh	r2, [r7, #8]
 80037b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2bff      	cmp	r3, #255	; 0xff
 80037c6:	d90e      	bls.n	80037e6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	22ff      	movs	r2, #255	; 0xff
 80037cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	8979      	ldrh	r1, [r7, #10]
 80037d6:	4b51      	ldr	r3, [pc, #324]	; (800391c <HAL_I2C_Master_Transmit+0x1e0>)
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fb48 	bl	8003e74 <I2C_TransferConfig>
 80037e4:	e06c      	b.n	80038c0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	8979      	ldrh	r1, [r7, #10]
 80037f8:	4b48      	ldr	r3, [pc, #288]	; (800391c <HAL_I2C_Master_Transmit+0x1e0>)
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 fb37 	bl	8003e74 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003806:	e05b      	b.n	80038c0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	6a39      	ldr	r1, [r7, #32]
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f9e3 	bl	8003bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e07b      	b.n	8003914 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	781a      	ldrb	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d034      	beq.n	80038c0 <HAL_I2C_Master_Transmit+0x184>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385a:	2b00      	cmp	r3, #0
 800385c:	d130      	bne.n	80038c0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	2200      	movs	r2, #0
 8003866:	2180      	movs	r1, #128	; 0x80
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f975 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e04d      	b.n	8003914 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	2bff      	cmp	r3, #255	; 0xff
 8003880:	d90e      	bls.n	80038a0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	22ff      	movs	r2, #255	; 0xff
 8003886:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388c:	b2da      	uxtb	r2, r3
 800388e:	8979      	ldrh	r1, [r7, #10]
 8003890:	2300      	movs	r3, #0
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 faeb 	bl	8003e74 <I2C_TransferConfig>
 800389e:	e00f      	b.n	80038c0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	8979      	ldrh	r1, [r7, #10]
 80038b2:	2300      	movs	r3, #0
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 fada 	bl	8003e74 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d19e      	bne.n	8003808 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	6a39      	ldr	r1, [r7, #32]
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 f9c2 	bl	8003c58 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e01a      	b.n	8003914 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2220      	movs	r2, #32
 80038e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6859      	ldr	r1, [r3, #4]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <HAL_I2C_Master_Transmit+0x1e4>)
 80038f2:	400b      	ands	r3, r1
 80038f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	e000      	b.n	8003914 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003912:	2302      	movs	r3, #2
  }
}
 8003914:	4618      	mov	r0, r3
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	80002000 	.word	0x80002000
 8003920:	fe00e800 	.word	0xfe00e800

08003924 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b088      	sub	sp, #32
 8003928:	af02      	add	r7, sp, #8
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	607a      	str	r2, [r7, #4]
 800392e:	461a      	mov	r2, r3
 8003930:	460b      	mov	r3, r1
 8003932:	817b      	strh	r3, [r7, #10]
 8003934:	4613      	mov	r3, r2
 8003936:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b20      	cmp	r3, #32
 8003942:	f040 80db 	bne.w	8003afc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_I2C_Master_Receive+0x30>
 8003950:	2302      	movs	r3, #2
 8003952:	e0d4      	b.n	8003afe <HAL_I2C_Master_Receive+0x1da>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800395c:	f7ff fb70 	bl	8003040 <HAL_GetTick>
 8003960:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	2319      	movs	r3, #25
 8003968:	2201      	movs	r2, #1
 800396a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 f8f2 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e0bf      	b.n	8003afe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2222      	movs	r2, #34	; 0x22
 8003982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2210      	movs	r2, #16
 800398a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	893a      	ldrh	r2, [r7, #8]
 800399e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	2bff      	cmp	r3, #255	; 0xff
 80039ae:	d90e      	bls.n	80039ce <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	22ff      	movs	r2, #255	; 0xff
 80039b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	8979      	ldrh	r1, [r7, #10]
 80039be:	4b52      	ldr	r3, [pc, #328]	; (8003b08 <HAL_I2C_Master_Receive+0x1e4>)
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 fa54 	bl	8003e74 <I2C_TransferConfig>
 80039cc:	e06d      	b.n	8003aaa <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	8979      	ldrh	r1, [r7, #10]
 80039e0:	4b49      	ldr	r3, [pc, #292]	; (8003b08 <HAL_I2C_Master_Receive+0x1e4>)
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 fa43 	bl	8003e74 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80039ee:	e05c      	b.n	8003aaa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	6a39      	ldr	r1, [r7, #32]
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 f96b 	bl	8003cd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e07c      	b.n	8003afe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d034      	beq.n	8003aaa <HAL_I2C_Master_Receive+0x186>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d130      	bne.n	8003aaa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2180      	movs	r1, #128	; 0x80
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 f880 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e04d      	b.n	8003afe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2bff      	cmp	r3, #255	; 0xff
 8003a6a:	d90e      	bls.n	8003a8a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	22ff      	movs	r2, #255	; 0xff
 8003a70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	8979      	ldrh	r1, [r7, #10]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 f9f6 	bl	8003e74 <I2C_TransferConfig>
 8003a88:	e00f      	b.n	8003aaa <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	8979      	ldrh	r1, [r7, #10]
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 f9e5 	bl	8003e74 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d19d      	bne.n	80039f0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	6a39      	ldr	r1, [r7, #32]
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 f8cd 	bl	8003c58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e01a      	b.n	8003afe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2220      	movs	r2, #32
 8003ace:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6859      	ldr	r1, [r3, #4]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <HAL_I2C_Master_Receive+0x1e8>)
 8003adc:	400b      	ands	r3, r1
 8003ade:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	e000      	b.n	8003afe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003afc:	2302      	movs	r3, #2
  }
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	80002400 	.word	0x80002400
 8003b0c:	fe00e800 	.word	0xfe00e800

08003b10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d103      	bne.n	8003b2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d007      	beq.n	8003b4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699a      	ldr	r2, [r3, #24]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	619a      	str	r2, [r3, #24]
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	4613      	mov	r3, r2
 8003b66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b68:	e022      	b.n	8003bb0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b70:	d01e      	beq.n	8003bb0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b72:	f7ff fa65 	bl	8003040 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d302      	bcc.n	8003b88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d113      	bne.n	8003bb0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8c:	f043 0220 	orr.w	r2, r3, #32
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e00f      	b.n	8003bd0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699a      	ldr	r2, [r3, #24]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	bf0c      	ite	eq
 8003bc0:	2301      	moveq	r3, #1
 8003bc2:	2300      	movne	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	79fb      	ldrb	r3, [r7, #7]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d0cd      	beq.n	8003b6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003be4:	e02c      	b.n	8003c40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68b9      	ldr	r1, [r7, #8]
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 f8dc 	bl	8003da8 <I2C_IsAcknowledgeFailed>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e02a      	b.n	8003c50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c00:	d01e      	beq.n	8003c40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c02:	f7ff fa1d 	bl	8003040 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d302      	bcc.n	8003c18 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d113      	bne.n	8003c40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1c:	f043 0220 	orr.w	r2, r3, #32
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e007      	b.n	8003c50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d1cb      	bne.n	8003be6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c64:	e028      	b.n	8003cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f89c 	bl	8003da8 <I2C_IsAcknowledgeFailed>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e026      	b.n	8003cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c7a:	f7ff f9e1 	bl	8003040 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d302      	bcc.n	8003c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d113      	bne.n	8003cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c94:	f043 0220 	orr.w	r2, r3, #32
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e007      	b.n	8003cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d1cf      	bne.n	8003c66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cdc:	e055      	b.n	8003d8a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	68b9      	ldr	r1, [r7, #8]
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f860 	bl	8003da8 <I2C_IsAcknowledgeFailed>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e053      	b.n	8003d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	f003 0320 	and.w	r3, r3, #32
 8003cfc:	2b20      	cmp	r3, #32
 8003cfe:	d129      	bne.n	8003d54 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d105      	bne.n	8003d1a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	e03f      	b.n	8003d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6859      	ldr	r1, [r3, #4]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	4b1d      	ldr	r3, [pc, #116]	; (8003da4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003d2e:	400b      	ands	r3, r1
 8003d30:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e022      	b.n	8003d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d54:	f7ff f974 	bl	8003040 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d302      	bcc.n	8003d6a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10f      	bne.n	8003d8a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6e:	f043 0220 	orr.w	r2, r3, #32
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e007      	b.n	8003d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d1a2      	bne.n	8003cde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	fe00e800 	.word	0xfe00e800

08003da8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2b10      	cmp	r3, #16
 8003dc0:	d151      	bne.n	8003e66 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dc2:	e022      	b.n	8003e0a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dca:	d01e      	beq.n	8003e0a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dcc:	f7ff f938 	bl	8003040 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d302      	bcc.n	8003de2 <I2C_IsAcknowledgeFailed+0x3a>
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d113      	bne.n	8003e0a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de6:	f043 0220 	orr.w	r2, r3, #32
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e02e      	b.n	8003e68 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b20      	cmp	r3, #32
 8003e16:	d1d5      	bne.n	8003dc4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2210      	movs	r2, #16
 8003e1e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2220      	movs	r2, #32
 8003e26:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f7ff fe71 	bl	8003b10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6859      	ldr	r1, [r3, #4]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <I2C_IsAcknowledgeFailed+0xc8>)
 8003e3a:	400b      	ands	r3, r1
 8003e3c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e42:	f043 0204 	orr.w	r2, r3, #4
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	fe00e800 	.word	0xfe00e800

08003e74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	607b      	str	r3, [r7, #4]
 8003e7e:	460b      	mov	r3, r1
 8003e80:	817b      	strh	r3, [r7, #10]
 8003e82:	4613      	mov	r3, r2
 8003e84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	0d5b      	lsrs	r3, r3, #21
 8003e90:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003e94:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <I2C_TransferConfig+0x58>)
 8003e96:	430b      	orrs	r3, r1
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	ea02 0103 	and.w	r1, r2, r3
 8003e9e:	897b      	ldrh	r3, [r7, #10]
 8003ea0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ea4:	7a7b      	ldrb	r3, [r7, #9]
 8003ea6:	041b      	lsls	r3, r3, #16
 8003ea8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003ebe:	bf00      	nop
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	03ff63ff 	.word	0x03ff63ff

08003ed0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	d138      	bne.n	8003f58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e032      	b.n	8003f5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2224      	movs	r2, #36	; 0x24
 8003f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0201 	bic.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6819      	ldr	r1, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	e000      	b.n	8003f5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f58:	2302      	movs	r3, #2
  }
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b085      	sub	sp, #20
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d139      	bne.n	8003ff0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e033      	b.n	8003ff2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2224      	movs	r2, #36	; 0x24
 8003f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0201 	bic.w	r2, r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003fb8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0201 	orr.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fec:	2300      	movs	r3, #0
 8003fee:	e000      	b.n	8003ff2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ff0:	2302      	movs	r3, #2
  }
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
	...

08004000 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004004:	4b04      	ldr	r3, [pc, #16]	; (8004018 <HAL_PWREx_GetVoltageRange+0x18>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800400c:	4618      	mov	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40007000 	.word	0x40007000

0800401c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800402a:	d130      	bne.n	800408e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800402c:	4b23      	ldr	r3, [pc, #140]	; (80040bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004038:	d038      	beq.n	80040ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800403a:	4b20      	ldr	r3, [pc, #128]	; (80040bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004042:	4a1e      	ldr	r2, [pc, #120]	; (80040bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004044:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004048:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800404a:	4b1d      	ldr	r3, [pc, #116]	; (80040c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2232      	movs	r2, #50	; 0x32
 8004050:	fb02 f303 	mul.w	r3, r2, r3
 8004054:	4a1b      	ldr	r2, [pc, #108]	; (80040c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004056:	fba2 2303 	umull	r2, r3, r2, r3
 800405a:	0c9b      	lsrs	r3, r3, #18
 800405c:	3301      	adds	r3, #1
 800405e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004060:	e002      	b.n	8004068 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	3b01      	subs	r3, #1
 8004066:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004068:	4b14      	ldr	r3, [pc, #80]	; (80040bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004074:	d102      	bne.n	800407c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1f2      	bne.n	8004062 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800407c:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004088:	d110      	bne.n	80040ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e00f      	b.n	80040ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800408e:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800409a:	d007      	beq.n	80040ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800409c:	4b07      	ldr	r3, [pc, #28]	; (80040bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040a4:	4a05      	ldr	r2, [pc, #20]	; (80040bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40007000 	.word	0x40007000
 80040c0:	20000070 	.word	0x20000070
 80040c4:	431bde83 	.word	0x431bde83

080040c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e3d4      	b.n	8004884 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040da:	4ba1      	ldr	r3, [pc, #644]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 030c 	and.w	r3, r3, #12
 80040e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040e4:	4b9e      	ldr	r3, [pc, #632]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f003 0303 	and.w	r3, r3, #3
 80040ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0310 	and.w	r3, r3, #16
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 80e4 	beq.w	80042c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d007      	beq.n	8004112 <HAL_RCC_OscConfig+0x4a>
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	2b0c      	cmp	r3, #12
 8004106:	f040 808b 	bne.w	8004220 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b01      	cmp	r3, #1
 800410e:	f040 8087 	bne.w	8004220 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004112:	4b93      	ldr	r3, [pc, #588]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d005      	beq.n	800412a <HAL_RCC_OscConfig+0x62>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e3ac      	b.n	8004884 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1a      	ldr	r2, [r3, #32]
 800412e:	4b8c      	ldr	r3, [pc, #560]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d004      	beq.n	8004144 <HAL_RCC_OscConfig+0x7c>
 800413a:	4b89      	ldr	r3, [pc, #548]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004142:	e005      	b.n	8004150 <HAL_RCC_OscConfig+0x88>
 8004144:	4b86      	ldr	r3, [pc, #536]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 8004146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800414a:	091b      	lsrs	r3, r3, #4
 800414c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004150:	4293      	cmp	r3, r2
 8004152:	d223      	bcs.n	800419c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fd73 	bl	8004c44 <RCC_SetFlashLatencyFromMSIRange>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e38d      	b.n	8004884 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004168:	4b7d      	ldr	r3, [pc, #500]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a7c      	ldr	r2, [pc, #496]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 800416e:	f043 0308 	orr.w	r3, r3, #8
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	4b7a      	ldr	r3, [pc, #488]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	4977      	ldr	r1, [pc, #476]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 8004182:	4313      	orrs	r3, r2
 8004184:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004186:	4b76      	ldr	r3, [pc, #472]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	021b      	lsls	r3, r3, #8
 8004194:	4972      	ldr	r1, [pc, #456]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 8004196:	4313      	orrs	r3, r2
 8004198:	604b      	str	r3, [r1, #4]
 800419a:	e025      	b.n	80041e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800419c:	4b70      	ldr	r3, [pc, #448]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a6f      	ldr	r2, [pc, #444]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 80041a2:	f043 0308 	orr.w	r3, r3, #8
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	4b6d      	ldr	r3, [pc, #436]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	496a      	ldr	r1, [pc, #424]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041ba:	4b69      	ldr	r3, [pc, #420]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	021b      	lsls	r3, r3, #8
 80041c8:	4965      	ldr	r1, [pc, #404]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d109      	bne.n	80041e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fd33 	bl	8004c44 <RCC_SetFlashLatencyFromMSIRange>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e34d      	b.n	8004884 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041e8:	f000 fc36 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 80041ec:	4602      	mov	r2, r0
 80041ee:	4b5c      	ldr	r3, [pc, #368]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	091b      	lsrs	r3, r3, #4
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	495a      	ldr	r1, [pc, #360]	; (8004364 <HAL_RCC_OscConfig+0x29c>)
 80041fa:	5ccb      	ldrb	r3, [r1, r3]
 80041fc:	f003 031f 	and.w	r3, r3, #31
 8004200:	fa22 f303 	lsr.w	r3, r2, r3
 8004204:	4a58      	ldr	r2, [pc, #352]	; (8004368 <HAL_RCC_OscConfig+0x2a0>)
 8004206:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004208:	4b58      	ldr	r3, [pc, #352]	; (800436c <HAL_RCC_OscConfig+0x2a4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4618      	mov	r0, r3
 800420e:	f7fe fe11 	bl	8002e34 <HAL_InitTick>
 8004212:	4603      	mov	r3, r0
 8004214:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d052      	beq.n	80042c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	e331      	b.n	8004884 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d032      	beq.n	800428e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004228:	4b4d      	ldr	r3, [pc, #308]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a4c      	ldr	r2, [pc, #304]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004234:	f7fe ff04 	bl	8003040 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800423c:	f7fe ff00 	bl	8003040 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e31a      	b.n	8004884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800424e:	4b44      	ldr	r3, [pc, #272]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0f0      	beq.n	800423c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800425a:	4b41      	ldr	r3, [pc, #260]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a40      	ldr	r2, [pc, #256]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 8004260:	f043 0308 	orr.w	r3, r3, #8
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	4b3e      	ldr	r3, [pc, #248]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	493b      	ldr	r1, [pc, #236]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 8004274:	4313      	orrs	r3, r2
 8004276:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004278:	4b39      	ldr	r3, [pc, #228]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	021b      	lsls	r3, r3, #8
 8004286:	4936      	ldr	r1, [pc, #216]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 8004288:	4313      	orrs	r3, r2
 800428a:	604b      	str	r3, [r1, #4]
 800428c:	e01a      	b.n	80042c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800428e:	4b34      	ldr	r3, [pc, #208]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a33      	ldr	r2, [pc, #204]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 8004294:	f023 0301 	bic.w	r3, r3, #1
 8004298:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800429a:	f7fe fed1 	bl	8003040 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042a2:	f7fe fecd 	bl	8003040 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e2e7      	b.n	8004884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042b4:	4b2a      	ldr	r3, [pc, #168]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1f0      	bne.n	80042a2 <HAL_RCC_OscConfig+0x1da>
 80042c0:	e000      	b.n	80042c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d074      	beq.n	80043ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d005      	beq.n	80042e2 <HAL_RCC_OscConfig+0x21a>
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	2b0c      	cmp	r3, #12
 80042da:	d10e      	bne.n	80042fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2b03      	cmp	r3, #3
 80042e0:	d10b      	bne.n	80042fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e2:	4b1f      	ldr	r3, [pc, #124]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d064      	beq.n	80043b8 <HAL_RCC_OscConfig+0x2f0>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d160      	bne.n	80043b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e2c4      	b.n	8004884 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004302:	d106      	bne.n	8004312 <HAL_RCC_OscConfig+0x24a>
 8004304:	4b16      	ldr	r3, [pc, #88]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a15      	ldr	r2, [pc, #84]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 800430a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	e01d      	b.n	800434e <HAL_RCC_OscConfig+0x286>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800431a:	d10c      	bne.n	8004336 <HAL_RCC_OscConfig+0x26e>
 800431c:	4b10      	ldr	r3, [pc, #64]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a0f      	ldr	r2, [pc, #60]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 8004322:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a0c      	ldr	r2, [pc, #48]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 800432e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	e00b      	b.n	800434e <HAL_RCC_OscConfig+0x286>
 8004336:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a09      	ldr	r2, [pc, #36]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 800433c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	4b07      	ldr	r3, [pc, #28]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a06      	ldr	r2, [pc, #24]	; (8004360 <HAL_RCC_OscConfig+0x298>)
 8004348:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800434c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d01c      	beq.n	8004390 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004356:	f7fe fe73 	bl	8003040 <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800435c:	e011      	b.n	8004382 <HAL_RCC_OscConfig+0x2ba>
 800435e:	bf00      	nop
 8004360:	40021000 	.word	0x40021000
 8004364:	08007fb8 	.word	0x08007fb8
 8004368:	20000070 	.word	0x20000070
 800436c:	20000074 	.word	0x20000074
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004370:	f7fe fe66 	bl	8003040 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	; 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e280      	b.n	8004884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004382:	4baf      	ldr	r3, [pc, #700]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCC_OscConfig+0x2a8>
 800438e:	e014      	b.n	80043ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004390:	f7fe fe56 	bl	8003040 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004398:	f7fe fe52 	bl	8003040 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b64      	cmp	r3, #100	; 0x64
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e26c      	b.n	8004884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043aa:	4ba5      	ldr	r3, [pc, #660]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x2d0>
 80043b6:	e000      	b.n	80043ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d060      	beq.n	8004488 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d005      	beq.n	80043d8 <HAL_RCC_OscConfig+0x310>
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	2b0c      	cmp	r3, #12
 80043d0:	d119      	bne.n	8004406 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d116      	bne.n	8004406 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043d8:	4b99      	ldr	r3, [pc, #612]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_OscConfig+0x328>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e249      	b.n	8004884 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f0:	4b93      	ldr	r3, [pc, #588]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	061b      	lsls	r3, r3, #24
 80043fe:	4990      	ldr	r1, [pc, #576]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 8004400:	4313      	orrs	r3, r2
 8004402:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004404:	e040      	b.n	8004488 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d023      	beq.n	8004456 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800440e:	4b8c      	ldr	r3, [pc, #560]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a8b      	ldr	r2, [pc, #556]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 8004414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441a:	f7fe fe11 	bl	8003040 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004422:	f7fe fe0d 	bl	8003040 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e227      	b.n	8004884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004434:	4b82      	ldr	r3, [pc, #520]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0f0      	beq.n	8004422 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004440:	4b7f      	ldr	r3, [pc, #508]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	061b      	lsls	r3, r3, #24
 800444e:	497c      	ldr	r1, [pc, #496]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 8004450:	4313      	orrs	r3, r2
 8004452:	604b      	str	r3, [r1, #4]
 8004454:	e018      	b.n	8004488 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004456:	4b7a      	ldr	r3, [pc, #488]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a79      	ldr	r2, [pc, #484]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 800445c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004462:	f7fe fded 	bl	8003040 <HAL_GetTick>
 8004466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004468:	e008      	b.n	800447c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800446a:	f7fe fde9 	bl	8003040 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e203      	b.n	8004884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800447c:	4b70      	ldr	r3, [pc, #448]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1f0      	bne.n	800446a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	2b00      	cmp	r3, #0
 8004492:	d03c      	beq.n	800450e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01c      	beq.n	80044d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800449c:	4b68      	ldr	r3, [pc, #416]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 800449e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044a2:	4a67      	ldr	r2, [pc, #412]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 80044a4:	f043 0301 	orr.w	r3, r3, #1
 80044a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ac:	f7fe fdc8 	bl	8003040 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044b4:	f7fe fdc4 	bl	8003040 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e1de      	b.n	8004884 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044c6:	4b5e      	ldr	r3, [pc, #376]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 80044c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0ef      	beq.n	80044b4 <HAL_RCC_OscConfig+0x3ec>
 80044d4:	e01b      	b.n	800450e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044d6:	4b5a      	ldr	r3, [pc, #360]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 80044d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044dc:	4a58      	ldr	r2, [pc, #352]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e6:	f7fe fdab 	bl	8003040 <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ee:	f7fe fda7 	bl	8003040 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e1c1      	b.n	8004884 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004500:	4b4f      	ldr	r3, [pc, #316]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 8004502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1ef      	bne.n	80044ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0304 	and.w	r3, r3, #4
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 80a6 	beq.w	8004668 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800451c:	2300      	movs	r3, #0
 800451e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004520:	4b47      	ldr	r3, [pc, #284]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 8004522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10d      	bne.n	8004548 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800452c:	4b44      	ldr	r3, [pc, #272]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 800452e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004530:	4a43      	ldr	r2, [pc, #268]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 8004532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004536:	6593      	str	r3, [r2, #88]	; 0x58
 8004538:	4b41      	ldr	r3, [pc, #260]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 800453a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004544:	2301      	movs	r3, #1
 8004546:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004548:	4b3e      	ldr	r3, [pc, #248]	; (8004644 <HAL_RCC_OscConfig+0x57c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004550:	2b00      	cmp	r3, #0
 8004552:	d118      	bne.n	8004586 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004554:	4b3b      	ldr	r3, [pc, #236]	; (8004644 <HAL_RCC_OscConfig+0x57c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a3a      	ldr	r2, [pc, #232]	; (8004644 <HAL_RCC_OscConfig+0x57c>)
 800455a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800455e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004560:	f7fe fd6e 	bl	8003040 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004568:	f7fe fd6a 	bl	8003040 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e184      	b.n	8004884 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800457a:	4b32      	ldr	r3, [pc, #200]	; (8004644 <HAL_RCC_OscConfig+0x57c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0f0      	beq.n	8004568 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d108      	bne.n	80045a0 <HAL_RCC_OscConfig+0x4d8>
 800458e:	4b2c      	ldr	r3, [pc, #176]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 8004590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004594:	4a2a      	ldr	r2, [pc, #168]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800459e:	e024      	b.n	80045ea <HAL_RCC_OscConfig+0x522>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b05      	cmp	r3, #5
 80045a6:	d110      	bne.n	80045ca <HAL_RCC_OscConfig+0x502>
 80045a8:	4b25      	ldr	r3, [pc, #148]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 80045aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ae:	4a24      	ldr	r2, [pc, #144]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 80045b0:	f043 0304 	orr.w	r3, r3, #4
 80045b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045b8:	4b21      	ldr	r3, [pc, #132]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045be:	4a20      	ldr	r2, [pc, #128]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045c8:	e00f      	b.n	80045ea <HAL_RCC_OscConfig+0x522>
 80045ca:	4b1d      	ldr	r3, [pc, #116]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 80045cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d0:	4a1b      	ldr	r2, [pc, #108]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045da:	4b19      	ldr	r3, [pc, #100]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 80045dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e0:	4a17      	ldr	r2, [pc, #92]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 80045e2:	f023 0304 	bic.w	r3, r3, #4
 80045e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d016      	beq.n	8004620 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f2:	f7fe fd25 	bl	8003040 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045f8:	e00a      	b.n	8004610 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045fa:	f7fe fd21 	bl	8003040 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	f241 3288 	movw	r2, #5000	; 0x1388
 8004608:	4293      	cmp	r3, r2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e139      	b.n	8004884 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004610:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 8004612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0ed      	beq.n	80045fa <HAL_RCC_OscConfig+0x532>
 800461e:	e01a      	b.n	8004656 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004620:	f7fe fd0e 	bl	8003040 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004626:	e00f      	b.n	8004648 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004628:	f7fe fd0a 	bl	8003040 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	f241 3288 	movw	r2, #5000	; 0x1388
 8004636:	4293      	cmp	r3, r2
 8004638:	d906      	bls.n	8004648 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e122      	b.n	8004884 <HAL_RCC_OscConfig+0x7bc>
 800463e:	bf00      	nop
 8004640:	40021000 	.word	0x40021000
 8004644:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004648:	4b90      	ldr	r3, [pc, #576]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 800464a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1e8      	bne.n	8004628 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004656:	7ffb      	ldrb	r3, [r7, #31]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d105      	bne.n	8004668 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800465c:	4b8b      	ldr	r3, [pc, #556]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 800465e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004660:	4a8a      	ldr	r2, [pc, #552]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 8004662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004666:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 8108 	beq.w	8004882 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004676:	2b02      	cmp	r3, #2
 8004678:	f040 80d0 	bne.w	800481c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800467c:	4b83      	ldr	r3, [pc, #524]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f003 0203 	and.w	r2, r3, #3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	429a      	cmp	r2, r3
 800468e:	d130      	bne.n	80046f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	3b01      	subs	r3, #1
 800469c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800469e:	429a      	cmp	r2, r3
 80046a0:	d127      	bne.n	80046f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d11f      	bne.n	80046f2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046bc:	2a07      	cmp	r2, #7
 80046be:	bf14      	ite	ne
 80046c0:	2201      	movne	r2, #1
 80046c2:	2200      	moveq	r2, #0
 80046c4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d113      	bne.n	80046f2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d4:	085b      	lsrs	r3, r3, #1
 80046d6:	3b01      	subs	r3, #1
 80046d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80046da:	429a      	cmp	r2, r3
 80046dc:	d109      	bne.n	80046f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	085b      	lsrs	r3, r3, #1
 80046ea:	3b01      	subs	r3, #1
 80046ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d06e      	beq.n	80047d0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	2b0c      	cmp	r3, #12
 80046f6:	d069      	beq.n	80047cc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046f8:	4b64      	ldr	r3, [pc, #400]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d105      	bne.n	8004710 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004704:	4b61      	ldr	r3, [pc, #388]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e0b7      	b.n	8004884 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004714:	4b5d      	ldr	r3, [pc, #372]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a5c      	ldr	r2, [pc, #368]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 800471a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800471e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004720:	f7fe fc8e 	bl	8003040 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004728:	f7fe fc8a 	bl	8003040 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e0a4      	b.n	8004884 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800473a:	4b54      	ldr	r3, [pc, #336]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1f0      	bne.n	8004728 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004746:	4b51      	ldr	r3, [pc, #324]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	4b51      	ldr	r3, [pc, #324]	; (8004890 <HAL_RCC_OscConfig+0x7c8>)
 800474c:	4013      	ands	r3, r2
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004756:	3a01      	subs	r2, #1
 8004758:	0112      	lsls	r2, r2, #4
 800475a:	4311      	orrs	r1, r2
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004760:	0212      	lsls	r2, r2, #8
 8004762:	4311      	orrs	r1, r2
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004768:	0852      	lsrs	r2, r2, #1
 800476a:	3a01      	subs	r2, #1
 800476c:	0552      	lsls	r2, r2, #21
 800476e:	4311      	orrs	r1, r2
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004774:	0852      	lsrs	r2, r2, #1
 8004776:	3a01      	subs	r2, #1
 8004778:	0652      	lsls	r2, r2, #25
 800477a:	4311      	orrs	r1, r2
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004780:	0912      	lsrs	r2, r2, #4
 8004782:	0452      	lsls	r2, r2, #17
 8004784:	430a      	orrs	r2, r1
 8004786:	4941      	ldr	r1, [pc, #260]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 8004788:	4313      	orrs	r3, r2
 800478a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800478c:	4b3f      	ldr	r3, [pc, #252]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a3e      	ldr	r2, [pc, #248]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 8004792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004796:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004798:	4b3c      	ldr	r3, [pc, #240]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	4a3b      	ldr	r2, [pc, #236]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 800479e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047a4:	f7fe fc4c 	bl	8003040 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ac:	f7fe fc48 	bl	8003040 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e062      	b.n	8004884 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047be:	4b33      	ldr	r3, [pc, #204]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047ca:	e05a      	b.n	8004882 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e059      	b.n	8004884 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047d0:	4b2e      	ldr	r3, [pc, #184]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d152      	bne.n	8004882 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047dc:	4b2b      	ldr	r3, [pc, #172]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a2a      	ldr	r2, [pc, #168]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 80047e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047e8:	4b28      	ldr	r3, [pc, #160]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	4a27      	ldr	r2, [pc, #156]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 80047ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047f4:	f7fe fc24 	bl	8003040 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047fc:	f7fe fc20 	bl	8003040 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e03a      	b.n	8004884 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800480e:	4b1f      	ldr	r3, [pc, #124]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0f0      	beq.n	80047fc <HAL_RCC_OscConfig+0x734>
 800481a:	e032      	b.n	8004882 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	2b0c      	cmp	r3, #12
 8004820:	d02d      	beq.n	800487e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004822:	4b1a      	ldr	r3, [pc, #104]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a19      	ldr	r2, [pc, #100]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 8004828:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800482c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800482e:	4b17      	ldr	r3, [pc, #92]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d105      	bne.n	8004846 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800483a:	4b14      	ldr	r3, [pc, #80]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	4a13      	ldr	r2, [pc, #76]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 8004840:	f023 0303 	bic.w	r3, r3, #3
 8004844:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004846:	4b11      	ldr	r3, [pc, #68]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	4a10      	ldr	r2, [pc, #64]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 800484c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004854:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004856:	f7fe fbf3 	bl	8003040 <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800485e:	f7fe fbef 	bl	8003040 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e009      	b.n	8004884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004870:	4b06      	ldr	r3, [pc, #24]	; (800488c <HAL_RCC_OscConfig+0x7c4>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1f0      	bne.n	800485e <HAL_RCC_OscConfig+0x796>
 800487c:	e001      	b.n	8004882 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3720      	adds	r7, #32
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40021000 	.word	0x40021000
 8004890:	f99d808c 	.word	0xf99d808c

08004894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0c8      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048a8:	4b66      	ldr	r3, [pc, #408]	; (8004a44 <HAL_RCC_ClockConfig+0x1b0>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d910      	bls.n	80048d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b6:	4b63      	ldr	r3, [pc, #396]	; (8004a44 <HAL_RCC_ClockConfig+0x1b0>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f023 0207 	bic.w	r2, r3, #7
 80048be:	4961      	ldr	r1, [pc, #388]	; (8004a44 <HAL_RCC_ClockConfig+0x1b0>)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c6:	4b5f      	ldr	r3, [pc, #380]	; (8004a44 <HAL_RCC_ClockConfig+0x1b0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d001      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e0b0      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d04c      	beq.n	800497e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d107      	bne.n	80048fc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ec:	4b56      	ldr	r3, [pc, #344]	; (8004a48 <HAL_RCC_ClockConfig+0x1b4>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d121      	bne.n	800493c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e09e      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2b02      	cmp	r3, #2
 8004902:	d107      	bne.n	8004914 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004904:	4b50      	ldr	r3, [pc, #320]	; (8004a48 <HAL_RCC_ClockConfig+0x1b4>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d115      	bne.n	800493c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e092      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d107      	bne.n	800492c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800491c:	4b4a      	ldr	r3, [pc, #296]	; (8004a48 <HAL_RCC_ClockConfig+0x1b4>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d109      	bne.n	800493c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e086      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800492c:	4b46      	ldr	r3, [pc, #280]	; (8004a48 <HAL_RCC_ClockConfig+0x1b4>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e07e      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800493c:	4b42      	ldr	r3, [pc, #264]	; (8004a48 <HAL_RCC_ClockConfig+0x1b4>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f023 0203 	bic.w	r2, r3, #3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	493f      	ldr	r1, [pc, #252]	; (8004a48 <HAL_RCC_ClockConfig+0x1b4>)
 800494a:	4313      	orrs	r3, r2
 800494c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494e:	f7fe fb77 	bl	8003040 <HAL_GetTick>
 8004952:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004954:	e00a      	b.n	800496c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004956:	f7fe fb73 	bl	8003040 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	f241 3288 	movw	r2, #5000	; 0x1388
 8004964:	4293      	cmp	r3, r2
 8004966:	d901      	bls.n	800496c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e066      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496c:	4b36      	ldr	r3, [pc, #216]	; (8004a48 <HAL_RCC_ClockConfig+0x1b4>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f003 020c 	and.w	r2, r3, #12
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	429a      	cmp	r2, r3
 800497c:	d1eb      	bne.n	8004956 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d008      	beq.n	800499c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800498a:	4b2f      	ldr	r3, [pc, #188]	; (8004a48 <HAL_RCC_ClockConfig+0x1b4>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	492c      	ldr	r1, [pc, #176]	; (8004a48 <HAL_RCC_ClockConfig+0x1b4>)
 8004998:	4313      	orrs	r3, r2
 800499a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800499c:	4b29      	ldr	r3, [pc, #164]	; (8004a44 <HAL_RCC_ClockConfig+0x1b0>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d210      	bcs.n	80049cc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049aa:	4b26      	ldr	r3, [pc, #152]	; (8004a44 <HAL_RCC_ClockConfig+0x1b0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f023 0207 	bic.w	r2, r3, #7
 80049b2:	4924      	ldr	r1, [pc, #144]	; (8004a44 <HAL_RCC_ClockConfig+0x1b0>)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ba:	4b22      	ldr	r3, [pc, #136]	; (8004a44 <HAL_RCC_ClockConfig+0x1b0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d001      	beq.n	80049cc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e036      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d008      	beq.n	80049ea <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049d8:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <HAL_RCC_ClockConfig+0x1b4>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	4918      	ldr	r1, [pc, #96]	; (8004a48 <HAL_RCC_ClockConfig+0x1b4>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d009      	beq.n	8004a0a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049f6:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <HAL_RCC_ClockConfig+0x1b4>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4910      	ldr	r1, [pc, #64]	; (8004a48 <HAL_RCC_ClockConfig+0x1b4>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a0a:	f000 f825 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	4b0d      	ldr	r3, [pc, #52]	; (8004a48 <HAL_RCC_ClockConfig+0x1b4>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	091b      	lsrs	r3, r3, #4
 8004a16:	f003 030f 	and.w	r3, r3, #15
 8004a1a:	490c      	ldr	r1, [pc, #48]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 8004a1c:	5ccb      	ldrb	r3, [r1, r3]
 8004a1e:	f003 031f 	and.w	r3, r3, #31
 8004a22:	fa22 f303 	lsr.w	r3, r2, r3
 8004a26:	4a0a      	ldr	r2, [pc, #40]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a2a:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <HAL_RCC_ClockConfig+0x1c0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fe fa00 	bl	8002e34 <HAL_InitTick>
 8004a34:	4603      	mov	r3, r0
 8004a36:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a38:	7afb      	ldrb	r3, [r7, #11]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	40022000 	.word	0x40022000
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	08007fb8 	.word	0x08007fb8
 8004a50:	20000070 	.word	0x20000070
 8004a54:	20000074 	.word	0x20000074

08004a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b089      	sub	sp, #36	; 0x24
 8004a5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61fb      	str	r3, [r7, #28]
 8004a62:	2300      	movs	r3, #0
 8004a64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a66:	4b3e      	ldr	r3, [pc, #248]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 030c 	and.w	r3, r3, #12
 8004a6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a70:	4b3b      	ldr	r3, [pc, #236]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f003 0303 	and.w	r3, r3, #3
 8004a78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d005      	beq.n	8004a8c <HAL_RCC_GetSysClockFreq+0x34>
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	2b0c      	cmp	r3, #12
 8004a84:	d121      	bne.n	8004aca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d11e      	bne.n	8004aca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a8c:	4b34      	ldr	r3, [pc, #208]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0308 	and.w	r3, r3, #8
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d107      	bne.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a98:	4b31      	ldr	r3, [pc, #196]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a9e:	0a1b      	lsrs	r3, r3, #8
 8004aa0:	f003 030f 	and.w	r3, r3, #15
 8004aa4:	61fb      	str	r3, [r7, #28]
 8004aa6:	e005      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004aa8:	4b2d      	ldr	r3, [pc, #180]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	091b      	lsrs	r3, r3, #4
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ab4:	4a2b      	ldr	r2, [pc, #172]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004abc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10d      	bne.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ac8:	e00a      	b.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	2b04      	cmp	r3, #4
 8004ace:	d102      	bne.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ad0:	4b25      	ldr	r3, [pc, #148]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ad2:	61bb      	str	r3, [r7, #24]
 8004ad4:	e004      	b.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d101      	bne.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004adc:	4b23      	ldr	r3, [pc, #140]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x114>)
 8004ade:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	2b0c      	cmp	r3, #12
 8004ae4:	d134      	bne.n	8004b50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ae6:	4b1e      	ldr	r3, [pc, #120]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d003      	beq.n	8004afe <HAL_RCC_GetSysClockFreq+0xa6>
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	d003      	beq.n	8004b04 <HAL_RCC_GetSysClockFreq+0xac>
 8004afc:	e005      	b.n	8004b0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004afe:	4b1a      	ldr	r3, [pc, #104]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b00:	617b      	str	r3, [r7, #20]
      break;
 8004b02:	e005      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b04:	4b19      	ldr	r3, [pc, #100]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x114>)
 8004b06:	617b      	str	r3, [r7, #20]
      break;
 8004b08:	e002      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	617b      	str	r3, [r7, #20]
      break;
 8004b0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b10:	4b13      	ldr	r3, [pc, #76]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	091b      	lsrs	r3, r3, #4
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b1e:	4b10      	ldr	r3, [pc, #64]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	0a1b      	lsrs	r3, r3, #8
 8004b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	fb02 f203 	mul.w	r2, r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b36:	4b0a      	ldr	r3, [pc, #40]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	0e5b      	lsrs	r3, r3, #25
 8004b3c:	f003 0303 	and.w	r3, r3, #3
 8004b40:	3301      	adds	r3, #1
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b50:	69bb      	ldr	r3, [r7, #24]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3724      	adds	r7, #36	; 0x24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	40021000 	.word	0x40021000
 8004b64:	08007fd0 	.word	0x08007fd0
 8004b68:	00f42400 	.word	0x00f42400
 8004b6c:	007a1200 	.word	0x007a1200

08004b70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b74:	4b03      	ldr	r3, [pc, #12]	; (8004b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b76:	681b      	ldr	r3, [r3, #0]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20000070 	.word	0x20000070

08004b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b8c:	f7ff fff0 	bl	8004b70 <HAL_RCC_GetHCLKFreq>
 8004b90:	4602      	mov	r2, r0
 8004b92:	4b06      	ldr	r3, [pc, #24]	; (8004bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	0a1b      	lsrs	r3, r3, #8
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	4904      	ldr	r1, [pc, #16]	; (8004bb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ba0:	f003 031f 	and.w	r3, r3, #31
 8004ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	08007fc8 	.word	0x08007fc8

08004bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bb8:	f7ff ffda 	bl	8004b70 <HAL_RCC_GetHCLKFreq>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	4b06      	ldr	r3, [pc, #24]	; (8004bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	0adb      	lsrs	r3, r3, #11
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	4904      	ldr	r1, [pc, #16]	; (8004bdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bca:	5ccb      	ldrb	r3, [r1, r3]
 8004bcc:	f003 031f 	and.w	r3, r3, #31
 8004bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	08007fc8 	.word	0x08007fc8

08004be0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	220f      	movs	r2, #15
 8004bee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004bf0:	4b12      	ldr	r3, [pc, #72]	; (8004c3c <HAL_RCC_GetClockConfig+0x5c>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 0203 	and.w	r2, r3, #3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004bfc:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <HAL_RCC_GetClockConfig+0x5c>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004c08:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <HAL_RCC_GetClockConfig+0x5c>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004c14:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <HAL_RCC_GetClockConfig+0x5c>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	08db      	lsrs	r3, r3, #3
 8004c1a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004c22:	4b07      	ldr	r3, [pc, #28]	; (8004c40 <HAL_RCC_GetClockConfig+0x60>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0207 	and.w	r2, r3, #7
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	601a      	str	r2, [r3, #0]
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	40022000 	.word	0x40022000

08004c44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c50:	4b2a      	ldr	r3, [pc, #168]	; (8004cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c5c:	f7ff f9d0 	bl	8004000 <HAL_PWREx_GetVoltageRange>
 8004c60:	6178      	str	r0, [r7, #20]
 8004c62:	e014      	b.n	8004c8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c64:	4b25      	ldr	r3, [pc, #148]	; (8004cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c68:	4a24      	ldr	r2, [pc, #144]	; (8004cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c70:	4b22      	ldr	r3, [pc, #136]	; (8004cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c7c:	f7ff f9c0 	bl	8004000 <HAL_PWREx_GetVoltageRange>
 8004c80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c82:	4b1e      	ldr	r3, [pc, #120]	; (8004cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c86:	4a1d      	ldr	r2, [pc, #116]	; (8004cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c8c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c94:	d10b      	bne.n	8004cae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b80      	cmp	r3, #128	; 0x80
 8004c9a:	d919      	bls.n	8004cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2ba0      	cmp	r3, #160	; 0xa0
 8004ca0:	d902      	bls.n	8004ca8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	e013      	b.n	8004cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ca8:	2301      	movs	r3, #1
 8004caa:	613b      	str	r3, [r7, #16]
 8004cac:	e010      	b.n	8004cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b80      	cmp	r3, #128	; 0x80
 8004cb2:	d902      	bls.n	8004cba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	613b      	str	r3, [r7, #16]
 8004cb8:	e00a      	b.n	8004cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b80      	cmp	r3, #128	; 0x80
 8004cbe:	d102      	bne.n	8004cc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	613b      	str	r3, [r7, #16]
 8004cc4:	e004      	b.n	8004cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b70      	cmp	r3, #112	; 0x70
 8004cca:	d101      	bne.n	8004cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ccc:	2301      	movs	r3, #1
 8004cce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cd0:	4b0b      	ldr	r3, [pc, #44]	; (8004d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f023 0207 	bic.w	r2, r3, #7
 8004cd8:	4909      	ldr	r1, [pc, #36]	; (8004d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ce0:	4b07      	ldr	r3, [pc, #28]	; (8004d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d001      	beq.n	8004cf2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e000      	b.n	8004cf4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	40022000 	.word	0x40022000

08004d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d10:	2300      	movs	r3, #0
 8004d12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d041      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d28:	d02a      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004d2a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d2e:	d824      	bhi.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d34:	d008      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d3a:	d81e      	bhi.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00a      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d44:	d010      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d46:	e018      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d48:	4b86      	ldr	r3, [pc, #536]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	4a85      	ldr	r2, [pc, #532]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d52:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d54:	e015      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 fabb 	bl	80052d8 <RCCEx_PLLSAI1_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d66:	e00c      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3320      	adds	r3, #32
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fba6 	bl	80054c0 <RCCEx_PLLSAI2_Config>
 8004d74:	4603      	mov	r3, r0
 8004d76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d78:	e003      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	74fb      	strb	r3, [r7, #19]
      break;
 8004d7e:	e000      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004d80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d82:	7cfb      	ldrb	r3, [r7, #19]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10b      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d88:	4b76      	ldr	r3, [pc, #472]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d96:	4973      	ldr	r1, [pc, #460]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d9e:	e001      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da0:	7cfb      	ldrb	r3, [r7, #19]
 8004da2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d041      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004db4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004db8:	d02a      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004dba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004dbe:	d824      	bhi.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004dc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dc4:	d008      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004dc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dca:	d81e      	bhi.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004dd4:	d010      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004dd6:	e018      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004dd8:	4b62      	ldr	r3, [pc, #392]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	4a61      	ldr	r2, [pc, #388]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004de4:	e015      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3304      	adds	r3, #4
 8004dea:	2100      	movs	r1, #0
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fa73 	bl	80052d8 <RCCEx_PLLSAI1_Config>
 8004df2:	4603      	mov	r3, r0
 8004df4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004df6:	e00c      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3320      	adds	r3, #32
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fb5e 	bl	80054c0 <RCCEx_PLLSAI2_Config>
 8004e04:	4603      	mov	r3, r0
 8004e06:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e08:	e003      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	74fb      	strb	r3, [r7, #19]
      break;
 8004e0e:	e000      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004e10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e12:	7cfb      	ldrb	r3, [r7, #19]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10b      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e18:	4b52      	ldr	r3, [pc, #328]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e26:	494f      	ldr	r1, [pc, #316]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004e2e:	e001      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e30:	7cfb      	ldrb	r3, [r7, #19]
 8004e32:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 80a0 	beq.w	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e42:	2300      	movs	r3, #0
 8004e44:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e46:	4b47      	ldr	r3, [pc, #284]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004e56:	2300      	movs	r3, #0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00d      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e5c:	4b41      	ldr	r3, [pc, #260]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e60:	4a40      	ldr	r2, [pc, #256]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e66:	6593      	str	r3, [r2, #88]	; 0x58
 8004e68:	4b3e      	ldr	r3, [pc, #248]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e70:	60bb      	str	r3, [r7, #8]
 8004e72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e74:	2301      	movs	r3, #1
 8004e76:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e78:	4b3b      	ldr	r3, [pc, #236]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a3a      	ldr	r2, [pc, #232]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e84:	f7fe f8dc 	bl	8003040 <HAL_GetTick>
 8004e88:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e8a:	e009      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e8c:	f7fe f8d8 	bl	8003040 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d902      	bls.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	74fb      	strb	r3, [r7, #19]
        break;
 8004e9e:	e005      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ea0:	4b31      	ldr	r3, [pc, #196]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0ef      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004eac:	7cfb      	ldrb	r3, [r7, #19]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d15c      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004eb2:	4b2c      	ldr	r3, [pc, #176]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ebc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01f      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d019      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ed0:	4b24      	ldr	r3, [pc, #144]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004edc:	4b21      	ldr	r3, [pc, #132]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee2:	4a20      	ldr	r2, [pc, #128]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004eec:	4b1d      	ldr	r3, [pc, #116]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef2:	4a1c      	ldr	r2, [pc, #112]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004efc:	4a19      	ldr	r2, [pc, #100]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d016      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0e:	f7fe f897 	bl	8003040 <HAL_GetTick>
 8004f12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f14:	e00b      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f16:	f7fe f893 	bl	8003040 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d902      	bls.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	74fb      	strb	r3, [r7, #19]
            break;
 8004f2c:	e006      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f2e:	4b0d      	ldr	r3, [pc, #52]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0ec      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004f3c:	7cfb      	ldrb	r3, [r7, #19]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10c      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f42:	4b08      	ldr	r3, [pc, #32]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f52:	4904      	ldr	r1, [pc, #16]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f5a:	e009      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f5c:	7cfb      	ldrb	r3, [r7, #19]
 8004f5e:	74bb      	strb	r3, [r7, #18]
 8004f60:	e006      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f62:	bf00      	nop
 8004f64:	40021000 	.word	0x40021000
 8004f68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f6c:	7cfb      	ldrb	r3, [r7, #19]
 8004f6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f70:	7c7b      	ldrb	r3, [r7, #17]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d105      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f76:	4b9e      	ldr	r3, [pc, #632]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7a:	4a9d      	ldr	r2, [pc, #628]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f8e:	4b98      	ldr	r3, [pc, #608]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f94:	f023 0203 	bic.w	r2, r3, #3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9c:	4994      	ldr	r1, [pc, #592]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00a      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fb0:	4b8f      	ldr	r3, [pc, #572]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb6:	f023 020c 	bic.w	r2, r3, #12
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fbe:	498c      	ldr	r1, [pc, #560]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0304 	and.w	r3, r3, #4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fd2:	4b87      	ldr	r3, [pc, #540]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	4983      	ldr	r1, [pc, #524]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0308 	and.w	r3, r3, #8
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ff4:	4b7e      	ldr	r3, [pc, #504]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005002:	497b      	ldr	r1, [pc, #492]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0310 	and.w	r3, r3, #16
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005016:	4b76      	ldr	r3, [pc, #472]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005024:	4972      	ldr	r1, [pc, #456]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005038:	4b6d      	ldr	r3, [pc, #436]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800503a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005046:	496a      	ldr	r1, [pc, #424]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005048:	4313      	orrs	r3, r2
 800504a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800505a:	4b65      	ldr	r3, [pc, #404]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800505c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005060:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005068:	4961      	ldr	r1, [pc, #388]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800507c:	4b5c      	ldr	r3, [pc, #368]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005082:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800508a:	4959      	ldr	r1, [pc, #356]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800509e:	4b54      	ldr	r3, [pc, #336]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ac:	4950      	ldr	r1, [pc, #320]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00a      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050c0:	4b4b      	ldr	r3, [pc, #300]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ce:	4948      	ldr	r1, [pc, #288]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050e2:	4b43      	ldr	r3, [pc, #268]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f0:	493f      	ldr	r1, [pc, #252]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d028      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005104:	4b3a      	ldr	r3, [pc, #232]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005112:	4937      	ldr	r1, [pc, #220]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800511e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005122:	d106      	bne.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005124:	4b32      	ldr	r3, [pc, #200]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	4a31      	ldr	r2, [pc, #196]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800512e:	60d3      	str	r3, [r2, #12]
 8005130:	e011      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005136:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800513a:	d10c      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3304      	adds	r3, #4
 8005140:	2101      	movs	r1, #1
 8005142:	4618      	mov	r0, r3
 8005144:	f000 f8c8 	bl	80052d8 <RCCEx_PLLSAI1_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800514c:	7cfb      	ldrb	r3, [r7, #19]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005152:	7cfb      	ldrb	r3, [r7, #19]
 8005154:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d028      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005162:	4b23      	ldr	r3, [pc, #140]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005168:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005170:	491f      	ldr	r1, [pc, #124]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005180:	d106      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005182:	4b1b      	ldr	r3, [pc, #108]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	4a1a      	ldr	r2, [pc, #104]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005188:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800518c:	60d3      	str	r3, [r2, #12]
 800518e:	e011      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005194:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005198:	d10c      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3304      	adds	r3, #4
 800519e:	2101      	movs	r1, #1
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 f899 	bl	80052d8 <RCCEx_PLLSAI1_Config>
 80051a6:	4603      	mov	r3, r0
 80051a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051aa:	7cfb      	ldrb	r3, [r7, #19]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80051b0:	7cfb      	ldrb	r3, [r7, #19]
 80051b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d02b      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051c0:	4b0b      	ldr	r3, [pc, #44]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ce:	4908      	ldr	r1, [pc, #32]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051de:	d109      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051e0:	4b03      	ldr	r3, [pc, #12]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	4a02      	ldr	r2, [pc, #8]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051ea:	60d3      	str	r3, [r2, #12]
 80051ec:	e014      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80051ee:	bf00      	nop
 80051f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051fc:	d10c      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3304      	adds	r3, #4
 8005202:	2101      	movs	r1, #1
 8005204:	4618      	mov	r0, r3
 8005206:	f000 f867 	bl	80052d8 <RCCEx_PLLSAI1_Config>
 800520a:	4603      	mov	r3, r0
 800520c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800520e:	7cfb      	ldrb	r3, [r7, #19]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005214:	7cfb      	ldrb	r3, [r7, #19]
 8005216:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d02f      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005224:	4b2b      	ldr	r3, [pc, #172]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005232:	4928      	ldr	r1, [pc, #160]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800523e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005242:	d10d      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3304      	adds	r3, #4
 8005248:	2102      	movs	r1, #2
 800524a:	4618      	mov	r0, r3
 800524c:	f000 f844 	bl	80052d8 <RCCEx_PLLSAI1_Config>
 8005250:	4603      	mov	r3, r0
 8005252:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005254:	7cfb      	ldrb	r3, [r7, #19]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d014      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800525a:	7cfb      	ldrb	r3, [r7, #19]
 800525c:	74bb      	strb	r3, [r7, #18]
 800525e:	e011      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005268:	d10c      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3320      	adds	r3, #32
 800526e:	2102      	movs	r1, #2
 8005270:	4618      	mov	r0, r3
 8005272:	f000 f925 	bl	80054c0 <RCCEx_PLLSAI2_Config>
 8005276:	4603      	mov	r3, r0
 8005278:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800527a:	7cfb      	ldrb	r3, [r7, #19]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005280:	7cfb      	ldrb	r3, [r7, #19]
 8005282:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00a      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005290:	4b10      	ldr	r3, [pc, #64]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005296:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800529e:	490d      	ldr	r1, [pc, #52]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00b      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052b2:	4b08      	ldr	r3, [pc, #32]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052c2:	4904      	ldr	r1, [pc, #16]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	40021000 	.word	0x40021000

080052d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052e6:	4b75      	ldr	r3, [pc, #468]	; (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d018      	beq.n	8005324 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80052f2:	4b72      	ldr	r3, [pc, #456]	; (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f003 0203 	and.w	r2, r3, #3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d10d      	bne.n	800531e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
       ||
 8005306:	2b00      	cmp	r3, #0
 8005308:	d009      	beq.n	800531e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800530a:	4b6c      	ldr	r3, [pc, #432]	; (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	091b      	lsrs	r3, r3, #4
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
       ||
 800531a:	429a      	cmp	r2, r3
 800531c:	d047      	beq.n	80053ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	73fb      	strb	r3, [r7, #15]
 8005322:	e044      	b.n	80053ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b03      	cmp	r3, #3
 800532a:	d018      	beq.n	800535e <RCCEx_PLLSAI1_Config+0x86>
 800532c:	2b03      	cmp	r3, #3
 800532e:	d825      	bhi.n	800537c <RCCEx_PLLSAI1_Config+0xa4>
 8005330:	2b01      	cmp	r3, #1
 8005332:	d002      	beq.n	800533a <RCCEx_PLLSAI1_Config+0x62>
 8005334:	2b02      	cmp	r3, #2
 8005336:	d009      	beq.n	800534c <RCCEx_PLLSAI1_Config+0x74>
 8005338:	e020      	b.n	800537c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800533a:	4b60      	ldr	r3, [pc, #384]	; (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d11d      	bne.n	8005382 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800534a:	e01a      	b.n	8005382 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800534c:	4b5b      	ldr	r3, [pc, #364]	; (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005354:	2b00      	cmp	r3, #0
 8005356:	d116      	bne.n	8005386 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800535c:	e013      	b.n	8005386 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800535e:	4b57      	ldr	r3, [pc, #348]	; (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10f      	bne.n	800538a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800536a:	4b54      	ldr	r3, [pc, #336]	; (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d109      	bne.n	800538a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800537a:	e006      	b.n	800538a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	73fb      	strb	r3, [r7, #15]
      break;
 8005380:	e004      	b.n	800538c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005382:	bf00      	nop
 8005384:	e002      	b.n	800538c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005386:	bf00      	nop
 8005388:	e000      	b.n	800538c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800538a:	bf00      	nop
    }

    if(status == HAL_OK)
 800538c:	7bfb      	ldrb	r3, [r7, #15]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10d      	bne.n	80053ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005392:	4b4a      	ldr	r3, [pc, #296]	; (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6819      	ldr	r1, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	430b      	orrs	r3, r1
 80053a8:	4944      	ldr	r1, [pc, #272]	; (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d17d      	bne.n	80054b0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053b4:	4b41      	ldr	r3, [pc, #260]	; (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a40      	ldr	r2, [pc, #256]	; (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053c0:	f7fd fe3e 	bl	8003040 <HAL_GetTick>
 80053c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053c6:	e009      	b.n	80053dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053c8:	f7fd fe3a 	bl	8003040 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d902      	bls.n	80053dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	73fb      	strb	r3, [r7, #15]
        break;
 80053da:	e005      	b.n	80053e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053dc:	4b37      	ldr	r3, [pc, #220]	; (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1ef      	bne.n	80053c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d160      	bne.n	80054b0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d111      	bne.n	8005418 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053f4:	4b31      	ldr	r3, [pc, #196]	; (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80053fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6892      	ldr	r2, [r2, #8]
 8005404:	0211      	lsls	r1, r2, #8
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	68d2      	ldr	r2, [r2, #12]
 800540a:	0912      	lsrs	r2, r2, #4
 800540c:	0452      	lsls	r2, r2, #17
 800540e:	430a      	orrs	r2, r1
 8005410:	492a      	ldr	r1, [pc, #168]	; (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005412:	4313      	orrs	r3, r2
 8005414:	610b      	str	r3, [r1, #16]
 8005416:	e027      	b.n	8005468 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d112      	bne.n	8005444 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800541e:	4b27      	ldr	r3, [pc, #156]	; (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005426:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6892      	ldr	r2, [r2, #8]
 800542e:	0211      	lsls	r1, r2, #8
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	6912      	ldr	r2, [r2, #16]
 8005434:	0852      	lsrs	r2, r2, #1
 8005436:	3a01      	subs	r2, #1
 8005438:	0552      	lsls	r2, r2, #21
 800543a:	430a      	orrs	r2, r1
 800543c:	491f      	ldr	r1, [pc, #124]	; (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800543e:	4313      	orrs	r3, r2
 8005440:	610b      	str	r3, [r1, #16]
 8005442:	e011      	b.n	8005468 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005444:	4b1d      	ldr	r3, [pc, #116]	; (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800544c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	6892      	ldr	r2, [r2, #8]
 8005454:	0211      	lsls	r1, r2, #8
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6952      	ldr	r2, [r2, #20]
 800545a:	0852      	lsrs	r2, r2, #1
 800545c:	3a01      	subs	r2, #1
 800545e:	0652      	lsls	r2, r2, #25
 8005460:	430a      	orrs	r2, r1
 8005462:	4916      	ldr	r1, [pc, #88]	; (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005464:	4313      	orrs	r3, r2
 8005466:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005468:	4b14      	ldr	r3, [pc, #80]	; (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a13      	ldr	r2, [pc, #76]	; (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800546e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005472:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005474:	f7fd fde4 	bl	8003040 <HAL_GetTick>
 8005478:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800547a:	e009      	b.n	8005490 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800547c:	f7fd fde0 	bl	8003040 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d902      	bls.n	8005490 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	73fb      	strb	r3, [r7, #15]
          break;
 800548e:	e005      	b.n	800549c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005490:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0ef      	beq.n	800547c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800549c:	7bfb      	ldrb	r3, [r7, #15]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054a2:	4b06      	ldr	r3, [pc, #24]	; (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a4:	691a      	ldr	r2, [r3, #16]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	4904      	ldr	r1, [pc, #16]	; (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	40021000 	.word	0x40021000

080054c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054ce:	4b6a      	ldr	r3, [pc, #424]	; (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d018      	beq.n	800550c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80054da:	4b67      	ldr	r3, [pc, #412]	; (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f003 0203 	and.w	r2, r3, #3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d10d      	bne.n	8005506 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
       ||
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d009      	beq.n	8005506 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80054f2:	4b61      	ldr	r3, [pc, #388]	; (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	091b      	lsrs	r3, r3, #4
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
       ||
 8005502:	429a      	cmp	r2, r3
 8005504:	d047      	beq.n	8005596 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	73fb      	strb	r3, [r7, #15]
 800550a:	e044      	b.n	8005596 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b03      	cmp	r3, #3
 8005512:	d018      	beq.n	8005546 <RCCEx_PLLSAI2_Config+0x86>
 8005514:	2b03      	cmp	r3, #3
 8005516:	d825      	bhi.n	8005564 <RCCEx_PLLSAI2_Config+0xa4>
 8005518:	2b01      	cmp	r3, #1
 800551a:	d002      	beq.n	8005522 <RCCEx_PLLSAI2_Config+0x62>
 800551c:	2b02      	cmp	r3, #2
 800551e:	d009      	beq.n	8005534 <RCCEx_PLLSAI2_Config+0x74>
 8005520:	e020      	b.n	8005564 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005522:	4b55      	ldr	r3, [pc, #340]	; (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d11d      	bne.n	800556a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005532:	e01a      	b.n	800556a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005534:	4b50      	ldr	r3, [pc, #320]	; (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800553c:	2b00      	cmp	r3, #0
 800553e:	d116      	bne.n	800556e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005544:	e013      	b.n	800556e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005546:	4b4c      	ldr	r3, [pc, #304]	; (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10f      	bne.n	8005572 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005552:	4b49      	ldr	r3, [pc, #292]	; (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d109      	bne.n	8005572 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005562:	e006      	b.n	8005572 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	73fb      	strb	r3, [r7, #15]
      break;
 8005568:	e004      	b.n	8005574 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800556a:	bf00      	nop
 800556c:	e002      	b.n	8005574 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800556e:	bf00      	nop
 8005570:	e000      	b.n	8005574 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005572:	bf00      	nop
    }

    if(status == HAL_OK)
 8005574:	7bfb      	ldrb	r3, [r7, #15]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10d      	bne.n	8005596 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800557a:	4b3f      	ldr	r3, [pc, #252]	; (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6819      	ldr	r1, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	3b01      	subs	r3, #1
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	430b      	orrs	r3, r1
 8005590:	4939      	ldr	r1, [pc, #228]	; (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005592:	4313      	orrs	r3, r2
 8005594:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005596:	7bfb      	ldrb	r3, [r7, #15]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d167      	bne.n	800566c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800559c:	4b36      	ldr	r3, [pc, #216]	; (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a35      	ldr	r2, [pc, #212]	; (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055a8:	f7fd fd4a 	bl	8003040 <HAL_GetTick>
 80055ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055ae:	e009      	b.n	80055c4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055b0:	f7fd fd46 	bl	8003040 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d902      	bls.n	80055c4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	73fb      	strb	r3, [r7, #15]
        break;
 80055c2:	e005      	b.n	80055d0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055c4:	4b2c      	ldr	r3, [pc, #176]	; (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1ef      	bne.n	80055b0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80055d0:	7bfb      	ldrb	r3, [r7, #15]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d14a      	bne.n	800566c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d111      	bne.n	8005600 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055dc:	4b26      	ldr	r3, [pc, #152]	; (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80055e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6892      	ldr	r2, [r2, #8]
 80055ec:	0211      	lsls	r1, r2, #8
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	68d2      	ldr	r2, [r2, #12]
 80055f2:	0912      	lsrs	r2, r2, #4
 80055f4:	0452      	lsls	r2, r2, #17
 80055f6:	430a      	orrs	r2, r1
 80055f8:	491f      	ldr	r1, [pc, #124]	; (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	614b      	str	r3, [r1, #20]
 80055fe:	e011      	b.n	8005624 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005600:	4b1d      	ldr	r3, [pc, #116]	; (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005608:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6892      	ldr	r2, [r2, #8]
 8005610:	0211      	lsls	r1, r2, #8
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6912      	ldr	r2, [r2, #16]
 8005616:	0852      	lsrs	r2, r2, #1
 8005618:	3a01      	subs	r2, #1
 800561a:	0652      	lsls	r2, r2, #25
 800561c:	430a      	orrs	r2, r1
 800561e:	4916      	ldr	r1, [pc, #88]	; (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005620:	4313      	orrs	r3, r2
 8005622:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005624:	4b14      	ldr	r3, [pc, #80]	; (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a13      	ldr	r2, [pc, #76]	; (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 800562a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800562e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005630:	f7fd fd06 	bl	8003040 <HAL_GetTick>
 8005634:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005636:	e009      	b.n	800564c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005638:	f7fd fd02 	bl	8003040 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b02      	cmp	r3, #2
 8005644:	d902      	bls.n	800564c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	73fb      	strb	r3, [r7, #15]
          break;
 800564a:	e005      	b.n	8005658 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800564c:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0ef      	beq.n	8005638 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005658:	7bfb      	ldrb	r3, [r7, #15]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800565e:	4b06      	ldr	r3, [pc, #24]	; (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005660:	695a      	ldr	r2, [r3, #20]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	4904      	ldr	r1, [pc, #16]	; (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005668:	4313      	orrs	r3, r2
 800566a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800566c:	7bfb      	ldrb	r3, [r7, #15]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	40021000 	.word	0x40021000

0800567c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e049      	b.n	8005722 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d106      	bne.n	80056a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f841 	bl	800572a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3304      	adds	r3, #4
 80056b8:	4619      	mov	r1, r3
 80056ba:	4610      	mov	r0, r2
 80056bc:	f000 f9f8 	bl	8005ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
	...

08005740 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b01      	cmp	r3, #1
 8005752:	d001      	beq.n	8005758 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e04f      	b.n	80057f8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68da      	ldr	r2, [r3, #12]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 0201 	orr.w	r2, r2, #1
 800576e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a23      	ldr	r2, [pc, #140]	; (8005804 <HAL_TIM_Base_Start_IT+0xc4>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d01d      	beq.n	80057b6 <HAL_TIM_Base_Start_IT+0x76>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005782:	d018      	beq.n	80057b6 <HAL_TIM_Base_Start_IT+0x76>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a1f      	ldr	r2, [pc, #124]	; (8005808 <HAL_TIM_Base_Start_IT+0xc8>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d013      	beq.n	80057b6 <HAL_TIM_Base_Start_IT+0x76>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a1e      	ldr	r2, [pc, #120]	; (800580c <HAL_TIM_Base_Start_IT+0xcc>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d00e      	beq.n	80057b6 <HAL_TIM_Base_Start_IT+0x76>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1c      	ldr	r2, [pc, #112]	; (8005810 <HAL_TIM_Base_Start_IT+0xd0>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d009      	beq.n	80057b6 <HAL_TIM_Base_Start_IT+0x76>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a1b      	ldr	r2, [pc, #108]	; (8005814 <HAL_TIM_Base_Start_IT+0xd4>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d004      	beq.n	80057b6 <HAL_TIM_Base_Start_IT+0x76>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a19      	ldr	r2, [pc, #100]	; (8005818 <HAL_TIM_Base_Start_IT+0xd8>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d115      	bne.n	80057e2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	4b17      	ldr	r3, [pc, #92]	; (800581c <HAL_TIM_Base_Start_IT+0xdc>)
 80057be:	4013      	ands	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2b06      	cmp	r3, #6
 80057c6:	d015      	beq.n	80057f4 <HAL_TIM_Base_Start_IT+0xb4>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ce:	d011      	beq.n	80057f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0201 	orr.w	r2, r2, #1
 80057de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e0:	e008      	b.n	80057f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f042 0201 	orr.w	r2, r2, #1
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	e000      	b.n	80057f6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	40012c00 	.word	0x40012c00
 8005808:	40000400 	.word	0x40000400
 800580c:	40000800 	.word	0x40000800
 8005810:	40000c00 	.word	0x40000c00
 8005814:	40013400 	.word	0x40013400
 8005818:	40014000 	.word	0x40014000
 800581c:	00010007 	.word	0x00010007

08005820 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b02      	cmp	r3, #2
 8005834:	d122      	bne.n	800587c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b02      	cmp	r3, #2
 8005842:	d11b      	bne.n	800587c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f06f 0202 	mvn.w	r2, #2
 800584c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f905 	bl	8005a72 <HAL_TIM_IC_CaptureCallback>
 8005868:	e005      	b.n	8005876 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f8f7 	bl	8005a5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f908 	bl	8005a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	f003 0304 	and.w	r3, r3, #4
 8005886:	2b04      	cmp	r3, #4
 8005888:	d122      	bne.n	80058d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b04      	cmp	r3, #4
 8005896:	d11b      	bne.n	80058d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f06f 0204 	mvn.w	r2, #4
 80058a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2202      	movs	r2, #2
 80058a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f8db 	bl	8005a72 <HAL_TIM_IC_CaptureCallback>
 80058bc:	e005      	b.n	80058ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f8cd 	bl	8005a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f8de 	bl	8005a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b08      	cmp	r3, #8
 80058dc:	d122      	bne.n	8005924 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f003 0308 	and.w	r3, r3, #8
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d11b      	bne.n	8005924 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f06f 0208 	mvn.w	r2, #8
 80058f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2204      	movs	r2, #4
 80058fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	f003 0303 	and.w	r3, r3, #3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f8b1 	bl	8005a72 <HAL_TIM_IC_CaptureCallback>
 8005910:	e005      	b.n	800591e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f8a3 	bl	8005a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f8b4 	bl	8005a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f003 0310 	and.w	r3, r3, #16
 800592e:	2b10      	cmp	r3, #16
 8005930:	d122      	bne.n	8005978 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	f003 0310 	and.w	r3, r3, #16
 800593c:	2b10      	cmp	r3, #16
 800593e:	d11b      	bne.n	8005978 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f06f 0210 	mvn.w	r2, #16
 8005948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2208      	movs	r2, #8
 800594e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f887 	bl	8005a72 <HAL_TIM_IC_CaptureCallback>
 8005964:	e005      	b.n	8005972 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f879 	bl	8005a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f88a 	bl	8005a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b01      	cmp	r3, #1
 8005984:	d10e      	bne.n	80059a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b01      	cmp	r3, #1
 8005992:	d107      	bne.n	80059a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f06f 0201 	mvn.w	r2, #1
 800599c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7fd f950 	bl	8002c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ae:	2b80      	cmp	r3, #128	; 0x80
 80059b0:	d10e      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059bc:	2b80      	cmp	r3, #128	; 0x80
 80059be:	d107      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f914 	bl	8005bf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059de:	d10e      	bne.n	80059fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ea:	2b80      	cmp	r3, #128	; 0x80
 80059ec:	d107      	bne.n	80059fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f907 	bl	8005c0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a08:	2b40      	cmp	r3, #64	; 0x40
 8005a0a:	d10e      	bne.n	8005a2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a16:	2b40      	cmp	r3, #64	; 0x40
 8005a18:	d107      	bne.n	8005a2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f838 	bl	8005a9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f003 0320 	and.w	r3, r3, #32
 8005a34:	2b20      	cmp	r3, #32
 8005a36:	d10e      	bne.n	8005a56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f003 0320 	and.w	r3, r3, #32
 8005a42:	2b20      	cmp	r3, #32
 8005a44:	d107      	bne.n	8005a56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f06f 0220 	mvn.w	r2, #32
 8005a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f8c7 	bl	8005be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a56:	bf00      	nop
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
	...

08005ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a40      	ldr	r2, [pc, #256]	; (8005bc4 <TIM_Base_SetConfig+0x114>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d013      	beq.n	8005af0 <TIM_Base_SetConfig+0x40>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ace:	d00f      	beq.n	8005af0 <TIM_Base_SetConfig+0x40>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a3d      	ldr	r2, [pc, #244]	; (8005bc8 <TIM_Base_SetConfig+0x118>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d00b      	beq.n	8005af0 <TIM_Base_SetConfig+0x40>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a3c      	ldr	r2, [pc, #240]	; (8005bcc <TIM_Base_SetConfig+0x11c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d007      	beq.n	8005af0 <TIM_Base_SetConfig+0x40>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a3b      	ldr	r2, [pc, #236]	; (8005bd0 <TIM_Base_SetConfig+0x120>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d003      	beq.n	8005af0 <TIM_Base_SetConfig+0x40>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a3a      	ldr	r2, [pc, #232]	; (8005bd4 <TIM_Base_SetConfig+0x124>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d108      	bne.n	8005b02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a2f      	ldr	r2, [pc, #188]	; (8005bc4 <TIM_Base_SetConfig+0x114>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d01f      	beq.n	8005b4a <TIM_Base_SetConfig+0x9a>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b10:	d01b      	beq.n	8005b4a <TIM_Base_SetConfig+0x9a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a2c      	ldr	r2, [pc, #176]	; (8005bc8 <TIM_Base_SetConfig+0x118>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d017      	beq.n	8005b4a <TIM_Base_SetConfig+0x9a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a2b      	ldr	r2, [pc, #172]	; (8005bcc <TIM_Base_SetConfig+0x11c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d013      	beq.n	8005b4a <TIM_Base_SetConfig+0x9a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a2a      	ldr	r2, [pc, #168]	; (8005bd0 <TIM_Base_SetConfig+0x120>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d00f      	beq.n	8005b4a <TIM_Base_SetConfig+0x9a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a29      	ldr	r2, [pc, #164]	; (8005bd4 <TIM_Base_SetConfig+0x124>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d00b      	beq.n	8005b4a <TIM_Base_SetConfig+0x9a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a28      	ldr	r2, [pc, #160]	; (8005bd8 <TIM_Base_SetConfig+0x128>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d007      	beq.n	8005b4a <TIM_Base_SetConfig+0x9a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a27      	ldr	r2, [pc, #156]	; (8005bdc <TIM_Base_SetConfig+0x12c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d003      	beq.n	8005b4a <TIM_Base_SetConfig+0x9a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a26      	ldr	r2, [pc, #152]	; (8005be0 <TIM_Base_SetConfig+0x130>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d108      	bne.n	8005b5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a10      	ldr	r2, [pc, #64]	; (8005bc4 <TIM_Base_SetConfig+0x114>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00f      	beq.n	8005ba8 <TIM_Base_SetConfig+0xf8>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a12      	ldr	r2, [pc, #72]	; (8005bd4 <TIM_Base_SetConfig+0x124>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00b      	beq.n	8005ba8 <TIM_Base_SetConfig+0xf8>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a11      	ldr	r2, [pc, #68]	; (8005bd8 <TIM_Base_SetConfig+0x128>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d007      	beq.n	8005ba8 <TIM_Base_SetConfig+0xf8>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a10      	ldr	r2, [pc, #64]	; (8005bdc <TIM_Base_SetConfig+0x12c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d003      	beq.n	8005ba8 <TIM_Base_SetConfig+0xf8>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a0f      	ldr	r2, [pc, #60]	; (8005be0 <TIM_Base_SetConfig+0x130>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d103      	bne.n	8005bb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	615a      	str	r2, [r3, #20]
}
 8005bb6:	bf00      	nop
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	40012c00 	.word	0x40012c00
 8005bc8:	40000400 	.word	0x40000400
 8005bcc:	40000800 	.word	0x40000800
 8005bd0:	40000c00 	.word	0x40000c00
 8005bd4:	40013400 	.word	0x40013400
 8005bd8:	40014000 	.word	0x40014000
 8005bdc:	40014400 	.word	0x40014400
 8005be0:	40014800 	.word	0x40014800

08005be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e040      	b.n	8005cb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7fd f882 	bl	8002d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2224      	movs	r2, #36	; 0x24
 8005c4c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0201 	bic.w	r2, r2, #1
 8005c5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f992 	bl	8005f88 <UART_SetConfig>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d101      	bne.n	8005c6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e022      	b.n	8005cb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fc10 	bl	800649c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0201 	orr.w	r2, r2, #1
 8005caa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fc97 	bl	80065e0 <UART_CheckIdleState>
 8005cb2:	4603      	mov	r3, r0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b08a      	sub	sp, #40	; 0x28
 8005cc0:	af02      	add	r7, sp, #8
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	603b      	str	r3, [r7, #0]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cd0:	2b20      	cmp	r3, #32
 8005cd2:	f040 8082 	bne.w	8005dda <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <HAL_UART_Transmit+0x26>
 8005cdc:	88fb      	ldrh	r3, [r7, #6]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e07a      	b.n	8005ddc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_UART_Transmit+0x38>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e073      	b.n	8005ddc <HAL_UART_Transmit+0x120>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2221      	movs	r2, #33	; 0x21
 8005d08:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d0a:	f7fd f999 	bl	8003040 <HAL_GetTick>
 8005d0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	88fa      	ldrh	r2, [r7, #6]
 8005d14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	88fa      	ldrh	r2, [r7, #6]
 8005d1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d28:	d108      	bne.n	8005d3c <HAL_UART_Transmit+0x80>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d104      	bne.n	8005d3c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	61bb      	str	r3, [r7, #24]
 8005d3a:	e003      	b.n	8005d44 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d40:	2300      	movs	r3, #0
 8005d42:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005d4c:	e02d      	b.n	8005daa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2200      	movs	r2, #0
 8005d56:	2180      	movs	r1, #128	; 0x80
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 fc8a 	bl	8006672 <UART_WaitOnFlagUntilTimeout>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e039      	b.n	8005ddc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10b      	bne.n	8005d86 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	881a      	ldrh	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d7a:	b292      	uxth	r2, r2
 8005d7c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	3302      	adds	r3, #2
 8005d82:	61bb      	str	r3, [r7, #24]
 8005d84:	e008      	b.n	8005d98 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	781a      	ldrb	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	b292      	uxth	r2, r2
 8005d90:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	3301      	adds	r3, #1
 8005d96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	3b01      	subs	r3, #1
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1cb      	bne.n	8005d4e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2140      	movs	r1, #64	; 0x40
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 fc56 	bl	8006672 <UART_WaitOnFlagUntilTimeout>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e005      	b.n	8005ddc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	e000      	b.n	8005ddc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005dda:	2302      	movs	r3, #2
  }
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3720      	adds	r7, #32
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08a      	sub	sp, #40	; 0x28
 8005de8:	af02      	add	r7, sp, #8
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	603b      	str	r3, [r7, #0]
 8005df0:	4613      	mov	r3, r2
 8005df2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005df8:	2b20      	cmp	r3, #32
 8005dfa:	f040 80bf 	bne.w	8005f7c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <HAL_UART_Receive+0x26>
 8005e04:	88fb      	ldrh	r3, [r7, #6]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e0b7      	b.n	8005f7e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d101      	bne.n	8005e1c <HAL_UART_Receive+0x38>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e0b0      	b.n	8005f7e <HAL_UART_Receive+0x19a>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2222      	movs	r2, #34	; 0x22
 8005e30:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e38:	f7fd f902 	bl	8003040 <HAL_GetTick>
 8005e3c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	88fa      	ldrh	r2, [r7, #6]
 8005e42:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	88fa      	ldrh	r2, [r7, #6]
 8005e4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e56:	d10e      	bne.n	8005e76 <HAL_UART_Receive+0x92>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d105      	bne.n	8005e6c <HAL_UART_Receive+0x88>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005e66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e6a:	e02d      	b.n	8005ec8 <HAL_UART_Receive+0xe4>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	22ff      	movs	r2, #255	; 0xff
 8005e70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e74:	e028      	b.n	8005ec8 <HAL_UART_Receive+0xe4>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10d      	bne.n	8005e9a <HAL_UART_Receive+0xb6>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d104      	bne.n	8005e90 <HAL_UART_Receive+0xac>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	22ff      	movs	r2, #255	; 0xff
 8005e8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e8e:	e01b      	b.n	8005ec8 <HAL_UART_Receive+0xe4>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	227f      	movs	r2, #127	; 0x7f
 8005e94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e98:	e016      	b.n	8005ec8 <HAL_UART_Receive+0xe4>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ea2:	d10d      	bne.n	8005ec0 <HAL_UART_Receive+0xdc>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d104      	bne.n	8005eb6 <HAL_UART_Receive+0xd2>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	227f      	movs	r2, #127	; 0x7f
 8005eb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005eb4:	e008      	b.n	8005ec8 <HAL_UART_Receive+0xe4>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	223f      	movs	r2, #63	; 0x3f
 8005eba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ebe:	e003      	b.n	8005ec8 <HAL_UART_Receive+0xe4>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ece:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed8:	d108      	bne.n	8005eec <HAL_UART_Receive+0x108>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d104      	bne.n	8005eec <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	61bb      	str	r3, [r7, #24]
 8005eea:	e003      	b.n	8005ef4 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005efc:	e033      	b.n	8005f66 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2200      	movs	r2, #0
 8005f06:	2120      	movs	r1, #32
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 fbb2 	bl	8006672 <UART_WaitOnFlagUntilTimeout>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e032      	b.n	8005f7e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10c      	bne.n	8005f38 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	8a7b      	ldrh	r3, [r7, #18]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	3302      	adds	r3, #2
 8005f34:	61bb      	str	r3, [r7, #24]
 8005f36:	e00d      	b.n	8005f54 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	8a7b      	ldrh	r3, [r7, #18]
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	4013      	ands	r3, r2
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	3301      	adds	r3, #1
 8005f52:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1c5      	bne.n	8005efe <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2220      	movs	r2, #32
 8005f76:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	e000      	b.n	8005f7e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005f7c:	2302      	movs	r3, #2
  }
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3720      	adds	r7, #32
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
	...

08005f88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f88:	b5b0      	push	{r4, r5, r7, lr}
 8005f8a:	b088      	sub	sp, #32
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689a      	ldr	r2, [r3, #8]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	4bad      	ldr	r3, [pc, #692]	; (8006268 <UART_SetConfig+0x2e0>)
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6812      	ldr	r2, [r2, #0]
 8005fba:	69f9      	ldr	r1, [r7, #28]
 8005fbc:	430b      	orrs	r3, r1
 8005fbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4aa2      	ldr	r2, [pc, #648]	; (800626c <UART_SetConfig+0x2e4>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d004      	beq.n	8005ff0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	69fa      	ldr	r2, [r7, #28]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69fa      	ldr	r2, [r7, #28]
 8006000:	430a      	orrs	r2, r1
 8006002:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a99      	ldr	r2, [pc, #612]	; (8006270 <UART_SetConfig+0x2e8>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d121      	bne.n	8006052 <UART_SetConfig+0xca>
 800600e:	4b99      	ldr	r3, [pc, #612]	; (8006274 <UART_SetConfig+0x2ec>)
 8006010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006014:	f003 0303 	and.w	r3, r3, #3
 8006018:	2b03      	cmp	r3, #3
 800601a:	d817      	bhi.n	800604c <UART_SetConfig+0xc4>
 800601c:	a201      	add	r2, pc, #4	; (adr r2, 8006024 <UART_SetConfig+0x9c>)
 800601e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006022:	bf00      	nop
 8006024:	08006035 	.word	0x08006035
 8006028:	08006041 	.word	0x08006041
 800602c:	0800603b 	.word	0x0800603b
 8006030:	08006047 	.word	0x08006047
 8006034:	2301      	movs	r3, #1
 8006036:	76fb      	strb	r3, [r7, #27]
 8006038:	e0e7      	b.n	800620a <UART_SetConfig+0x282>
 800603a:	2302      	movs	r3, #2
 800603c:	76fb      	strb	r3, [r7, #27]
 800603e:	e0e4      	b.n	800620a <UART_SetConfig+0x282>
 8006040:	2304      	movs	r3, #4
 8006042:	76fb      	strb	r3, [r7, #27]
 8006044:	e0e1      	b.n	800620a <UART_SetConfig+0x282>
 8006046:	2308      	movs	r3, #8
 8006048:	76fb      	strb	r3, [r7, #27]
 800604a:	e0de      	b.n	800620a <UART_SetConfig+0x282>
 800604c:	2310      	movs	r3, #16
 800604e:	76fb      	strb	r3, [r7, #27]
 8006050:	e0db      	b.n	800620a <UART_SetConfig+0x282>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a88      	ldr	r2, [pc, #544]	; (8006278 <UART_SetConfig+0x2f0>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d132      	bne.n	80060c2 <UART_SetConfig+0x13a>
 800605c:	4b85      	ldr	r3, [pc, #532]	; (8006274 <UART_SetConfig+0x2ec>)
 800605e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006062:	f003 030c 	and.w	r3, r3, #12
 8006066:	2b0c      	cmp	r3, #12
 8006068:	d828      	bhi.n	80060bc <UART_SetConfig+0x134>
 800606a:	a201      	add	r2, pc, #4	; (adr r2, 8006070 <UART_SetConfig+0xe8>)
 800606c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006070:	080060a5 	.word	0x080060a5
 8006074:	080060bd 	.word	0x080060bd
 8006078:	080060bd 	.word	0x080060bd
 800607c:	080060bd 	.word	0x080060bd
 8006080:	080060b1 	.word	0x080060b1
 8006084:	080060bd 	.word	0x080060bd
 8006088:	080060bd 	.word	0x080060bd
 800608c:	080060bd 	.word	0x080060bd
 8006090:	080060ab 	.word	0x080060ab
 8006094:	080060bd 	.word	0x080060bd
 8006098:	080060bd 	.word	0x080060bd
 800609c:	080060bd 	.word	0x080060bd
 80060a0:	080060b7 	.word	0x080060b7
 80060a4:	2300      	movs	r3, #0
 80060a6:	76fb      	strb	r3, [r7, #27]
 80060a8:	e0af      	b.n	800620a <UART_SetConfig+0x282>
 80060aa:	2302      	movs	r3, #2
 80060ac:	76fb      	strb	r3, [r7, #27]
 80060ae:	e0ac      	b.n	800620a <UART_SetConfig+0x282>
 80060b0:	2304      	movs	r3, #4
 80060b2:	76fb      	strb	r3, [r7, #27]
 80060b4:	e0a9      	b.n	800620a <UART_SetConfig+0x282>
 80060b6:	2308      	movs	r3, #8
 80060b8:	76fb      	strb	r3, [r7, #27]
 80060ba:	e0a6      	b.n	800620a <UART_SetConfig+0x282>
 80060bc:	2310      	movs	r3, #16
 80060be:	76fb      	strb	r3, [r7, #27]
 80060c0:	e0a3      	b.n	800620a <UART_SetConfig+0x282>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a6d      	ldr	r2, [pc, #436]	; (800627c <UART_SetConfig+0x2f4>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d120      	bne.n	800610e <UART_SetConfig+0x186>
 80060cc:	4b69      	ldr	r3, [pc, #420]	; (8006274 <UART_SetConfig+0x2ec>)
 80060ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060d6:	2b30      	cmp	r3, #48	; 0x30
 80060d8:	d013      	beq.n	8006102 <UART_SetConfig+0x17a>
 80060da:	2b30      	cmp	r3, #48	; 0x30
 80060dc:	d814      	bhi.n	8006108 <UART_SetConfig+0x180>
 80060de:	2b20      	cmp	r3, #32
 80060e0:	d009      	beq.n	80060f6 <UART_SetConfig+0x16e>
 80060e2:	2b20      	cmp	r3, #32
 80060e4:	d810      	bhi.n	8006108 <UART_SetConfig+0x180>
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <UART_SetConfig+0x168>
 80060ea:	2b10      	cmp	r3, #16
 80060ec:	d006      	beq.n	80060fc <UART_SetConfig+0x174>
 80060ee:	e00b      	b.n	8006108 <UART_SetConfig+0x180>
 80060f0:	2300      	movs	r3, #0
 80060f2:	76fb      	strb	r3, [r7, #27]
 80060f4:	e089      	b.n	800620a <UART_SetConfig+0x282>
 80060f6:	2302      	movs	r3, #2
 80060f8:	76fb      	strb	r3, [r7, #27]
 80060fa:	e086      	b.n	800620a <UART_SetConfig+0x282>
 80060fc:	2304      	movs	r3, #4
 80060fe:	76fb      	strb	r3, [r7, #27]
 8006100:	e083      	b.n	800620a <UART_SetConfig+0x282>
 8006102:	2308      	movs	r3, #8
 8006104:	76fb      	strb	r3, [r7, #27]
 8006106:	e080      	b.n	800620a <UART_SetConfig+0x282>
 8006108:	2310      	movs	r3, #16
 800610a:	76fb      	strb	r3, [r7, #27]
 800610c:	e07d      	b.n	800620a <UART_SetConfig+0x282>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a5b      	ldr	r2, [pc, #364]	; (8006280 <UART_SetConfig+0x2f8>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d120      	bne.n	800615a <UART_SetConfig+0x1d2>
 8006118:	4b56      	ldr	r3, [pc, #344]	; (8006274 <UART_SetConfig+0x2ec>)
 800611a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800611e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006122:	2bc0      	cmp	r3, #192	; 0xc0
 8006124:	d013      	beq.n	800614e <UART_SetConfig+0x1c6>
 8006126:	2bc0      	cmp	r3, #192	; 0xc0
 8006128:	d814      	bhi.n	8006154 <UART_SetConfig+0x1cc>
 800612a:	2b80      	cmp	r3, #128	; 0x80
 800612c:	d009      	beq.n	8006142 <UART_SetConfig+0x1ba>
 800612e:	2b80      	cmp	r3, #128	; 0x80
 8006130:	d810      	bhi.n	8006154 <UART_SetConfig+0x1cc>
 8006132:	2b00      	cmp	r3, #0
 8006134:	d002      	beq.n	800613c <UART_SetConfig+0x1b4>
 8006136:	2b40      	cmp	r3, #64	; 0x40
 8006138:	d006      	beq.n	8006148 <UART_SetConfig+0x1c0>
 800613a:	e00b      	b.n	8006154 <UART_SetConfig+0x1cc>
 800613c:	2300      	movs	r3, #0
 800613e:	76fb      	strb	r3, [r7, #27]
 8006140:	e063      	b.n	800620a <UART_SetConfig+0x282>
 8006142:	2302      	movs	r3, #2
 8006144:	76fb      	strb	r3, [r7, #27]
 8006146:	e060      	b.n	800620a <UART_SetConfig+0x282>
 8006148:	2304      	movs	r3, #4
 800614a:	76fb      	strb	r3, [r7, #27]
 800614c:	e05d      	b.n	800620a <UART_SetConfig+0x282>
 800614e:	2308      	movs	r3, #8
 8006150:	76fb      	strb	r3, [r7, #27]
 8006152:	e05a      	b.n	800620a <UART_SetConfig+0x282>
 8006154:	2310      	movs	r3, #16
 8006156:	76fb      	strb	r3, [r7, #27]
 8006158:	e057      	b.n	800620a <UART_SetConfig+0x282>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a49      	ldr	r2, [pc, #292]	; (8006284 <UART_SetConfig+0x2fc>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d125      	bne.n	80061b0 <UART_SetConfig+0x228>
 8006164:	4b43      	ldr	r3, [pc, #268]	; (8006274 <UART_SetConfig+0x2ec>)
 8006166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800616e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006172:	d017      	beq.n	80061a4 <UART_SetConfig+0x21c>
 8006174:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006178:	d817      	bhi.n	80061aa <UART_SetConfig+0x222>
 800617a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800617e:	d00b      	beq.n	8006198 <UART_SetConfig+0x210>
 8006180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006184:	d811      	bhi.n	80061aa <UART_SetConfig+0x222>
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <UART_SetConfig+0x20a>
 800618a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800618e:	d006      	beq.n	800619e <UART_SetConfig+0x216>
 8006190:	e00b      	b.n	80061aa <UART_SetConfig+0x222>
 8006192:	2300      	movs	r3, #0
 8006194:	76fb      	strb	r3, [r7, #27]
 8006196:	e038      	b.n	800620a <UART_SetConfig+0x282>
 8006198:	2302      	movs	r3, #2
 800619a:	76fb      	strb	r3, [r7, #27]
 800619c:	e035      	b.n	800620a <UART_SetConfig+0x282>
 800619e:	2304      	movs	r3, #4
 80061a0:	76fb      	strb	r3, [r7, #27]
 80061a2:	e032      	b.n	800620a <UART_SetConfig+0x282>
 80061a4:	2308      	movs	r3, #8
 80061a6:	76fb      	strb	r3, [r7, #27]
 80061a8:	e02f      	b.n	800620a <UART_SetConfig+0x282>
 80061aa:	2310      	movs	r3, #16
 80061ac:	76fb      	strb	r3, [r7, #27]
 80061ae:	e02c      	b.n	800620a <UART_SetConfig+0x282>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a2d      	ldr	r2, [pc, #180]	; (800626c <UART_SetConfig+0x2e4>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d125      	bne.n	8006206 <UART_SetConfig+0x27e>
 80061ba:	4b2e      	ldr	r3, [pc, #184]	; (8006274 <UART_SetConfig+0x2ec>)
 80061bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061c8:	d017      	beq.n	80061fa <UART_SetConfig+0x272>
 80061ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061ce:	d817      	bhi.n	8006200 <UART_SetConfig+0x278>
 80061d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061d4:	d00b      	beq.n	80061ee <UART_SetConfig+0x266>
 80061d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061da:	d811      	bhi.n	8006200 <UART_SetConfig+0x278>
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d003      	beq.n	80061e8 <UART_SetConfig+0x260>
 80061e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061e4:	d006      	beq.n	80061f4 <UART_SetConfig+0x26c>
 80061e6:	e00b      	b.n	8006200 <UART_SetConfig+0x278>
 80061e8:	2300      	movs	r3, #0
 80061ea:	76fb      	strb	r3, [r7, #27]
 80061ec:	e00d      	b.n	800620a <UART_SetConfig+0x282>
 80061ee:	2302      	movs	r3, #2
 80061f0:	76fb      	strb	r3, [r7, #27]
 80061f2:	e00a      	b.n	800620a <UART_SetConfig+0x282>
 80061f4:	2304      	movs	r3, #4
 80061f6:	76fb      	strb	r3, [r7, #27]
 80061f8:	e007      	b.n	800620a <UART_SetConfig+0x282>
 80061fa:	2308      	movs	r3, #8
 80061fc:	76fb      	strb	r3, [r7, #27]
 80061fe:	e004      	b.n	800620a <UART_SetConfig+0x282>
 8006200:	2310      	movs	r3, #16
 8006202:	76fb      	strb	r3, [r7, #27]
 8006204:	e001      	b.n	800620a <UART_SetConfig+0x282>
 8006206:	2310      	movs	r3, #16
 8006208:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a17      	ldr	r2, [pc, #92]	; (800626c <UART_SetConfig+0x2e4>)
 8006210:	4293      	cmp	r3, r2
 8006212:	f040 8087 	bne.w	8006324 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006216:	7efb      	ldrb	r3, [r7, #27]
 8006218:	2b08      	cmp	r3, #8
 800621a:	d837      	bhi.n	800628c <UART_SetConfig+0x304>
 800621c:	a201      	add	r2, pc, #4	; (adr r2, 8006224 <UART_SetConfig+0x29c>)
 800621e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006222:	bf00      	nop
 8006224:	08006249 	.word	0x08006249
 8006228:	0800628d 	.word	0x0800628d
 800622c:	08006251 	.word	0x08006251
 8006230:	0800628d 	.word	0x0800628d
 8006234:	08006257 	.word	0x08006257
 8006238:	0800628d 	.word	0x0800628d
 800623c:	0800628d 	.word	0x0800628d
 8006240:	0800628d 	.word	0x0800628d
 8006244:	0800625f 	.word	0x0800625f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006248:	f7fe fc9e 	bl	8004b88 <HAL_RCC_GetPCLK1Freq>
 800624c:	6178      	str	r0, [r7, #20]
        break;
 800624e:	e022      	b.n	8006296 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006250:	4b0d      	ldr	r3, [pc, #52]	; (8006288 <UART_SetConfig+0x300>)
 8006252:	617b      	str	r3, [r7, #20]
        break;
 8006254:	e01f      	b.n	8006296 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006256:	f7fe fbff 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 800625a:	6178      	str	r0, [r7, #20]
        break;
 800625c:	e01b      	b.n	8006296 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800625e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006262:	617b      	str	r3, [r7, #20]
        break;
 8006264:	e017      	b.n	8006296 <UART_SetConfig+0x30e>
 8006266:	bf00      	nop
 8006268:	efff69f3 	.word	0xefff69f3
 800626c:	40008000 	.word	0x40008000
 8006270:	40013800 	.word	0x40013800
 8006274:	40021000 	.word	0x40021000
 8006278:	40004400 	.word	0x40004400
 800627c:	40004800 	.word	0x40004800
 8006280:	40004c00 	.word	0x40004c00
 8006284:	40005000 	.word	0x40005000
 8006288:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	76bb      	strb	r3, [r7, #26]
        break;
 8006294:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 80f1 	beq.w	8006480 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	4613      	mov	r3, r2
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	4413      	add	r3, r2
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d305      	bcc.n	80062ba <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d902      	bls.n	80062c0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	76bb      	strb	r3, [r7, #26]
 80062be:	e0df      	b.n	8006480 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f04f 0100 	mov.w	r1, #0
 80062c8:	f04f 0200 	mov.w	r2, #0
 80062cc:	f04f 0300 	mov.w	r3, #0
 80062d0:	020b      	lsls	r3, r1, #8
 80062d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80062d6:	0202      	lsls	r2, r0, #8
 80062d8:	6879      	ldr	r1, [r7, #4]
 80062da:	6849      	ldr	r1, [r1, #4]
 80062dc:	0849      	lsrs	r1, r1, #1
 80062de:	4608      	mov	r0, r1
 80062e0:	f04f 0100 	mov.w	r1, #0
 80062e4:	1814      	adds	r4, r2, r0
 80062e6:	eb43 0501 	adc.w	r5, r3, r1
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	461a      	mov	r2, r3
 80062f0:	f04f 0300 	mov.w	r3, #0
 80062f4:	4620      	mov	r0, r4
 80062f6:	4629      	mov	r1, r5
 80062f8:	f7f9 ffc2 	bl	8000280 <__aeabi_uldivmod>
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	4613      	mov	r3, r2
 8006302:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800630a:	d308      	bcc.n	800631e <UART_SetConfig+0x396>
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006312:	d204      	bcs.n	800631e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	60da      	str	r2, [r3, #12]
 800631c:	e0b0      	b.n	8006480 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	76bb      	strb	r3, [r7, #26]
 8006322:	e0ad      	b.n	8006480 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800632c:	d15c      	bne.n	80063e8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800632e:	7efb      	ldrb	r3, [r7, #27]
 8006330:	2b08      	cmp	r3, #8
 8006332:	d828      	bhi.n	8006386 <UART_SetConfig+0x3fe>
 8006334:	a201      	add	r2, pc, #4	; (adr r2, 800633c <UART_SetConfig+0x3b4>)
 8006336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633a:	bf00      	nop
 800633c:	08006361 	.word	0x08006361
 8006340:	08006369 	.word	0x08006369
 8006344:	08006371 	.word	0x08006371
 8006348:	08006387 	.word	0x08006387
 800634c:	08006377 	.word	0x08006377
 8006350:	08006387 	.word	0x08006387
 8006354:	08006387 	.word	0x08006387
 8006358:	08006387 	.word	0x08006387
 800635c:	0800637f 	.word	0x0800637f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006360:	f7fe fc12 	bl	8004b88 <HAL_RCC_GetPCLK1Freq>
 8006364:	6178      	str	r0, [r7, #20]
        break;
 8006366:	e013      	b.n	8006390 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006368:	f7fe fc24 	bl	8004bb4 <HAL_RCC_GetPCLK2Freq>
 800636c:	6178      	str	r0, [r7, #20]
        break;
 800636e:	e00f      	b.n	8006390 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006370:	4b49      	ldr	r3, [pc, #292]	; (8006498 <UART_SetConfig+0x510>)
 8006372:	617b      	str	r3, [r7, #20]
        break;
 8006374:	e00c      	b.n	8006390 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006376:	f7fe fb6f 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 800637a:	6178      	str	r0, [r7, #20]
        break;
 800637c:	e008      	b.n	8006390 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800637e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006382:	617b      	str	r3, [r7, #20]
        break;
 8006384:	e004      	b.n	8006390 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	76bb      	strb	r3, [r7, #26]
        break;
 800638e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d074      	beq.n	8006480 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	005a      	lsls	r2, r3, #1
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	085b      	lsrs	r3, r3, #1
 80063a0:	441a      	add	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	2b0f      	cmp	r3, #15
 80063b2:	d916      	bls.n	80063e2 <UART_SetConfig+0x45a>
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ba:	d212      	bcs.n	80063e2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	b29b      	uxth	r3, r3
 80063c0:	f023 030f 	bic.w	r3, r3, #15
 80063c4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	085b      	lsrs	r3, r3, #1
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	89fb      	ldrh	r3, [r7, #14]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	89fa      	ldrh	r2, [r7, #14]
 80063de:	60da      	str	r2, [r3, #12]
 80063e0:	e04e      	b.n	8006480 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	76bb      	strb	r3, [r7, #26]
 80063e6:	e04b      	b.n	8006480 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063e8:	7efb      	ldrb	r3, [r7, #27]
 80063ea:	2b08      	cmp	r3, #8
 80063ec:	d827      	bhi.n	800643e <UART_SetConfig+0x4b6>
 80063ee:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <UART_SetConfig+0x46c>)
 80063f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f4:	08006419 	.word	0x08006419
 80063f8:	08006421 	.word	0x08006421
 80063fc:	08006429 	.word	0x08006429
 8006400:	0800643f 	.word	0x0800643f
 8006404:	0800642f 	.word	0x0800642f
 8006408:	0800643f 	.word	0x0800643f
 800640c:	0800643f 	.word	0x0800643f
 8006410:	0800643f 	.word	0x0800643f
 8006414:	08006437 	.word	0x08006437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006418:	f7fe fbb6 	bl	8004b88 <HAL_RCC_GetPCLK1Freq>
 800641c:	6178      	str	r0, [r7, #20]
        break;
 800641e:	e013      	b.n	8006448 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006420:	f7fe fbc8 	bl	8004bb4 <HAL_RCC_GetPCLK2Freq>
 8006424:	6178      	str	r0, [r7, #20]
        break;
 8006426:	e00f      	b.n	8006448 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006428:	4b1b      	ldr	r3, [pc, #108]	; (8006498 <UART_SetConfig+0x510>)
 800642a:	617b      	str	r3, [r7, #20]
        break;
 800642c:	e00c      	b.n	8006448 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800642e:	f7fe fb13 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 8006432:	6178      	str	r0, [r7, #20]
        break;
 8006434:	e008      	b.n	8006448 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800643a:	617b      	str	r3, [r7, #20]
        break;
 800643c:	e004      	b.n	8006448 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	76bb      	strb	r3, [r7, #26]
        break;
 8006446:	bf00      	nop
    }

    if (pclk != 0U)
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d018      	beq.n	8006480 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	085a      	lsrs	r2, r3, #1
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	441a      	add	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006460:	b29b      	uxth	r3, r3
 8006462:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	2b0f      	cmp	r3, #15
 8006468:	d908      	bls.n	800647c <UART_SetConfig+0x4f4>
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006470:	d204      	bcs.n	800647c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	60da      	str	r2, [r3, #12]
 800647a:	e001      	b.n	8006480 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800648c:	7ebb      	ldrb	r3, [r7, #26]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3720      	adds	r7, #32
 8006492:	46bd      	mov	sp, r7
 8006494:	bdb0      	pop	{r4, r5, r7, pc}
 8006496:	bf00      	nop
 8006498:	00f42400 	.word	0x00f42400

0800649c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00a      	beq.n	80064c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00a      	beq.n	80064e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00a      	beq.n	800650a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650e:	f003 0308 	and.w	r3, r3, #8
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	f003 0310 	and.w	r3, r3, #16
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00a      	beq.n	800654e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01a      	beq.n	80065b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800659a:	d10a      	bne.n	80065b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	605a      	str	r2, [r3, #4]
  }
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af02      	add	r7, sp, #8
 80065e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065f0:	f7fc fd26 	bl	8003040 <HAL_GetTick>
 80065f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0308 	and.w	r3, r3, #8
 8006600:	2b08      	cmp	r3, #8
 8006602:	d10e      	bne.n	8006622 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006604:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f82d 	bl	8006672 <UART_WaitOnFlagUntilTimeout>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e023      	b.n	800666a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b04      	cmp	r3, #4
 800662e:	d10e      	bne.n	800664e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006630:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f817 	bl	8006672 <UART_WaitOnFlagUntilTimeout>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e00d      	b.n	800666a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2220      	movs	r2, #32
 8006652:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2220      	movs	r2, #32
 8006658:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b084      	sub	sp, #16
 8006676:	af00      	add	r7, sp, #0
 8006678:	60f8      	str	r0, [r7, #12]
 800667a:	60b9      	str	r1, [r7, #8]
 800667c:	603b      	str	r3, [r7, #0]
 800667e:	4613      	mov	r3, r2
 8006680:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006682:	e05e      	b.n	8006742 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668a:	d05a      	beq.n	8006742 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800668c:	f7fc fcd8 	bl	8003040 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	429a      	cmp	r2, r3
 800669a:	d302      	bcc.n	80066a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d11b      	bne.n	80066da <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066b0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0201 	bic.w	r2, r2, #1
 80066c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2220      	movs	r2, #32
 80066c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2220      	movs	r2, #32
 80066cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e043      	b.n	8006762 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0304 	and.w	r3, r3, #4
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d02c      	beq.n	8006742 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066f6:	d124      	bne.n	8006742 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006700:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006710:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 0201 	bic.w	r2, r2, #1
 8006720:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2220      	movs	r2, #32
 8006726:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2220      	movs	r2, #32
 800672c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2220      	movs	r2, #32
 8006732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e00f      	b.n	8006762 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69da      	ldr	r2, [r3, #28]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	4013      	ands	r3, r2
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	429a      	cmp	r2, r3
 8006750:	bf0c      	ite	eq
 8006752:	2301      	moveq	r3, #1
 8006754:	2300      	movne	r3, #0
 8006756:	b2db      	uxtb	r3, r3
 8006758:	461a      	mov	r2, r3
 800675a:	79fb      	ldrb	r3, [r7, #7]
 800675c:	429a      	cmp	r2, r3
 800675e:	d091      	beq.n	8006684 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800676a:	b480      	push	{r7}
 800676c:	b085      	sub	sp, #20
 800676e:	af00      	add	r7, sp, #0
 8006770:	4603      	mov	r3, r0
 8006772:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006774:	2300      	movs	r3, #0
 8006776:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006778:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800677c:	2b84      	cmp	r3, #132	; 0x84
 800677e:	d005      	beq.n	800678c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006780:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4413      	add	r3, r2
 8006788:	3303      	adds	r3, #3
 800678a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800678c:	68fb      	ldr	r3, [r7, #12]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800679e:	f000 fa5d 	bl	8006c5c <vTaskStartScheduler>
  
  return osOK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80067a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067aa:	b089      	sub	sp, #36	; 0x24
 80067ac:	af04      	add	r7, sp, #16
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d020      	beq.n	80067fc <osThreadCreate+0x54>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d01c      	beq.n	80067fc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685c      	ldr	r4, [r3, #4]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681d      	ldr	r5, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	691e      	ldr	r6, [r3, #16]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff ffc8 	bl	800676a <makeFreeRtosPriority>
 80067da:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067e4:	9202      	str	r2, [sp, #8]
 80067e6:	9301      	str	r3, [sp, #4]
 80067e8:	9100      	str	r1, [sp, #0]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	4632      	mov	r2, r6
 80067ee:	4629      	mov	r1, r5
 80067f0:	4620      	mov	r0, r4
 80067f2:	f000 f8a0 	bl	8006936 <xTaskCreateStatic>
 80067f6:	4603      	mov	r3, r0
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	e01c      	b.n	8006836 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685c      	ldr	r4, [r3, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006808:	b29e      	uxth	r6, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006810:	4618      	mov	r0, r3
 8006812:	f7ff ffaa 	bl	800676a <makeFreeRtosPriority>
 8006816:	4602      	mov	r2, r0
 8006818:	f107 030c 	add.w	r3, r7, #12
 800681c:	9301      	str	r3, [sp, #4]
 800681e:	9200      	str	r2, [sp, #0]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	4632      	mov	r2, r6
 8006824:	4629      	mov	r1, r5
 8006826:	4620      	mov	r0, r4
 8006828:	f000 f8e2 	bl	80069f0 <xTaskCreate>
 800682c:	4603      	mov	r3, r0
 800682e:	2b01      	cmp	r3, #1
 8006830:	d001      	beq.n	8006836 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006832:	2300      	movs	r3, #0
 8006834:	e000      	b.n	8006838 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006836:	68fb      	ldr	r3, [r7, #12]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006840 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f103 0208 	add.w	r2, r3, #8
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f04f 32ff 	mov.w	r2, #4294967295
 8006858:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f103 0208 	add.w	r2, r3, #8
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f103 0208 	add.w	r2, r3, #8
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800688e:	bf00      	nop
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800689a:	b480      	push	{r7}
 800689c:	b085      	sub	sp, #20
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	689a      	ldr	r2, [r3, #8]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	1c5a      	adds	r2, r3, #1
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	601a      	str	r2, [r3, #0]
}
 80068d6:	bf00      	nop
 80068d8:	3714      	adds	r7, #20
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068e2:	b480      	push	{r7}
 80068e4:	b085      	sub	sp, #20
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	6892      	ldr	r2, [r2, #8]
 80068f8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	6852      	ldr	r2, [r2, #4]
 8006902:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	429a      	cmp	r2, r3
 800690c:	d103      	bne.n	8006916 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	689a      	ldr	r2, [r3, #8]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	1e5a      	subs	r2, r3, #1
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006936:	b580      	push	{r7, lr}
 8006938:	b08e      	sub	sp, #56	; 0x38
 800693a:	af04      	add	r7, sp, #16
 800693c:	60f8      	str	r0, [r7, #12]
 800693e:	60b9      	str	r1, [r7, #8]
 8006940:	607a      	str	r2, [r7, #4]
 8006942:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10a      	bne.n	8006960 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800694a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694e:	f383 8811 	msr	BASEPRI, r3
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800695c:	bf00      	nop
 800695e:	e7fe      	b.n	800695e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10a      	bne.n	800697c <xTaskCreateStatic+0x46>
	__asm volatile
 8006966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	61fb      	str	r3, [r7, #28]
}
 8006978:	bf00      	nop
 800697a:	e7fe      	b.n	800697a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800697c:	2354      	movs	r3, #84	; 0x54
 800697e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	2b54      	cmp	r3, #84	; 0x54
 8006984:	d00a      	beq.n	800699c <xTaskCreateStatic+0x66>
	__asm volatile
 8006986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	61bb      	str	r3, [r7, #24]
}
 8006998:	bf00      	nop
 800699a:	e7fe      	b.n	800699a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800699c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800699e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d01e      	beq.n	80069e2 <xTaskCreateStatic+0xac>
 80069a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d01b      	beq.n	80069e2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ac:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069b2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069bc:	2300      	movs	r3, #0
 80069be:	9303      	str	r3, [sp, #12]
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	9302      	str	r3, [sp, #8]
 80069c4:	f107 0314 	add.w	r3, r7, #20
 80069c8:	9301      	str	r3, [sp, #4]
 80069ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	68b9      	ldr	r1, [r7, #8]
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 f850 	bl	8006a7a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069dc:	f000 f8d4 	bl	8006b88 <prvAddNewTaskToReadyList>
 80069e0:	e001      	b.n	80069e6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80069e2:	2300      	movs	r3, #0
 80069e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80069e6:	697b      	ldr	r3, [r7, #20]
	}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3728      	adds	r7, #40	; 0x28
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08c      	sub	sp, #48	; 0x30
 80069f4:	af04      	add	r7, sp, #16
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	603b      	str	r3, [r7, #0]
 80069fc:	4613      	mov	r3, r2
 80069fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a00:	88fb      	ldrh	r3, [r7, #6]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4618      	mov	r0, r3
 8006a06:	f000 fe3f 	bl	8007688 <pvPortMalloc>
 8006a0a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00e      	beq.n	8006a30 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a12:	2054      	movs	r0, #84	; 0x54
 8006a14:	f000 fe38 	bl	8007688 <pvPortMalloc>
 8006a18:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d003      	beq.n	8006a28 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	631a      	str	r2, [r3, #48]	; 0x30
 8006a26:	e005      	b.n	8006a34 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a28:	6978      	ldr	r0, [r7, #20]
 8006a2a:	f000 fef9 	bl	8007820 <vPortFree>
 8006a2e:	e001      	b.n	8006a34 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a30:	2300      	movs	r3, #0
 8006a32:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d017      	beq.n	8006a6a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a42:	88fa      	ldrh	r2, [r7, #6]
 8006a44:	2300      	movs	r3, #0
 8006a46:	9303      	str	r3, [sp, #12]
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	9302      	str	r3, [sp, #8]
 8006a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4e:	9301      	str	r3, [sp, #4]
 8006a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	68b9      	ldr	r1, [r7, #8]
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f000 f80e 	bl	8006a7a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a5e:	69f8      	ldr	r0, [r7, #28]
 8006a60:	f000 f892 	bl	8006b88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a64:	2301      	movs	r3, #1
 8006a66:	61bb      	str	r3, [r7, #24]
 8006a68:	e002      	b.n	8006a70 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a70:	69bb      	ldr	r3, [r7, #24]
	}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3720      	adds	r7, #32
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b088      	sub	sp, #32
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	607a      	str	r2, [r7, #4]
 8006a86:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a92:	3b01      	subs	r3, #1
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	f023 0307 	bic.w	r3, r3, #7
 8006aa0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	f003 0307 	and.w	r3, r3, #7
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00a      	beq.n	8006ac2 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	617b      	str	r3, [r7, #20]
}
 8006abe:	bf00      	nop
 8006ac0:	e7fe      	b.n	8006ac0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d01f      	beq.n	8006b08 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ac8:	2300      	movs	r3, #0
 8006aca:	61fb      	str	r3, [r7, #28]
 8006acc:	e012      	b.n	8006af4 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	7819      	ldrb	r1, [r3, #0]
 8006ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	4413      	add	r3, r2
 8006adc:	3334      	adds	r3, #52	; 0x34
 8006ade:	460a      	mov	r2, r1
 8006ae0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d006      	beq.n	8006afc <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	3301      	adds	r3, #1
 8006af2:	61fb      	str	r3, [r7, #28]
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	2b0f      	cmp	r3, #15
 8006af8:	d9e9      	bls.n	8006ace <prvInitialiseNewTask+0x54>
 8006afa:	e000      	b.n	8006afe <prvInitialiseNewTask+0x84>
			{
				break;
 8006afc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b06:	e003      	b.n	8006b10 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b12:	2b06      	cmp	r3, #6
 8006b14:	d901      	bls.n	8006b1a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b16:	2306      	movs	r3, #6
 8006b18:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b1e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b24:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b28:	2200      	movs	r2, #0
 8006b2a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	3304      	adds	r3, #4
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7ff fea5 	bl	8006880 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b38:	3318      	adds	r3, #24
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7ff fea0 	bl	8006880 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b44:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b48:	f1c3 0207 	rsb	r2, r3, #7
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b54:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	2200      	movs	r2, #0
 8006b5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	68f9      	ldr	r1, [r7, #12]
 8006b68:	69b8      	ldr	r0, [r7, #24]
 8006b6a:	f000 fb7b 	bl	8007264 <pxPortInitialiseStack>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d002      	beq.n	8006b80 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b80:	bf00      	nop
 8006b82:	3720      	adds	r7, #32
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b90:	f000 fc98 	bl	80074c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b94:	4b2a      	ldr	r3, [pc, #168]	; (8006c40 <prvAddNewTaskToReadyList+0xb8>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	4a29      	ldr	r2, [pc, #164]	; (8006c40 <prvAddNewTaskToReadyList+0xb8>)
 8006b9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b9e:	4b29      	ldr	r3, [pc, #164]	; (8006c44 <prvAddNewTaskToReadyList+0xbc>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d109      	bne.n	8006bba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ba6:	4a27      	ldr	r2, [pc, #156]	; (8006c44 <prvAddNewTaskToReadyList+0xbc>)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006bac:	4b24      	ldr	r3, [pc, #144]	; (8006c40 <prvAddNewTaskToReadyList+0xb8>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d110      	bne.n	8006bd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006bb4:	f000 fa98 	bl	80070e8 <prvInitialiseTaskLists>
 8006bb8:	e00d      	b.n	8006bd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006bba:	4b23      	ldr	r3, [pc, #140]	; (8006c48 <prvAddNewTaskToReadyList+0xc0>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d109      	bne.n	8006bd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006bc2:	4b20      	ldr	r3, [pc, #128]	; (8006c44 <prvAddNewTaskToReadyList+0xbc>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d802      	bhi.n	8006bd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006bd0:	4a1c      	ldr	r2, [pc, #112]	; (8006c44 <prvAddNewTaskToReadyList+0xbc>)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006bd6:	4b1d      	ldr	r3, [pc, #116]	; (8006c4c <prvAddNewTaskToReadyList+0xc4>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	4a1b      	ldr	r2, [pc, #108]	; (8006c4c <prvAddNewTaskToReadyList+0xc4>)
 8006bde:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be4:	2201      	movs	r2, #1
 8006be6:	409a      	lsls	r2, r3
 8006be8:	4b19      	ldr	r3, [pc, #100]	; (8006c50 <prvAddNewTaskToReadyList+0xc8>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	4a18      	ldr	r2, [pc, #96]	; (8006c50 <prvAddNewTaskToReadyList+0xc8>)
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4a15      	ldr	r2, [pc, #84]	; (8006c54 <prvAddNewTaskToReadyList+0xcc>)
 8006c00:	441a      	add	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	3304      	adds	r3, #4
 8006c06:	4619      	mov	r1, r3
 8006c08:	4610      	mov	r0, r2
 8006c0a:	f7ff fe46 	bl	800689a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c0e:	f000 fc89 	bl	8007524 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c12:	4b0d      	ldr	r3, [pc, #52]	; (8006c48 <prvAddNewTaskToReadyList+0xc0>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00e      	beq.n	8006c38 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c1a:	4b0a      	ldr	r3, [pc, #40]	; (8006c44 <prvAddNewTaskToReadyList+0xbc>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d207      	bcs.n	8006c38 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c28:	4b0b      	ldr	r3, [pc, #44]	; (8006c58 <prvAddNewTaskToReadyList+0xd0>)
 8006c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c2e:	601a      	str	r2, [r3, #0]
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c38:	bf00      	nop
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	20000518 	.word	0x20000518
 8006c44:	20000418 	.word	0x20000418
 8006c48:	20000524 	.word	0x20000524
 8006c4c:	20000534 	.word	0x20000534
 8006c50:	20000520 	.word	0x20000520
 8006c54:	2000041c 	.word	0x2000041c
 8006c58:	e000ed04 	.word	0xe000ed04

08006c5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b08a      	sub	sp, #40	; 0x28
 8006c60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c62:	2300      	movs	r3, #0
 8006c64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c6a:	463a      	mov	r2, r7
 8006c6c:	1d39      	adds	r1, r7, #4
 8006c6e:	f107 0308 	add.w	r3, r7, #8
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fb fcbe 	bl	80025f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	9202      	str	r2, [sp, #8]
 8006c80:	9301      	str	r3, [sp, #4]
 8006c82:	2300      	movs	r3, #0
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	2300      	movs	r3, #0
 8006c88:	460a      	mov	r2, r1
 8006c8a:	491e      	ldr	r1, [pc, #120]	; (8006d04 <vTaskStartScheduler+0xa8>)
 8006c8c:	481e      	ldr	r0, [pc, #120]	; (8006d08 <vTaskStartScheduler+0xac>)
 8006c8e:	f7ff fe52 	bl	8006936 <xTaskCreateStatic>
 8006c92:	4603      	mov	r3, r0
 8006c94:	4a1d      	ldr	r2, [pc, #116]	; (8006d0c <vTaskStartScheduler+0xb0>)
 8006c96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c98:	4b1c      	ldr	r3, [pc, #112]	; (8006d0c <vTaskStartScheduler+0xb0>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	617b      	str	r3, [r7, #20]
 8006ca4:	e001      	b.n	8006caa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d116      	bne.n	8006cde <vTaskStartScheduler+0x82>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	613b      	str	r3, [r7, #16]
}
 8006cc2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006cc4:	4b12      	ldr	r3, [pc, #72]	; (8006d10 <vTaskStartScheduler+0xb4>)
 8006cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ccc:	4b11      	ldr	r3, [pc, #68]	; (8006d14 <vTaskStartScheduler+0xb8>)
 8006cce:	2201      	movs	r2, #1
 8006cd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006cd2:	4b11      	ldr	r3, [pc, #68]	; (8006d18 <vTaskStartScheduler+0xbc>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006cd8:	f000 fb52 	bl	8007380 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006cdc:	e00e      	b.n	8006cfc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce4:	d10a      	bne.n	8006cfc <vTaskStartScheduler+0xa0>
	__asm volatile
 8006ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	60fb      	str	r3, [r7, #12]
}
 8006cf8:	bf00      	nop
 8006cfa:	e7fe      	b.n	8006cfa <vTaskStartScheduler+0x9e>
}
 8006cfc:	bf00      	nop
 8006cfe:	3718      	adds	r7, #24
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	08007f94 	.word	0x08007f94
 8006d08:	080070b9 	.word	0x080070b9
 8006d0c:	2000053c 	.word	0x2000053c
 8006d10:	20000538 	.word	0x20000538
 8006d14:	20000524 	.word	0x20000524
 8006d18:	2000051c 	.word	0x2000051c

08006d1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006d20:	4b04      	ldr	r3, [pc, #16]	; (8006d34 <vTaskSuspendAll+0x18>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3301      	adds	r3, #1
 8006d26:	4a03      	ldr	r2, [pc, #12]	; (8006d34 <vTaskSuspendAll+0x18>)
 8006d28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006d2a:	bf00      	nop
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	20000540 	.word	0x20000540

08006d38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d42:	2300      	movs	r3, #0
 8006d44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d46:	4b41      	ldr	r3, [pc, #260]	; (8006e4c <xTaskResumeAll+0x114>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10a      	bne.n	8006d64 <xTaskResumeAll+0x2c>
	__asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	603b      	str	r3, [r7, #0]
}
 8006d60:	bf00      	nop
 8006d62:	e7fe      	b.n	8006d62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d64:	f000 fbae 	bl	80074c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d68:	4b38      	ldr	r3, [pc, #224]	; (8006e4c <xTaskResumeAll+0x114>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	4a37      	ldr	r2, [pc, #220]	; (8006e4c <xTaskResumeAll+0x114>)
 8006d70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d72:	4b36      	ldr	r3, [pc, #216]	; (8006e4c <xTaskResumeAll+0x114>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d161      	bne.n	8006e3e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d7a:	4b35      	ldr	r3, [pc, #212]	; (8006e50 <xTaskResumeAll+0x118>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d05d      	beq.n	8006e3e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d82:	e02e      	b.n	8006de2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d84:	4b33      	ldr	r3, [pc, #204]	; (8006e54 <xTaskResumeAll+0x11c>)
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	3318      	adds	r3, #24
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7ff fda6 	bl	80068e2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7ff fda1 	bl	80068e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da4:	2201      	movs	r2, #1
 8006da6:	409a      	lsls	r2, r3
 8006da8:	4b2b      	ldr	r3, [pc, #172]	; (8006e58 <xTaskResumeAll+0x120>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	4a2a      	ldr	r2, [pc, #168]	; (8006e58 <xTaskResumeAll+0x120>)
 8006db0:	6013      	str	r3, [r2, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db6:	4613      	mov	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4a27      	ldr	r2, [pc, #156]	; (8006e5c <xTaskResumeAll+0x124>)
 8006dc0:	441a      	add	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	4610      	mov	r0, r2
 8006dca:	f7ff fd66 	bl	800689a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd2:	4b23      	ldr	r3, [pc, #140]	; (8006e60 <xTaskResumeAll+0x128>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d302      	bcc.n	8006de2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006ddc:	4b21      	ldr	r3, [pc, #132]	; (8006e64 <xTaskResumeAll+0x12c>)
 8006dde:	2201      	movs	r2, #1
 8006de0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006de2:	4b1c      	ldr	r3, [pc, #112]	; (8006e54 <xTaskResumeAll+0x11c>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1cc      	bne.n	8006d84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d001      	beq.n	8006df4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006df0:	f000 fa18 	bl	8007224 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006df4:	4b1c      	ldr	r3, [pc, #112]	; (8006e68 <xTaskResumeAll+0x130>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d010      	beq.n	8006e22 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e00:	f000 f846 	bl	8006e90 <xTaskIncrementTick>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d002      	beq.n	8006e10 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006e0a:	4b16      	ldr	r3, [pc, #88]	; (8006e64 <xTaskResumeAll+0x12c>)
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	3b01      	subs	r3, #1
 8006e14:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1f1      	bne.n	8006e00 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006e1c:	4b12      	ldr	r3, [pc, #72]	; (8006e68 <xTaskResumeAll+0x130>)
 8006e1e:	2200      	movs	r2, #0
 8006e20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e22:	4b10      	ldr	r3, [pc, #64]	; (8006e64 <xTaskResumeAll+0x12c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d009      	beq.n	8006e3e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e2e:	4b0f      	ldr	r3, [pc, #60]	; (8006e6c <xTaskResumeAll+0x134>)
 8006e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e34:	601a      	str	r2, [r3, #0]
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e3e:	f000 fb71 	bl	8007524 <vPortExitCritical>

	return xAlreadyYielded;
 8006e42:	68bb      	ldr	r3, [r7, #8]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	20000540 	.word	0x20000540
 8006e50:	20000518 	.word	0x20000518
 8006e54:	200004d8 	.word	0x200004d8
 8006e58:	20000520 	.word	0x20000520
 8006e5c:	2000041c 	.word	0x2000041c
 8006e60:	20000418 	.word	0x20000418
 8006e64:	2000052c 	.word	0x2000052c
 8006e68:	20000528 	.word	0x20000528
 8006e6c:	e000ed04 	.word	0xe000ed04

08006e70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e76:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <xTaskGetTickCount+0x1c>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e7c:	687b      	ldr	r3, [r7, #4]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	370c      	adds	r7, #12
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	2000051c 	.word	0x2000051c

08006e90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e96:	2300      	movs	r3, #0
 8006e98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e9a:	4b4e      	ldr	r3, [pc, #312]	; (8006fd4 <xTaskIncrementTick+0x144>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f040 808e 	bne.w	8006fc0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ea4:	4b4c      	ldr	r3, [pc, #304]	; (8006fd8 <xTaskIncrementTick+0x148>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006eac:	4a4a      	ldr	r2, [pc, #296]	; (8006fd8 <xTaskIncrementTick+0x148>)
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d120      	bne.n	8006efa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006eb8:	4b48      	ldr	r3, [pc, #288]	; (8006fdc <xTaskIncrementTick+0x14c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00a      	beq.n	8006ed8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	603b      	str	r3, [r7, #0]
}
 8006ed4:	bf00      	nop
 8006ed6:	e7fe      	b.n	8006ed6 <xTaskIncrementTick+0x46>
 8006ed8:	4b40      	ldr	r3, [pc, #256]	; (8006fdc <xTaskIncrementTick+0x14c>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	60fb      	str	r3, [r7, #12]
 8006ede:	4b40      	ldr	r3, [pc, #256]	; (8006fe0 <xTaskIncrementTick+0x150>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a3e      	ldr	r2, [pc, #248]	; (8006fdc <xTaskIncrementTick+0x14c>)
 8006ee4:	6013      	str	r3, [r2, #0]
 8006ee6:	4a3e      	ldr	r2, [pc, #248]	; (8006fe0 <xTaskIncrementTick+0x150>)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6013      	str	r3, [r2, #0]
 8006eec:	4b3d      	ldr	r3, [pc, #244]	; (8006fe4 <xTaskIncrementTick+0x154>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	4a3c      	ldr	r2, [pc, #240]	; (8006fe4 <xTaskIncrementTick+0x154>)
 8006ef4:	6013      	str	r3, [r2, #0]
 8006ef6:	f000 f995 	bl	8007224 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006efa:	4b3b      	ldr	r3, [pc, #236]	; (8006fe8 <xTaskIncrementTick+0x158>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d348      	bcc.n	8006f96 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f04:	4b35      	ldr	r3, [pc, #212]	; (8006fdc <xTaskIncrementTick+0x14c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d104      	bne.n	8006f18 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f0e:	4b36      	ldr	r3, [pc, #216]	; (8006fe8 <xTaskIncrementTick+0x158>)
 8006f10:	f04f 32ff 	mov.w	r2, #4294967295
 8006f14:	601a      	str	r2, [r3, #0]
					break;
 8006f16:	e03e      	b.n	8006f96 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f18:	4b30      	ldr	r3, [pc, #192]	; (8006fdc <xTaskIncrementTick+0x14c>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d203      	bcs.n	8006f38 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f30:	4a2d      	ldr	r2, [pc, #180]	; (8006fe8 <xTaskIncrementTick+0x158>)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f36:	e02e      	b.n	8006f96 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7ff fcd0 	bl	80068e2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d004      	beq.n	8006f54 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	3318      	adds	r3, #24
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7ff fcc7 	bl	80068e2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f58:	2201      	movs	r2, #1
 8006f5a:	409a      	lsls	r2, r3
 8006f5c:	4b23      	ldr	r3, [pc, #140]	; (8006fec <xTaskIncrementTick+0x15c>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	4a22      	ldr	r2, [pc, #136]	; (8006fec <xTaskIncrementTick+0x15c>)
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4a1f      	ldr	r2, [pc, #124]	; (8006ff0 <xTaskIncrementTick+0x160>)
 8006f74:	441a      	add	r2, r3
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	3304      	adds	r3, #4
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	f7ff fc8c 	bl	800689a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f86:	4b1b      	ldr	r3, [pc, #108]	; (8006ff4 <xTaskIncrementTick+0x164>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d3b9      	bcc.n	8006f04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006f90:	2301      	movs	r3, #1
 8006f92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f94:	e7b6      	b.n	8006f04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f96:	4b17      	ldr	r3, [pc, #92]	; (8006ff4 <xTaskIncrementTick+0x164>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9c:	4914      	ldr	r1, [pc, #80]	; (8006ff0 <xTaskIncrementTick+0x160>)
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	440b      	add	r3, r1
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d901      	bls.n	8006fb2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006fb2:	4b11      	ldr	r3, [pc, #68]	; (8006ff8 <xTaskIncrementTick+0x168>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d007      	beq.n	8006fca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	617b      	str	r3, [r7, #20]
 8006fbe:	e004      	b.n	8006fca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006fc0:	4b0e      	ldr	r3, [pc, #56]	; (8006ffc <xTaskIncrementTick+0x16c>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	4a0d      	ldr	r2, [pc, #52]	; (8006ffc <xTaskIncrementTick+0x16c>)
 8006fc8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006fca:	697b      	ldr	r3, [r7, #20]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3718      	adds	r7, #24
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	20000540 	.word	0x20000540
 8006fd8:	2000051c 	.word	0x2000051c
 8006fdc:	200004d0 	.word	0x200004d0
 8006fe0:	200004d4 	.word	0x200004d4
 8006fe4:	20000530 	.word	0x20000530
 8006fe8:	20000538 	.word	0x20000538
 8006fec:	20000520 	.word	0x20000520
 8006ff0:	2000041c 	.word	0x2000041c
 8006ff4:	20000418 	.word	0x20000418
 8006ff8:	2000052c 	.word	0x2000052c
 8006ffc:	20000528 	.word	0x20000528

08007000 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007000:	b480      	push	{r7}
 8007002:	b087      	sub	sp, #28
 8007004:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007006:	4b27      	ldr	r3, [pc, #156]	; (80070a4 <vTaskSwitchContext+0xa4>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800700e:	4b26      	ldr	r3, [pc, #152]	; (80070a8 <vTaskSwitchContext+0xa8>)
 8007010:	2201      	movs	r2, #1
 8007012:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007014:	e03f      	b.n	8007096 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007016:	4b24      	ldr	r3, [pc, #144]	; (80070a8 <vTaskSwitchContext+0xa8>)
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800701c:	4b23      	ldr	r3, [pc, #140]	; (80070ac <vTaskSwitchContext+0xac>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	fab3 f383 	clz	r3, r3
 8007028:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800702a:	7afb      	ldrb	r3, [r7, #11]
 800702c:	f1c3 031f 	rsb	r3, r3, #31
 8007030:	617b      	str	r3, [r7, #20]
 8007032:	491f      	ldr	r1, [pc, #124]	; (80070b0 <vTaskSwitchContext+0xb0>)
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	4613      	mov	r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	440b      	add	r3, r1
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10a      	bne.n	800705c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704a:	f383 8811 	msr	BASEPRI, r3
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	607b      	str	r3, [r7, #4]
}
 8007058:	bf00      	nop
 800705a:	e7fe      	b.n	800705a <vTaskSwitchContext+0x5a>
 800705c:	697a      	ldr	r2, [r7, #20]
 800705e:	4613      	mov	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4a12      	ldr	r2, [pc, #72]	; (80070b0 <vTaskSwitchContext+0xb0>)
 8007068:	4413      	add	r3, r2
 800706a:	613b      	str	r3, [r7, #16]
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	685a      	ldr	r2, [r3, #4]
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	605a      	str	r2, [r3, #4]
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	685a      	ldr	r2, [r3, #4]
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	3308      	adds	r3, #8
 800707e:	429a      	cmp	r2, r3
 8007080:	d104      	bne.n	800708c <vTaskSwitchContext+0x8c>
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	605a      	str	r2, [r3, #4]
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	4a08      	ldr	r2, [pc, #32]	; (80070b4 <vTaskSwitchContext+0xb4>)
 8007094:	6013      	str	r3, [r2, #0]
}
 8007096:	bf00      	nop
 8007098:	371c      	adds	r7, #28
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	20000540 	.word	0x20000540
 80070a8:	2000052c 	.word	0x2000052c
 80070ac:	20000520 	.word	0x20000520
 80070b0:	2000041c 	.word	0x2000041c
 80070b4:	20000418 	.word	0x20000418

080070b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80070c0:	f000 f852 	bl	8007168 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80070c4:	4b06      	ldr	r3, [pc, #24]	; (80070e0 <prvIdleTask+0x28>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d9f9      	bls.n	80070c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80070cc:	4b05      	ldr	r3, [pc, #20]	; (80070e4 <prvIdleTask+0x2c>)
 80070ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80070dc:	e7f0      	b.n	80070c0 <prvIdleTask+0x8>
 80070de:	bf00      	nop
 80070e0:	2000041c 	.word	0x2000041c
 80070e4:	e000ed04 	.word	0xe000ed04

080070e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070ee:	2300      	movs	r3, #0
 80070f0:	607b      	str	r3, [r7, #4]
 80070f2:	e00c      	b.n	800710e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	4613      	mov	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4413      	add	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	4a12      	ldr	r2, [pc, #72]	; (8007148 <prvInitialiseTaskLists+0x60>)
 8007100:	4413      	add	r3, r2
 8007102:	4618      	mov	r0, r3
 8007104:	f7ff fb9c 	bl	8006840 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3301      	adds	r3, #1
 800710c:	607b      	str	r3, [r7, #4]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2b06      	cmp	r3, #6
 8007112:	d9ef      	bls.n	80070f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007114:	480d      	ldr	r0, [pc, #52]	; (800714c <prvInitialiseTaskLists+0x64>)
 8007116:	f7ff fb93 	bl	8006840 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800711a:	480d      	ldr	r0, [pc, #52]	; (8007150 <prvInitialiseTaskLists+0x68>)
 800711c:	f7ff fb90 	bl	8006840 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007120:	480c      	ldr	r0, [pc, #48]	; (8007154 <prvInitialiseTaskLists+0x6c>)
 8007122:	f7ff fb8d 	bl	8006840 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007126:	480c      	ldr	r0, [pc, #48]	; (8007158 <prvInitialiseTaskLists+0x70>)
 8007128:	f7ff fb8a 	bl	8006840 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800712c:	480b      	ldr	r0, [pc, #44]	; (800715c <prvInitialiseTaskLists+0x74>)
 800712e:	f7ff fb87 	bl	8006840 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007132:	4b0b      	ldr	r3, [pc, #44]	; (8007160 <prvInitialiseTaskLists+0x78>)
 8007134:	4a05      	ldr	r2, [pc, #20]	; (800714c <prvInitialiseTaskLists+0x64>)
 8007136:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007138:	4b0a      	ldr	r3, [pc, #40]	; (8007164 <prvInitialiseTaskLists+0x7c>)
 800713a:	4a05      	ldr	r2, [pc, #20]	; (8007150 <prvInitialiseTaskLists+0x68>)
 800713c:	601a      	str	r2, [r3, #0]
}
 800713e:	bf00      	nop
 8007140:	3708      	adds	r7, #8
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	2000041c 	.word	0x2000041c
 800714c:	200004a8 	.word	0x200004a8
 8007150:	200004bc 	.word	0x200004bc
 8007154:	200004d8 	.word	0x200004d8
 8007158:	200004ec 	.word	0x200004ec
 800715c:	20000504 	.word	0x20000504
 8007160:	200004d0 	.word	0x200004d0
 8007164:	200004d4 	.word	0x200004d4

08007168 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800716e:	e019      	b.n	80071a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007170:	f000 f9a8 	bl	80074c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007174:	4b10      	ldr	r3, [pc, #64]	; (80071b8 <prvCheckTasksWaitingTermination+0x50>)
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3304      	adds	r3, #4
 8007180:	4618      	mov	r0, r3
 8007182:	f7ff fbae 	bl	80068e2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007186:	4b0d      	ldr	r3, [pc, #52]	; (80071bc <prvCheckTasksWaitingTermination+0x54>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3b01      	subs	r3, #1
 800718c:	4a0b      	ldr	r2, [pc, #44]	; (80071bc <prvCheckTasksWaitingTermination+0x54>)
 800718e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007190:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <prvCheckTasksWaitingTermination+0x58>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	3b01      	subs	r3, #1
 8007196:	4a0a      	ldr	r2, [pc, #40]	; (80071c0 <prvCheckTasksWaitingTermination+0x58>)
 8007198:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800719a:	f000 f9c3 	bl	8007524 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f810 	bl	80071c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071a4:	4b06      	ldr	r3, [pc, #24]	; (80071c0 <prvCheckTasksWaitingTermination+0x58>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e1      	bne.n	8007170 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80071ac:	bf00      	nop
 80071ae:	bf00      	nop
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	200004ec 	.word	0x200004ec
 80071bc:	20000518 	.word	0x20000518
 80071c0:	20000500 	.word	0x20000500

080071c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d108      	bne.n	80071e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071da:	4618      	mov	r0, r3
 80071dc:	f000 fb20 	bl	8007820 <vPortFree>
				vPortFree( pxTCB );
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fb1d 	bl	8007820 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80071e6:	e018      	b.n	800721a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d103      	bne.n	80071fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fb14 	bl	8007820 <vPortFree>
	}
 80071f8:	e00f      	b.n	800721a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007200:	2b02      	cmp	r3, #2
 8007202:	d00a      	beq.n	800721a <prvDeleteTCB+0x56>
	__asm volatile
 8007204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	60fb      	str	r3, [r7, #12]
}
 8007216:	bf00      	nop
 8007218:	e7fe      	b.n	8007218 <prvDeleteTCB+0x54>
	}
 800721a:	bf00      	nop
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
	...

08007224 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800722a:	4b0c      	ldr	r3, [pc, #48]	; (800725c <prvResetNextTaskUnblockTime+0x38>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d104      	bne.n	800723e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007234:	4b0a      	ldr	r3, [pc, #40]	; (8007260 <prvResetNextTaskUnblockTime+0x3c>)
 8007236:	f04f 32ff 	mov.w	r2, #4294967295
 800723a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800723c:	e008      	b.n	8007250 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800723e:	4b07      	ldr	r3, [pc, #28]	; (800725c <prvResetNextTaskUnblockTime+0x38>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	4a04      	ldr	r2, [pc, #16]	; (8007260 <prvResetNextTaskUnblockTime+0x3c>)
 800724e:	6013      	str	r3, [r2, #0]
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	200004d0 	.word	0x200004d0
 8007260:	20000538 	.word	0x20000538

08007264 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	3b04      	subs	r3, #4
 8007274:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800727c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	3b04      	subs	r3, #4
 8007282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f023 0201 	bic.w	r2, r3, #1
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	3b04      	subs	r3, #4
 8007292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007294:	4a0c      	ldr	r2, [pc, #48]	; (80072c8 <pxPortInitialiseStack+0x64>)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	3b14      	subs	r3, #20
 800729e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	3b04      	subs	r3, #4
 80072aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f06f 0202 	mvn.w	r2, #2
 80072b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	3b20      	subs	r3, #32
 80072b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072ba:	68fb      	ldr	r3, [r7, #12]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3714      	adds	r7, #20
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr
 80072c8:	080072cd 	.word	0x080072cd

080072cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80072d2:	2300      	movs	r3, #0
 80072d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80072d6:	4b12      	ldr	r3, [pc, #72]	; (8007320 <prvTaskExitError+0x54>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072de:	d00a      	beq.n	80072f6 <prvTaskExitError+0x2a>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	60fb      	str	r3, [r7, #12]
}
 80072f2:	bf00      	nop
 80072f4:	e7fe      	b.n	80072f4 <prvTaskExitError+0x28>
	__asm volatile
 80072f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	60bb      	str	r3, [r7, #8]
}
 8007308:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800730a:	bf00      	nop
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d0fc      	beq.n	800730c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007312:	bf00      	nop
 8007314:	bf00      	nop
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	2000007c 	.word	0x2000007c
	...

08007330 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007330:	4b07      	ldr	r3, [pc, #28]	; (8007350 <pxCurrentTCBConst2>)
 8007332:	6819      	ldr	r1, [r3, #0]
 8007334:	6808      	ldr	r0, [r1, #0]
 8007336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800733a:	f380 8809 	msr	PSP, r0
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	f04f 0000 	mov.w	r0, #0
 8007346:	f380 8811 	msr	BASEPRI, r0
 800734a:	4770      	bx	lr
 800734c:	f3af 8000 	nop.w

08007350 <pxCurrentTCBConst2>:
 8007350:	20000418 	.word	0x20000418
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007354:	bf00      	nop
 8007356:	bf00      	nop

08007358 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007358:	4808      	ldr	r0, [pc, #32]	; (800737c <prvPortStartFirstTask+0x24>)
 800735a:	6800      	ldr	r0, [r0, #0]
 800735c:	6800      	ldr	r0, [r0, #0]
 800735e:	f380 8808 	msr	MSP, r0
 8007362:	f04f 0000 	mov.w	r0, #0
 8007366:	f380 8814 	msr	CONTROL, r0
 800736a:	b662      	cpsie	i
 800736c:	b661      	cpsie	f
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	f3bf 8f6f 	isb	sy
 8007376:	df00      	svc	0
 8007378:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800737a:	bf00      	nop
 800737c:	e000ed08 	.word	0xe000ed08

08007380 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007386:	4b46      	ldr	r3, [pc, #280]	; (80074a0 <xPortStartScheduler+0x120>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a46      	ldr	r2, [pc, #280]	; (80074a4 <xPortStartScheduler+0x124>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d10a      	bne.n	80073a6 <xPortStartScheduler+0x26>
	__asm volatile
 8007390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	613b      	str	r3, [r7, #16]
}
 80073a2:	bf00      	nop
 80073a4:	e7fe      	b.n	80073a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80073a6:	4b3e      	ldr	r3, [pc, #248]	; (80074a0 <xPortStartScheduler+0x120>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a3f      	ldr	r2, [pc, #252]	; (80074a8 <xPortStartScheduler+0x128>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d10a      	bne.n	80073c6 <xPortStartScheduler+0x46>
	__asm volatile
 80073b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	60fb      	str	r3, [r7, #12]
}
 80073c2:	bf00      	nop
 80073c4:	e7fe      	b.n	80073c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073c6:	4b39      	ldr	r3, [pc, #228]	; (80074ac <xPortStartScheduler+0x12c>)
 80073c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	22ff      	movs	r2, #255	; 0xff
 80073d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80073e0:	78fb      	ldrb	r3, [r7, #3]
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	4b31      	ldr	r3, [pc, #196]	; (80074b0 <xPortStartScheduler+0x130>)
 80073ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073ee:	4b31      	ldr	r3, [pc, #196]	; (80074b4 <xPortStartScheduler+0x134>)
 80073f0:	2207      	movs	r2, #7
 80073f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073f4:	e009      	b.n	800740a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80073f6:	4b2f      	ldr	r3, [pc, #188]	; (80074b4 <xPortStartScheduler+0x134>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3b01      	subs	r3, #1
 80073fc:	4a2d      	ldr	r2, [pc, #180]	; (80074b4 <xPortStartScheduler+0x134>)
 80073fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007400:	78fb      	ldrb	r3, [r7, #3]
 8007402:	b2db      	uxtb	r3, r3
 8007404:	005b      	lsls	r3, r3, #1
 8007406:	b2db      	uxtb	r3, r3
 8007408:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800740a:	78fb      	ldrb	r3, [r7, #3]
 800740c:	b2db      	uxtb	r3, r3
 800740e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007412:	2b80      	cmp	r3, #128	; 0x80
 8007414:	d0ef      	beq.n	80073f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007416:	4b27      	ldr	r3, [pc, #156]	; (80074b4 <xPortStartScheduler+0x134>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f1c3 0307 	rsb	r3, r3, #7
 800741e:	2b04      	cmp	r3, #4
 8007420:	d00a      	beq.n	8007438 <xPortStartScheduler+0xb8>
	__asm volatile
 8007422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007426:	f383 8811 	msr	BASEPRI, r3
 800742a:	f3bf 8f6f 	isb	sy
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	60bb      	str	r3, [r7, #8]
}
 8007434:	bf00      	nop
 8007436:	e7fe      	b.n	8007436 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007438:	4b1e      	ldr	r3, [pc, #120]	; (80074b4 <xPortStartScheduler+0x134>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	021b      	lsls	r3, r3, #8
 800743e:	4a1d      	ldr	r2, [pc, #116]	; (80074b4 <xPortStartScheduler+0x134>)
 8007440:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007442:	4b1c      	ldr	r3, [pc, #112]	; (80074b4 <xPortStartScheduler+0x134>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800744a:	4a1a      	ldr	r2, [pc, #104]	; (80074b4 <xPortStartScheduler+0x134>)
 800744c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	b2da      	uxtb	r2, r3
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007456:	4b18      	ldr	r3, [pc, #96]	; (80074b8 <xPortStartScheduler+0x138>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a17      	ldr	r2, [pc, #92]	; (80074b8 <xPortStartScheduler+0x138>)
 800745c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007460:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007462:	4b15      	ldr	r3, [pc, #84]	; (80074b8 <xPortStartScheduler+0x138>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a14      	ldr	r2, [pc, #80]	; (80074b8 <xPortStartScheduler+0x138>)
 8007468:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800746c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800746e:	f000 f8dd 	bl	800762c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007472:	4b12      	ldr	r3, [pc, #72]	; (80074bc <xPortStartScheduler+0x13c>)
 8007474:	2200      	movs	r2, #0
 8007476:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007478:	f000 f8fc 	bl	8007674 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800747c:	4b10      	ldr	r3, [pc, #64]	; (80074c0 <xPortStartScheduler+0x140>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a0f      	ldr	r2, [pc, #60]	; (80074c0 <xPortStartScheduler+0x140>)
 8007482:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007486:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007488:	f7ff ff66 	bl	8007358 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800748c:	f7ff fdb8 	bl	8007000 <vTaskSwitchContext>
	prvTaskExitError();
 8007490:	f7ff ff1c 	bl	80072cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	e000ed00 	.word	0xe000ed00
 80074a4:	410fc271 	.word	0x410fc271
 80074a8:	410fc270 	.word	0x410fc270
 80074ac:	e000e400 	.word	0xe000e400
 80074b0:	20000544 	.word	0x20000544
 80074b4:	20000548 	.word	0x20000548
 80074b8:	e000ed20 	.word	0xe000ed20
 80074bc:	2000007c 	.word	0x2000007c
 80074c0:	e000ef34 	.word	0xe000ef34

080074c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
	__asm volatile
 80074ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	607b      	str	r3, [r7, #4]
}
 80074dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80074de:	4b0f      	ldr	r3, [pc, #60]	; (800751c <vPortEnterCritical+0x58>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	3301      	adds	r3, #1
 80074e4:	4a0d      	ldr	r2, [pc, #52]	; (800751c <vPortEnterCritical+0x58>)
 80074e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80074e8:	4b0c      	ldr	r3, [pc, #48]	; (800751c <vPortEnterCritical+0x58>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d10f      	bne.n	8007510 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074f0:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <vPortEnterCritical+0x5c>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <vPortEnterCritical+0x4c>
	__asm volatile
 80074fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	603b      	str	r3, [r7, #0]
}
 800750c:	bf00      	nop
 800750e:	e7fe      	b.n	800750e <vPortEnterCritical+0x4a>
	}
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	2000007c 	.word	0x2000007c
 8007520:	e000ed04 	.word	0xe000ed04

08007524 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800752a:	4b12      	ldr	r3, [pc, #72]	; (8007574 <vPortExitCritical+0x50>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10a      	bne.n	8007548 <vPortExitCritical+0x24>
	__asm volatile
 8007532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	607b      	str	r3, [r7, #4]
}
 8007544:	bf00      	nop
 8007546:	e7fe      	b.n	8007546 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007548:	4b0a      	ldr	r3, [pc, #40]	; (8007574 <vPortExitCritical+0x50>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3b01      	subs	r3, #1
 800754e:	4a09      	ldr	r2, [pc, #36]	; (8007574 <vPortExitCritical+0x50>)
 8007550:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007552:	4b08      	ldr	r3, [pc, #32]	; (8007574 <vPortExitCritical+0x50>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d105      	bne.n	8007566 <vPortExitCritical+0x42>
 800755a:	2300      	movs	r3, #0
 800755c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007564:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007566:	bf00      	nop
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	2000007c 	.word	0x2000007c
	...

08007580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007580:	f3ef 8009 	mrs	r0, PSP
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	4b15      	ldr	r3, [pc, #84]	; (80075e0 <pxCurrentTCBConst>)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	f01e 0f10 	tst.w	lr, #16
 8007590:	bf08      	it	eq
 8007592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800759a:	6010      	str	r0, [r2, #0]
 800759c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80075a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80075a4:	f380 8811 	msr	BASEPRI, r0
 80075a8:	f3bf 8f4f 	dsb	sy
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f7ff fd26 	bl	8007000 <vTaskSwitchContext>
 80075b4:	f04f 0000 	mov.w	r0, #0
 80075b8:	f380 8811 	msr	BASEPRI, r0
 80075bc:	bc09      	pop	{r0, r3}
 80075be:	6819      	ldr	r1, [r3, #0]
 80075c0:	6808      	ldr	r0, [r1, #0]
 80075c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c6:	f01e 0f10 	tst.w	lr, #16
 80075ca:	bf08      	it	eq
 80075cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80075d0:	f380 8809 	msr	PSP, r0
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	f3af 8000 	nop.w

080075e0 <pxCurrentTCBConst>:
 80075e0:	20000418 	.word	0x20000418
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80075e4:	bf00      	nop
 80075e6:	bf00      	nop

080075e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	607b      	str	r3, [r7, #4]
}
 8007600:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007602:	f7ff fc45 	bl	8006e90 <xTaskIncrementTick>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d003      	beq.n	8007614 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800760c:	4b06      	ldr	r3, [pc, #24]	; (8007628 <SysTick_Handler+0x40>)
 800760e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	2300      	movs	r3, #0
 8007616:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	f383 8811 	msr	BASEPRI, r3
}
 800761e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007620:	bf00      	nop
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	e000ed04 	.word	0xe000ed04

0800762c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800762c:	b480      	push	{r7}
 800762e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007630:	4b0b      	ldr	r3, [pc, #44]	; (8007660 <vPortSetupTimerInterrupt+0x34>)
 8007632:	2200      	movs	r2, #0
 8007634:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007636:	4b0b      	ldr	r3, [pc, #44]	; (8007664 <vPortSetupTimerInterrupt+0x38>)
 8007638:	2200      	movs	r2, #0
 800763a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800763c:	4b0a      	ldr	r3, [pc, #40]	; (8007668 <vPortSetupTimerInterrupt+0x3c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a0a      	ldr	r2, [pc, #40]	; (800766c <vPortSetupTimerInterrupt+0x40>)
 8007642:	fba2 2303 	umull	r2, r3, r2, r3
 8007646:	099b      	lsrs	r3, r3, #6
 8007648:	4a09      	ldr	r2, [pc, #36]	; (8007670 <vPortSetupTimerInterrupt+0x44>)
 800764a:	3b01      	subs	r3, #1
 800764c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800764e:	4b04      	ldr	r3, [pc, #16]	; (8007660 <vPortSetupTimerInterrupt+0x34>)
 8007650:	2207      	movs	r2, #7
 8007652:	601a      	str	r2, [r3, #0]
}
 8007654:	bf00      	nop
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	e000e010 	.word	0xe000e010
 8007664:	e000e018 	.word	0xe000e018
 8007668:	20000070 	.word	0x20000070
 800766c:	10624dd3 	.word	0x10624dd3
 8007670:	e000e014 	.word	0xe000e014

08007674 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007674:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007684 <vPortEnableVFP+0x10>
 8007678:	6801      	ldr	r1, [r0, #0]
 800767a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800767e:	6001      	str	r1, [r0, #0]
 8007680:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007682:	bf00      	nop
 8007684:	e000ed88 	.word	0xe000ed88

08007688 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b08a      	sub	sp, #40	; 0x28
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007690:	2300      	movs	r3, #0
 8007692:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007694:	f7ff fb42 	bl	8006d1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007698:	4b5b      	ldr	r3, [pc, #364]	; (8007808 <pvPortMalloc+0x180>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80076a0:	f000 f920 	bl	80078e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80076a4:	4b59      	ldr	r3, [pc, #356]	; (800780c <pvPortMalloc+0x184>)
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4013      	ands	r3, r2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f040 8093 	bne.w	80077d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d01d      	beq.n	80076f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80076b8:	2208      	movs	r2, #8
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4413      	add	r3, r2
 80076be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f003 0307 	and.w	r3, r3, #7
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d014      	beq.n	80076f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f023 0307 	bic.w	r3, r3, #7
 80076d0:	3308      	adds	r3, #8
 80076d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f003 0307 	and.w	r3, r3, #7
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00a      	beq.n	80076f4 <pvPortMalloc+0x6c>
	__asm volatile
 80076de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	617b      	str	r3, [r7, #20]
}
 80076f0:	bf00      	nop
 80076f2:	e7fe      	b.n	80076f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d06e      	beq.n	80077d8 <pvPortMalloc+0x150>
 80076fa:	4b45      	ldr	r3, [pc, #276]	; (8007810 <pvPortMalloc+0x188>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	429a      	cmp	r2, r3
 8007702:	d869      	bhi.n	80077d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007704:	4b43      	ldr	r3, [pc, #268]	; (8007814 <pvPortMalloc+0x18c>)
 8007706:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007708:	4b42      	ldr	r3, [pc, #264]	; (8007814 <pvPortMalloc+0x18c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800770e:	e004      	b.n	800771a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800771a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	429a      	cmp	r2, r3
 8007722:	d903      	bls.n	800772c <pvPortMalloc+0xa4>
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1f1      	bne.n	8007710 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800772c:	4b36      	ldr	r3, [pc, #216]	; (8007808 <pvPortMalloc+0x180>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007732:	429a      	cmp	r2, r3
 8007734:	d050      	beq.n	80077d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2208      	movs	r2, #8
 800773c:	4413      	add	r3, r2
 800773e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	1ad2      	subs	r2, r2, r3
 8007750:	2308      	movs	r3, #8
 8007752:	005b      	lsls	r3, r3, #1
 8007754:	429a      	cmp	r2, r3
 8007756:	d91f      	bls.n	8007798 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4413      	add	r3, r2
 800775e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	f003 0307 	and.w	r3, r3, #7
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00a      	beq.n	8007780 <pvPortMalloc+0xf8>
	__asm volatile
 800776a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	613b      	str	r3, [r7, #16]
}
 800777c:	bf00      	nop
 800777e:	e7fe      	b.n	800777e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	1ad2      	subs	r2, r2, r3
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007792:	69b8      	ldr	r0, [r7, #24]
 8007794:	f000 f908 	bl	80079a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007798:	4b1d      	ldr	r3, [pc, #116]	; (8007810 <pvPortMalloc+0x188>)
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	4a1b      	ldr	r2, [pc, #108]	; (8007810 <pvPortMalloc+0x188>)
 80077a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077a6:	4b1a      	ldr	r3, [pc, #104]	; (8007810 <pvPortMalloc+0x188>)
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	4b1b      	ldr	r3, [pc, #108]	; (8007818 <pvPortMalloc+0x190>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d203      	bcs.n	80077ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80077b2:	4b17      	ldr	r3, [pc, #92]	; (8007810 <pvPortMalloc+0x188>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a18      	ldr	r2, [pc, #96]	; (8007818 <pvPortMalloc+0x190>)
 80077b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	4b13      	ldr	r3, [pc, #76]	; (800780c <pvPortMalloc+0x184>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	431a      	orrs	r2, r3
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	2200      	movs	r2, #0
 80077cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80077ce:	4b13      	ldr	r3, [pc, #76]	; (800781c <pvPortMalloc+0x194>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	3301      	adds	r3, #1
 80077d4:	4a11      	ldr	r2, [pc, #68]	; (800781c <pvPortMalloc+0x194>)
 80077d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80077d8:	f7ff faae 	bl	8006d38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	f003 0307 	and.w	r3, r3, #7
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00a      	beq.n	80077fc <pvPortMalloc+0x174>
	__asm volatile
 80077e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	60fb      	str	r3, [r7, #12]
}
 80077f8:	bf00      	nop
 80077fa:	e7fe      	b.n	80077fa <pvPortMalloc+0x172>
	return pvReturn;
 80077fc:	69fb      	ldr	r3, [r7, #28]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3728      	adds	r7, #40	; 0x28
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	2000110c 	.word	0x2000110c
 800780c:	20001120 	.word	0x20001120
 8007810:	20001110 	.word	0x20001110
 8007814:	20001104 	.word	0x20001104
 8007818:	20001114 	.word	0x20001114
 800781c:	20001118 	.word	0x20001118

08007820 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d04d      	beq.n	80078ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007832:	2308      	movs	r3, #8
 8007834:	425b      	negs	r3, r3
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	4413      	add	r3, r2
 800783a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	685a      	ldr	r2, [r3, #4]
 8007844:	4b24      	ldr	r3, [pc, #144]	; (80078d8 <vPortFree+0xb8>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4013      	ands	r3, r2
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10a      	bne.n	8007864 <vPortFree+0x44>
	__asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	60fb      	str	r3, [r7, #12]
}
 8007860:	bf00      	nop
 8007862:	e7fe      	b.n	8007862 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00a      	beq.n	8007882 <vPortFree+0x62>
	__asm volatile
 800786c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007870:	f383 8811 	msr	BASEPRI, r3
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	60bb      	str	r3, [r7, #8]
}
 800787e:	bf00      	nop
 8007880:	e7fe      	b.n	8007880 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	685a      	ldr	r2, [r3, #4]
 8007886:	4b14      	ldr	r3, [pc, #80]	; (80078d8 <vPortFree+0xb8>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4013      	ands	r3, r2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d01e      	beq.n	80078ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d11a      	bne.n	80078ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	4b0e      	ldr	r3, [pc, #56]	; (80078d8 <vPortFree+0xb8>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	43db      	mvns	r3, r3
 80078a2:	401a      	ands	r2, r3
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80078a8:	f7ff fa38 	bl	8006d1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	685a      	ldr	r2, [r3, #4]
 80078b0:	4b0a      	ldr	r3, [pc, #40]	; (80078dc <vPortFree+0xbc>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4413      	add	r3, r2
 80078b6:	4a09      	ldr	r2, [pc, #36]	; (80078dc <vPortFree+0xbc>)
 80078b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078ba:	6938      	ldr	r0, [r7, #16]
 80078bc:	f000 f874 	bl	80079a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80078c0:	4b07      	ldr	r3, [pc, #28]	; (80078e0 <vPortFree+0xc0>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	3301      	adds	r3, #1
 80078c6:	4a06      	ldr	r2, [pc, #24]	; (80078e0 <vPortFree+0xc0>)
 80078c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80078ca:	f7ff fa35 	bl	8006d38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80078ce:	bf00      	nop
 80078d0:	3718      	adds	r7, #24
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	20001120 	.word	0x20001120
 80078dc:	20001110 	.word	0x20001110
 80078e0:	2000111c 	.word	0x2000111c

080078e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80078ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80078ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80078f0:	4b27      	ldr	r3, [pc, #156]	; (8007990 <prvHeapInit+0xac>)
 80078f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f003 0307 	and.w	r3, r3, #7
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00c      	beq.n	8007918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	3307      	adds	r3, #7
 8007902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f023 0307 	bic.w	r3, r3, #7
 800790a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	4a1f      	ldr	r2, [pc, #124]	; (8007990 <prvHeapInit+0xac>)
 8007914:	4413      	add	r3, r2
 8007916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800791c:	4a1d      	ldr	r2, [pc, #116]	; (8007994 <prvHeapInit+0xb0>)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007922:	4b1c      	ldr	r3, [pc, #112]	; (8007994 <prvHeapInit+0xb0>)
 8007924:	2200      	movs	r2, #0
 8007926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	4413      	add	r3, r2
 800792e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007930:	2208      	movs	r2, #8
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	1a9b      	subs	r3, r3, r2
 8007936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f023 0307 	bic.w	r3, r3, #7
 800793e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4a15      	ldr	r2, [pc, #84]	; (8007998 <prvHeapInit+0xb4>)
 8007944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007946:	4b14      	ldr	r3, [pc, #80]	; (8007998 <prvHeapInit+0xb4>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2200      	movs	r2, #0
 800794c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800794e:	4b12      	ldr	r3, [pc, #72]	; (8007998 <prvHeapInit+0xb4>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	1ad2      	subs	r2, r2, r3
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007964:	4b0c      	ldr	r3, [pc, #48]	; (8007998 <prvHeapInit+0xb4>)
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	4a0a      	ldr	r2, [pc, #40]	; (800799c <prvHeapInit+0xb8>)
 8007972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	4a09      	ldr	r2, [pc, #36]	; (80079a0 <prvHeapInit+0xbc>)
 800797a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800797c:	4b09      	ldr	r3, [pc, #36]	; (80079a4 <prvHeapInit+0xc0>)
 800797e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007982:	601a      	str	r2, [r3, #0]
}
 8007984:	bf00      	nop
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	2000054c 	.word	0x2000054c
 8007994:	20001104 	.word	0x20001104
 8007998:	2000110c 	.word	0x2000110c
 800799c:	20001114 	.word	0x20001114
 80079a0:	20001110 	.word	0x20001110
 80079a4:	20001120 	.word	0x20001120

080079a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079b0:	4b28      	ldr	r3, [pc, #160]	; (8007a54 <prvInsertBlockIntoFreeList+0xac>)
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	e002      	b.n	80079bc <prvInsertBlockIntoFreeList+0x14>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	60fb      	str	r3, [r7, #12]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d8f7      	bhi.n	80079b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	4413      	add	r3, r2
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d108      	bne.n	80079ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	441a      	add	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	441a      	add	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d118      	bne.n	8007a30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	4b15      	ldr	r3, [pc, #84]	; (8007a58 <prvInsertBlockIntoFreeList+0xb0>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d00d      	beq.n	8007a26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	441a      	add	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	e008      	b.n	8007a38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a26:	4b0c      	ldr	r3, [pc, #48]	; (8007a58 <prvInsertBlockIntoFreeList+0xb0>)
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	601a      	str	r2, [r3, #0]
 8007a2e:	e003      	b.n	8007a38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d002      	beq.n	8007a46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a46:	bf00      	nop
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	20001104 	.word	0x20001104
 8007a58:	2000110c 	.word	0x2000110c

08007a5c <__libc_init_array>:
 8007a5c:	b570      	push	{r4, r5, r6, lr}
 8007a5e:	4d0d      	ldr	r5, [pc, #52]	; (8007a94 <__libc_init_array+0x38>)
 8007a60:	4c0d      	ldr	r4, [pc, #52]	; (8007a98 <__libc_init_array+0x3c>)
 8007a62:	1b64      	subs	r4, r4, r5
 8007a64:	10a4      	asrs	r4, r4, #2
 8007a66:	2600      	movs	r6, #0
 8007a68:	42a6      	cmp	r6, r4
 8007a6a:	d109      	bne.n	8007a80 <__libc_init_array+0x24>
 8007a6c:	4d0b      	ldr	r5, [pc, #44]	; (8007a9c <__libc_init_array+0x40>)
 8007a6e:	4c0c      	ldr	r4, [pc, #48]	; (8007aa0 <__libc_init_array+0x44>)
 8007a70:	f000 f82e 	bl	8007ad0 <_init>
 8007a74:	1b64      	subs	r4, r4, r5
 8007a76:	10a4      	asrs	r4, r4, #2
 8007a78:	2600      	movs	r6, #0
 8007a7a:	42a6      	cmp	r6, r4
 8007a7c:	d105      	bne.n	8007a8a <__libc_init_array+0x2e>
 8007a7e:	bd70      	pop	{r4, r5, r6, pc}
 8007a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a84:	4798      	blx	r3
 8007a86:	3601      	adds	r6, #1
 8007a88:	e7ee      	b.n	8007a68 <__libc_init_array+0xc>
 8007a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a8e:	4798      	blx	r3
 8007a90:	3601      	adds	r6, #1
 8007a92:	e7f2      	b.n	8007a7a <__libc_init_array+0x1e>
 8007a94:	08008008 	.word	0x08008008
 8007a98:	08008008 	.word	0x08008008
 8007a9c:	08008008 	.word	0x08008008
 8007aa0:	0800800c 	.word	0x0800800c

08007aa4 <memcpy>:
 8007aa4:	440a      	add	r2, r1
 8007aa6:	4291      	cmp	r1, r2
 8007aa8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007aac:	d100      	bne.n	8007ab0 <memcpy+0xc>
 8007aae:	4770      	bx	lr
 8007ab0:	b510      	push	{r4, lr}
 8007ab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ab6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007aba:	4291      	cmp	r1, r2
 8007abc:	d1f9      	bne.n	8007ab2 <memcpy+0xe>
 8007abe:	bd10      	pop	{r4, pc}

08007ac0 <memset>:
 8007ac0:	4402      	add	r2, r0
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d100      	bne.n	8007aca <memset+0xa>
 8007ac8:	4770      	bx	lr
 8007aca:	f803 1b01 	strb.w	r1, [r3], #1
 8007ace:	e7f9      	b.n	8007ac4 <memset+0x4>

08007ad0 <_init>:
 8007ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad2:	bf00      	nop
 8007ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ad6:	bc08      	pop	{r3}
 8007ad8:	469e      	mov	lr, r3
 8007ada:	4770      	bx	lr

08007adc <_fini>:
 8007adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ade:	bf00      	nop
 8007ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ae2:	bc08      	pop	{r3}
 8007ae4:	469e      	mov	lr, r3
 8007ae6:	4770      	bx	lr
